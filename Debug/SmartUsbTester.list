
SmartUsbTester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007124  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b80  08007b80  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007b80  08007b80  00017b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b88  08007b88  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b88  08007b88  00017b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b8c  08007b8c  00017b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  20000088  08007c18  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  08007c18  000206d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f62c  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002472  00000000  00000000  0002f6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00031b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00032b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017727  00000000  00000000  00033a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001198d  00000000  00000000  0004b1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f169  00000000  00000000  0005cb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebca5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004824  00000000  00000000  000ebcf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080072ac 	.word	0x080072ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080072ac 	.word	0x080072ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b974 	b.w	8000bec <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468e      	mov	lr, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	d14d      	bne.n	80009c6 <__udivmoddi4+0xaa>
 800092a:	428a      	cmp	r2, r1
 800092c:	4694      	mov	ip, r2
 800092e:	d969      	bls.n	8000a04 <__udivmoddi4+0xe8>
 8000930:	fab2 f282 	clz	r2, r2
 8000934:	b152      	cbz	r2, 800094c <__udivmoddi4+0x30>
 8000936:	fa01 f302 	lsl.w	r3, r1, r2
 800093a:	f1c2 0120 	rsb	r1, r2, #32
 800093e:	fa20 f101 	lsr.w	r1, r0, r1
 8000942:	fa0c fc02 	lsl.w	ip, ip, r2
 8000946:	ea41 0e03 	orr.w	lr, r1, r3
 800094a:	4094      	lsls	r4, r2
 800094c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000950:	0c21      	lsrs	r1, r4, #16
 8000952:	fbbe f6f8 	udiv	r6, lr, r8
 8000956:	fa1f f78c 	uxth.w	r7, ip
 800095a:	fb08 e316 	mls	r3, r8, r6, lr
 800095e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000962:	fb06 f107 	mul.w	r1, r6, r7
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000972:	f080 811f 	bcs.w	8000bb4 <__udivmoddi4+0x298>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 811c 	bls.w	8000bb4 <__udivmoddi4+0x298>
 800097c:	3e02      	subs	r6, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a5b      	subs	r3, r3, r1
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb3 f0f8 	udiv	r0, r3, r8
 8000988:	fb08 3310 	mls	r3, r8, r0, r3
 800098c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000990:	fb00 f707 	mul.w	r7, r0, r7
 8000994:	42a7      	cmp	r7, r4
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x92>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a0:	f080 810a 	bcs.w	8000bb8 <__udivmoddi4+0x29c>
 80009a4:	42a7      	cmp	r7, r4
 80009a6:	f240 8107 	bls.w	8000bb8 <__udivmoddi4+0x29c>
 80009aa:	4464      	add	r4, ip
 80009ac:	3802      	subs	r0, #2
 80009ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b2:	1be4      	subs	r4, r4, r7
 80009b4:	2600      	movs	r6, #0
 80009b6:	b11d      	cbz	r5, 80009c0 <__udivmoddi4+0xa4>
 80009b8:	40d4      	lsrs	r4, r2
 80009ba:	2300      	movs	r3, #0
 80009bc:	e9c5 4300 	strd	r4, r3, [r5]
 80009c0:	4631      	mov	r1, r6
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d909      	bls.n	80009de <__udivmoddi4+0xc2>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	f000 80ef 	beq.w	8000bae <__udivmoddi4+0x292>
 80009d0:	2600      	movs	r6, #0
 80009d2:	e9c5 0100 	strd	r0, r1, [r5]
 80009d6:	4630      	mov	r0, r6
 80009d8:	4631      	mov	r1, r6
 80009da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009de:	fab3 f683 	clz	r6, r3
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d14a      	bne.n	8000a7c <__udivmoddi4+0x160>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d302      	bcc.n	80009f0 <__udivmoddi4+0xd4>
 80009ea:	4282      	cmp	r2, r0
 80009ec:	f200 80f9 	bhi.w	8000be2 <__udivmoddi4+0x2c6>
 80009f0:	1a84      	subs	r4, r0, r2
 80009f2:	eb61 0303 	sbc.w	r3, r1, r3
 80009f6:	2001      	movs	r0, #1
 80009f8:	469e      	mov	lr, r3
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d0e0      	beq.n	80009c0 <__udivmoddi4+0xa4>
 80009fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a02:	e7dd      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000a04:	b902      	cbnz	r2, 8000a08 <__udivmoddi4+0xec>
 8000a06:	deff      	udf	#255	; 0xff
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	f040 8092 	bne.w	8000b36 <__udivmoddi4+0x21a>
 8000a12:	eba1 010c 	sub.w	r1, r1, ip
 8000a16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1a:	fa1f fe8c 	uxth.w	lr, ip
 8000a1e:	2601      	movs	r6, #1
 8000a20:	0c20      	lsrs	r0, r4, #16
 8000a22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a26:	fb07 1113 	mls	r1, r7, r3, r1
 8000a2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a2e:	fb0e f003 	mul.w	r0, lr, r3
 8000a32:	4288      	cmp	r0, r1
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0x12c>
 8000a36:	eb1c 0101 	adds.w	r1, ip, r1
 8000a3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0x12a>
 8000a40:	4288      	cmp	r0, r1
 8000a42:	f200 80cb 	bhi.w	8000bdc <__udivmoddi4+0x2c0>
 8000a46:	4643      	mov	r3, r8
 8000a48:	1a09      	subs	r1, r1, r0
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a50:	fb07 1110 	mls	r1, r7, r0, r1
 8000a54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a58:	fb0e fe00 	mul.w	lr, lr, r0
 8000a5c:	45a6      	cmp	lr, r4
 8000a5e:	d908      	bls.n	8000a72 <__udivmoddi4+0x156>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a68:	d202      	bcs.n	8000a70 <__udivmoddi4+0x154>
 8000a6a:	45a6      	cmp	lr, r4
 8000a6c:	f200 80bb 	bhi.w	8000be6 <__udivmoddi4+0x2ca>
 8000a70:	4608      	mov	r0, r1
 8000a72:	eba4 040e 	sub.w	r4, r4, lr
 8000a76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a7a:	e79c      	b.n	80009b6 <__udivmoddi4+0x9a>
 8000a7c:	f1c6 0720 	rsb	r7, r6, #32
 8000a80:	40b3      	lsls	r3, r6
 8000a82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a92:	431c      	orrs	r4, r3
 8000a94:	40f9      	lsrs	r1, r7
 8000a96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000aa2:	0c20      	lsrs	r0, r4, #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ab4:	4288      	cmp	r0, r1
 8000ab6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aba:	d90b      	bls.n	8000ad4 <__udivmoddi4+0x1b8>
 8000abc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ac4:	f080 8088 	bcs.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ac8:	4288      	cmp	r0, r1
 8000aca:	f240 8085 	bls.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ace:	f1a8 0802 	sub.w	r8, r8, #2
 8000ad2:	4461      	add	r1, ip
 8000ad4:	1a09      	subs	r1, r1, r0
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000adc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ae0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ae4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae8:	458e      	cmp	lr, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x1e2>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000af4:	d26c      	bcs.n	8000bd0 <__udivmoddi4+0x2b4>
 8000af6:	458e      	cmp	lr, r1
 8000af8:	d96a      	bls.n	8000bd0 <__udivmoddi4+0x2b4>
 8000afa:	3802      	subs	r0, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b02:	fba0 9402 	umull	r9, r4, r0, r2
 8000b06:	eba1 010e 	sub.w	r1, r1, lr
 8000b0a:	42a1      	cmp	r1, r4
 8000b0c:	46c8      	mov	r8, r9
 8000b0e:	46a6      	mov	lr, r4
 8000b10:	d356      	bcc.n	8000bc0 <__udivmoddi4+0x2a4>
 8000b12:	d053      	beq.n	8000bbc <__udivmoddi4+0x2a0>
 8000b14:	b15d      	cbz	r5, 8000b2e <__udivmoddi4+0x212>
 8000b16:	ebb3 0208 	subs.w	r2, r3, r8
 8000b1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b22:	fa22 f306 	lsr.w	r3, r2, r6
 8000b26:	40f1      	lsrs	r1, r6
 8000b28:	431f      	orrs	r7, r3
 8000b2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b2e:	2600      	movs	r6, #0
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	40d8      	lsrs	r0, r3
 8000b3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b40:	fa21 f303 	lsr.w	r3, r1, r3
 8000b44:	4091      	lsls	r1, r2
 8000b46:	4301      	orrs	r1, r0
 8000b48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4c:	fa1f fe8c 	uxth.w	lr, ip
 8000b50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b54:	fb07 3610 	mls	r6, r7, r0, r3
 8000b58:	0c0b      	lsrs	r3, r1, #16
 8000b5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b62:	429e      	cmp	r6, r3
 8000b64:	fa04 f402 	lsl.w	r4, r4, r2
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x260>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b72:	d22f      	bcs.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b74:	429e      	cmp	r6, r3
 8000b76:	d92d      	bls.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	1b9b      	subs	r3, r3, r6
 8000b7e:	b289      	uxth	r1, r1
 8000b80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b84:	fb07 3316 	mls	r3, r7, r6, r3
 8000b88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d908      	bls.n	8000ba6 <__udivmoddi4+0x28a>
 8000b94:	eb1c 0101 	adds.w	r1, ip, r1
 8000b98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b9c:	d216      	bcs.n	8000bcc <__udivmoddi4+0x2b0>
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d914      	bls.n	8000bcc <__udivmoddi4+0x2b0>
 8000ba2:	3e02      	subs	r6, #2
 8000ba4:	4461      	add	r1, ip
 8000ba6:	1ac9      	subs	r1, r1, r3
 8000ba8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bac:	e738      	b.n	8000a20 <__udivmoddi4+0x104>
 8000bae:	462e      	mov	r6, r5
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	e705      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000bb4:	4606      	mov	r6, r0
 8000bb6:	e6e3      	b.n	8000980 <__udivmoddi4+0x64>
 8000bb8:	4618      	mov	r0, r3
 8000bba:	e6f8      	b.n	80009ae <__udivmoddi4+0x92>
 8000bbc:	454b      	cmp	r3, r9
 8000bbe:	d2a9      	bcs.n	8000b14 <__udivmoddi4+0x1f8>
 8000bc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bc8:	3801      	subs	r0, #1
 8000bca:	e7a3      	b.n	8000b14 <__udivmoddi4+0x1f8>
 8000bcc:	4646      	mov	r6, r8
 8000bce:	e7ea      	b.n	8000ba6 <__udivmoddi4+0x28a>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	e794      	b.n	8000afe <__udivmoddi4+0x1e2>
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	e7d1      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bd8:	46d0      	mov	r8, sl
 8000bda:	e77b      	b.n	8000ad4 <__udivmoddi4+0x1b8>
 8000bdc:	3b02      	subs	r3, #2
 8000bde:	4461      	add	r1, ip
 8000be0:	e732      	b.n	8000a48 <__udivmoddi4+0x12c>
 8000be2:	4630      	mov	r0, r6
 8000be4:	e709      	b.n	80009fa <__udivmoddi4+0xde>
 8000be6:	4464      	add	r4, ip
 8000be8:	3802      	subs	r0, #2
 8000bea:	e742      	b.n	8000a72 <__udivmoddi4+0x156>

08000bec <__aeabi_idiv0>:
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <draw_init>:
#define GRAPH_WIDTH SSD1306_WIDTH
#define HEIGHT SSD1306_HEIGHT

uint8_t heights[XN];

void draw_init(){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	SSD1306_Init();
 8000bf4:	f001 fb0c 	bl	8002210 <SSD1306_Init>
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <draw_fill>:

void draw_fill(int color){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	SSD1306_Fill(color);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 fbf7 	bl	80023fc <SSD1306_Fill>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <draw_clear>:

void draw_clear(){
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8000c1a:	f002 f88d 	bl	8002d38 <SSD1306_Clear>
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <draw_update_screen>:

void draw_update_screen(){
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
	SSD1306_UpdateScreen();
 8000c26:	f001 fbb7 	bl	8002398 <SSD1306_UpdateScreen>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <draw_exit_button>:

void draw_exit_button(){
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(100 ,0, 10, 10 ,0);
 8000c34:	2300      	movs	r3, #0
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	230a      	movs	r3, #10
 8000c3a:	220a      	movs	r2, #10
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2064      	movs	r0, #100	; 0x64
 8000c40:	f001 fe7e 	bl	8002940 <SSD1306_DrawFilledRectangle>
	SSD1306_DrawRectangle(100 ,0, 10, 10 ,1);
 8000c44:	2301      	movs	r3, #1
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	230a      	movs	r3, #10
 8000c4a:	220a      	movs	r2, #10
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2064      	movs	r0, #100	; 0x64
 8000c50:	f001 fe0c 	bl	800286c <SSD1306_DrawRectangle>
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <draw_exit_focus>:

void draw_exit_focus(){
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(100 ,0, 10, 10 ,1);
 8000c60:	2301      	movs	r3, #1
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	230a      	movs	r3, #10
 8000c66:	220a      	movs	r2, #10
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2064      	movs	r0, #100	; 0x64
 8000c6c:	f001 fe68 	bl	8002940 <SSD1306_DrawFilledRectangle>
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <draw_main_menu>:

void draw_main_menu() {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	  SSD1306_GotoXY (6,0);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2006      	movs	r0, #6
 8000c80:	f001 fc3e 	bl	8002500 <SSD1306_GotoXY>
	  SSD1306_Puts ("MENU", &Font_7x10, 1);
 8000c84:	2201      	movs	r2, #1
 8000c86:	4915      	ldr	r1, [pc, #84]	; (8000cdc <draw_main_menu+0x64>)
 8000c88:	4815      	ldr	r0, [pc, #84]	; (8000ce0 <draw_main_menu+0x68>)
 8000c8a:	f001 fccf 	bl	800262c <SSD1306_Puts>
	  SSD1306_GotoXY (6, MENU_OFFSET+1);
 8000c8e:	2115      	movs	r1, #21
 8000c90:	2006      	movs	r0, #6
 8000c92:	f001 fc35 	bl	8002500 <SSD1306_GotoXY>
	  SSD1306_Puts ("QC", &Font_7x10, 1);
 8000c96:	2201      	movs	r2, #1
 8000c98:	4910      	ldr	r1, [pc, #64]	; (8000cdc <draw_main_menu+0x64>)
 8000c9a:	4812      	ldr	r0, [pc, #72]	; (8000ce4 <draw_main_menu+0x6c>)
 8000c9c:	f001 fcc6 	bl	800262c <SSD1306_Puts>
	  SSD1306_GotoXY (6, MENU_OFFSET+1+1*STEP);
 8000ca0:	211e      	movs	r1, #30
 8000ca2:	2006      	movs	r0, #6
 8000ca4:	f001 fc2c 	bl	8002500 <SSD1306_GotoXY>
	  SSD1306_Puts ("POWER", &Font_7x10, 1);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	490c      	ldr	r1, [pc, #48]	; (8000cdc <draw_main_menu+0x64>)
 8000cac:	480e      	ldr	r0, [pc, #56]	; (8000ce8 <draw_main_menu+0x70>)
 8000cae:	f001 fcbd 	bl	800262c <SSD1306_Puts>
	  SSD1306_GotoXY (6, MENU_OFFSET+1+2*STEP);
 8000cb2:	2127      	movs	r1, #39	; 0x27
 8000cb4:	2006      	movs	r0, #6
 8000cb6:	f001 fc23 	bl	8002500 <SSD1306_GotoXY>
	  SSD1306_Puts ("CURRENT CONTROL", &Font_7x10, 1);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4907      	ldr	r1, [pc, #28]	; (8000cdc <draw_main_menu+0x64>)
 8000cbe:	480b      	ldr	r0, [pc, #44]	; (8000cec <draw_main_menu+0x74>)
 8000cc0:	f001 fcb4 	bl	800262c <SSD1306_Puts>
	  SSD1306_GotoXY (6, MENU_OFFSET+1+3*STEP);
 8000cc4:	2130      	movs	r1, #48	; 0x30
 8000cc6:	2006      	movs	r0, #6
 8000cc8:	f001 fc1a 	bl	8002500 <SSD1306_GotoXY>
	  SSD1306_Puts ("GRAPHS", &Font_7x10, 1);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4903      	ldr	r1, [pc, #12]	; (8000cdc <draw_main_menu+0x64>)
 8000cd0:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <draw_main_menu+0x78>)
 8000cd2:	f001 fcab 	bl	800262c <SSD1306_Puts>
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	080072c4 	.word	0x080072c4
 8000ce4:	080072cc 	.word	0x080072cc
 8000ce8:	080072d0 	.word	0x080072d0
 8000cec:	080072d8 	.word	0x080072d8
 8000cf0:	080072e8 	.word	0x080072e8

08000cf4 <draw_qc_menu>:

void draw_qc_menu(){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	SSD1306_GotoXY (6,0);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2006      	movs	r0, #6
 8000cfc:	f001 fc00 	bl	8002500 <SSD1306_GotoXY>
	SSD1306_Puts ("Quick Charge", &Font_7x10, 1);
 8000d00:	2201      	movs	r2, #1
 8000d02:	4919      	ldr	r1, [pc, #100]	; (8000d68 <draw_qc_menu+0x74>)
 8000d04:	4819      	ldr	r0, [pc, #100]	; (8000d6c <draw_qc_menu+0x78>)
 8000d06:	f001 fc91 	bl	800262c <SSD1306_Puts>
	SSD1306_GotoXY (6, MENU_OFFSET-3);
 8000d0a:	2111      	movs	r1, #17
 8000d0c:	2006      	movs	r0, #6
 8000d0e:	f001 fbf7 	bl	8002500 <SSD1306_GotoXY>
	SSD1306_Puts ("Set 5V  ", &Font_7x10, 1);
 8000d12:	2201      	movs	r2, #1
 8000d14:	4914      	ldr	r1, [pc, #80]	; (8000d68 <draw_qc_menu+0x74>)
 8000d16:	4816      	ldr	r0, [pc, #88]	; (8000d70 <draw_qc_menu+0x7c>)
 8000d18:	f001 fc88 	bl	800262c <SSD1306_Puts>
	SSD1306_GotoXY (6, MENU_OFFSET-3+1*STEP);
 8000d1c:	211a      	movs	r1, #26
 8000d1e:	2006      	movs	r0, #6
 8000d20:	f001 fbee 	bl	8002500 <SSD1306_GotoXY>
	SSD1306_Puts ("Set 9V  ", &Font_7x10, 1);
 8000d24:	2201      	movs	r2, #1
 8000d26:	4910      	ldr	r1, [pc, #64]	; (8000d68 <draw_qc_menu+0x74>)
 8000d28:	4812      	ldr	r0, [pc, #72]	; (8000d74 <draw_qc_menu+0x80>)
 8000d2a:	f001 fc7f 	bl	800262c <SSD1306_Puts>
	SSD1306_GotoXY (6, MENU_OFFSET-3+2*STEP);
 8000d2e:	2123      	movs	r1, #35	; 0x23
 8000d30:	2006      	movs	r0, #6
 8000d32:	f001 fbe5 	bl	8002500 <SSD1306_GotoXY>
	SSD1306_Puts ("Set 12V ", &Font_7x10, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	490b      	ldr	r1, [pc, #44]	; (8000d68 <draw_qc_menu+0x74>)
 8000d3a:	480f      	ldr	r0, [pc, #60]	; (8000d78 <draw_qc_menu+0x84>)
 8000d3c:	f001 fc76 	bl	800262c <SSD1306_Puts>
	SSD1306_GotoXY (6, MENU_OFFSET-3+3*STEP);
 8000d40:	212c      	movs	r1, #44	; 0x2c
 8000d42:	2006      	movs	r0, #6
 8000d44:	f001 fbdc 	bl	8002500 <SSD1306_GotoXY>
	SSD1306_Puts ("Set 20V ", &Font_7x10, 1);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	4907      	ldr	r1, [pc, #28]	; (8000d68 <draw_qc_menu+0x74>)
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <draw_qc_menu+0x88>)
 8000d4e:	f001 fc6d 	bl	800262c <SSD1306_Puts>
	SSD1306_GotoXY (6, MENU_OFFSET-3+4*STEP);
 8000d52:	2135      	movs	r1, #53	; 0x35
 8000d54:	2006      	movs	r0, #6
 8000d56:	f001 fbd3 	bl	8002500 <SSD1306_GotoXY>
    SSD1306_Puts ("QC 3.0  ", &Font_7x10, 1);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4902      	ldr	r1, [pc, #8]	; (8000d68 <draw_qc_menu+0x74>)
 8000d5e:	4808      	ldr	r0, [pc, #32]	; (8000d80 <draw_qc_menu+0x8c>)
 8000d60:	f001 fc64 	bl	800262c <SSD1306_Puts>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	080072f0 	.word	0x080072f0
 8000d70:	08007300 	.word	0x08007300
 8000d74:	0800730c 	.word	0x0800730c
 8000d78:	08007318 	.word	0x08007318
 8000d7c:	08007324 	.word	0x08007324
 8000d80:	08007330 	.word	0x08007330

08000d84 <draw_qc_menu_deselect>:

void draw_qc_menu_deselect(uint16_t pos){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80fb      	strh	r3, [r7, #6]
	SSD1306_DrawRectangle(6,MENU_OFFSET-4+(pos-1)*STEP, 124, 9 ,0);
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	461a      	mov	r2, r3
 8000d92:	00d2      	lsls	r2, r2, #3
 8000d94:	4413      	add	r3, r2
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	3307      	adds	r3, #7
 8000d9a:	b299      	uxth	r1, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2309      	movs	r3, #9
 8000da2:	227c      	movs	r2, #124	; 0x7c
 8000da4:	2006      	movs	r0, #6
 8000da6:	f001 fd61 	bl	800286c <SSD1306_DrawRectangle>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <draw_qc_menu_focus>:

void draw_qc_menu_focus(uint16_t pos){
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af02      	add	r7, sp, #8
 8000db8:	4603      	mov	r3, r0
 8000dba:	80fb      	strh	r3, [r7, #6]
	SSD1306_DrawRectangle(6,MENU_OFFSET-4+(pos-1)*STEP, 124, 9 ,1);
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	00d2      	lsls	r2, r2, #3
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	3307      	adds	r3, #7
 8000dc8:	b299      	uxth	r1, r3
 8000dca:	2301      	movs	r3, #1
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2309      	movs	r3, #9
 8000dd0:	227c      	movs	r2, #124	; 0x7c
 8000dd2:	2006      	movs	r0, #6
 8000dd4:	f001 fd4a 	bl	800286c <SSD1306_DrawRectangle>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <draw_main_menu_selection>:

void draw_main_menu_selection(uint16_t move, uint16_t previous_move){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af02      	add	r7, sp, #8
 8000de6:	4603      	mov	r3, r0
 8000de8:	460a      	mov	r2, r1
 8000dea:	80fb      	strh	r3, [r7, #6]
 8000dec:	4613      	mov	r3, r2
 8000dee:	80bb      	strh	r3, [r7, #4]
	SSD1306_DrawRectangle(6,MENU_OFFSET+(previous_move)*STEP, 124, 9 ,0);
 8000df0:	88bb      	ldrh	r3, [r7, #4]
 8000df2:	461a      	mov	r2, r3
 8000df4:	00d2      	lsls	r2, r2, #3
 8000df6:	4413      	add	r3, r2
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	3314      	adds	r3, #20
 8000dfc:	b299      	uxth	r1, r3
 8000dfe:	2300      	movs	r3, #0
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2309      	movs	r3, #9
 8000e04:	227c      	movs	r2, #124	; 0x7c
 8000e06:	2006      	movs	r0, #6
 8000e08:	f001 fd30 	bl	800286c <SSD1306_DrawRectangle>
	SSD1306_DrawRectangle(6,MENU_OFFSET+(move)*STEP, 124, 9 ,1);
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	00d2      	lsls	r2, r2, #3
 8000e12:	4413      	add	r3, r2
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	3314      	adds	r3, #20
 8000e18:	b299      	uxth	r1, r3
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2309      	movs	r3, #9
 8000e20:	227c      	movs	r2, #124	; 0x7c
 8000e22:	2006      	movs	r0, #6
 8000e24:	f001 fd22 	bl	800286c <SSD1306_DrawRectangle>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <draw_power_menu>:

void draw_power_menu(uint32_t voltage, uint32_t amperage, uint32_t power){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b090      	sub	sp, #64	; 0x40
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
    SSD1306_GotoXY (6,0);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2006      	movs	r0, #6
 8000e40:	f001 fb5e 	bl	8002500 <SSD1306_GotoXY>
    SSD1306_Puts("Power", &Font_7x10, 1);
 8000e44:	2201      	movs	r2, #1
 8000e46:	491f      	ldr	r1, [pc, #124]	; (8000ec4 <draw_power_menu+0x94>)
 8000e48:	481f      	ldr	r0, [pc, #124]	; (8000ec8 <draw_power_menu+0x98>)
 8000e4a:	f001 fbef 	bl	800262c <SSD1306_Puts>

    char str[14];
    sprintf(str, "%lu mV     ", voltage);
 8000e4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	491d      	ldr	r1, [pc, #116]	; (8000ecc <draw_power_menu+0x9c>)
 8000e56:	4618      	mov	r0, r3
 8000e58:	f005 fdc8 	bl	80069ec <siprintf>
    SSD1306_GotoXY(6, MENU_OFFSET-3+2*STEP);
 8000e5c:	2123      	movs	r1, #35	; 0x23
 8000e5e:	2006      	movs	r0, #6
 8000e60:	f001 fb4e 	bl	8002500 <SSD1306_GotoXY>
    SSD1306_Puts(str, &Font_7x10, 1);
 8000e64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4916      	ldr	r1, [pc, #88]	; (8000ec4 <draw_power_menu+0x94>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 fbdd 	bl	800262c <SSD1306_Puts>

    char str2[14];
    sprintf(str2, "%lu mA     ", amperage);
 8000e72:	f107 0320 	add.w	r3, r7, #32
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	4915      	ldr	r1, [pc, #84]	; (8000ed0 <draw_power_menu+0xa0>)
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f005 fdb6 	bl	80069ec <siprintf>
    SSD1306_GotoXY(6, MENU_OFFSET-3+3*STEP);
 8000e80:	212c      	movs	r1, #44	; 0x2c
 8000e82:	2006      	movs	r0, #6
 8000e84:	f001 fb3c 	bl	8002500 <SSD1306_GotoXY>
    SSD1306_Puts(str2, &Font_7x10, 1);
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	490d      	ldr	r1, [pc, #52]	; (8000ec4 <draw_power_menu+0x94>)
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 fbcb 	bl	800262c <SSD1306_Puts>

    char str3[14];
    sprintf(str3, "%lu mW     ", power);
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	490d      	ldr	r1, [pc, #52]	; (8000ed4 <draw_power_menu+0xa4>)
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f005 fda4 	bl	80069ec <siprintf>
    SSD1306_GotoXY(6, MENU_OFFSET-3+4*STEP);
 8000ea4:	2135      	movs	r1, #53	; 0x35
 8000ea6:	2006      	movs	r0, #6
 8000ea8:	f001 fb2a 	bl	8002500 <SSD1306_GotoXY>
    SSD1306_Puts(str3, &Font_7x10, 1);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4904      	ldr	r1, [pc, #16]	; (8000ec4 <draw_power_menu+0x94>)
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 fbb9 	bl	800262c <SSD1306_Puts>
}
 8000eba:	bf00      	nop
 8000ebc:	3740      	adds	r7, #64	; 0x40
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	0800733c 	.word	0x0800733c
 8000ecc:	08007344 	.word	0x08007344
 8000ed0:	08007350 	.word	0x08007350
 8000ed4:	0800735c 	.word	0x0800735c

08000ed8 <draw_current_control_menu>:

void draw_current_control_menu(int amperage_load){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	SSD1306_GotoXY (6,0);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2006      	movs	r0, #6
 8000ee4:	f001 fb0c 	bl	8002500 <SSD1306_GotoXY>
	SSD1306_Puts("Current Control", &Font_7x10, 1);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	490d      	ldr	r1, [pc, #52]	; (8000f20 <draw_current_control_menu+0x48>)
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <draw_current_control_menu+0x4c>)
 8000eee:	f001 fb9d 	bl	800262c <SSD1306_Puts>

	char buf[8];
	snprintf(buf, 8, "%d    ", amperage_load);
 8000ef2:	f107 0008 	add.w	r0, r7, #8
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <draw_current_control_menu+0x50>)
 8000efa:	2108      	movs	r1, #8
 8000efc:	f005 fd42 	bl	8006984 <sniprintf>
	SSD1306_GotoXY (6, MENU_OFFSET+1);
 8000f00:	2115      	movs	r1, #21
 8000f02:	2006      	movs	r0, #6
 8000f04:	f001 fafc 	bl	8002500 <SSD1306_GotoXY>
	SSD1306_Puts (buf, &Font_7x10, 1);
 8000f08:	f107 0308 	add.w	r3, r7, #8
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4904      	ldr	r1, [pc, #16]	; (8000f20 <draw_current_control_menu+0x48>)
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 fb8b 	bl	800262c <SSD1306_Puts>
}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000000 	.word	0x20000000
 8000f24:	08007368 	.word	0x08007368
 8000f28:	08007378 	.word	0x08007378

08000f2c <graph_builder>:

void graph_builder(int value, int lower_bound, int upper_bound){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	//int prev_point = heights[0];
	for(int i = 1; i < XN; ++i){
 8000f38:	2301      	movs	r3, #1
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f3c:	e01e      	b.n	8000f7c <graph_builder+0x50>
		//SSD1306_DrawLine(X_STEP*(i-1),HEIGHT-prev_point, X_STEP*i, HEIGHT-heights[i], 1);
		SSD1306_DrawPixel(X_STEP*i, HEIGHT - heights[i-1] - 3, 0);
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	b298      	uxth	r0, r3
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	3b01      	subs	r3, #1
 8000f46:	4a25      	ldr	r2, [pc, #148]	; (8000fdc <graph_builder+0xb0>)
 8000f48:	5cd3      	ldrb	r3, [r2, r3]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	2200      	movs	r2, #0
 8000f54:	4619      	mov	r1, r3
 8000f56:	f001 fa69 	bl	800242c <SSD1306_DrawPixel>
		SSD1306_DrawPixel(X_STEP*i, HEIGHT - heights[i] - 3, 1);
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	b298      	uxth	r0, r3
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <graph_builder+0xb0>)
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	4413      	add	r3, r2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4619      	mov	r1, r3
 8000f72:	f001 fa5b 	bl	800242c <SSD1306_DrawPixel>
	for(int i = 1; i < XN; ++i){
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	3301      	adds	r3, #1
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7e:	2b81      	cmp	r3, #129	; 0x81
 8000f80:	dddd      	ble.n	8000f3e <graph_builder+0x12>
		//prev_point=heights[i];
	}
	// Put the new y-coordinate in the ring buffer with the rightmost y.
	int a = lower_bound;
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	61fb      	str	r3, [r7, #28]
	int b = upper_bound;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	61bb      	str	r3, [r7, #24]
	// To map a value from [a, b] to [c, d]
	// f(t)=c+(d-c)*(t-a)/(b-a)
	// Where c = MENU_OFFSET, d = HEIGHT
	int mappedValue = (HEIGHT - MENU_OFFSET - 5)*(value-a)/(b-a);
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	1ad2      	subs	r2, r2, r3
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4619      	mov	r1, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	fb91 f3f3 	sdiv	r3, r1, r3
 8000fa4:	623b      	str	r3, [r7, #32]

	if (mappedValue > 255)
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
 8000fa8:	2bff      	cmp	r3, #255	; 0xff
 8000faa:	dd02      	ble.n	8000fb2 <graph_builder+0x86>
		mappedValue = 255;
 8000fac:	23ff      	movs	r3, #255	; 0xff
 8000fae:	623b      	str	r3, [r7, #32]
 8000fb0:	e004      	b.n	8000fbc <graph_builder+0x90>
	else if (mappedValue < 0)
 8000fb2:	6a3b      	ldr	r3, [r7, #32]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	da01      	bge.n	8000fbc <graph_builder+0x90>
		mappedValue = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]

	uint8_t y1 = (uint8_t)(mappedValue);
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	75fb      	strb	r3, [r7, #23]
	
	// Shift the rest of the y-coordinates to the left. Use memcpy to copy the memory.
	memcpy(heights, heights + 1, (XN - 1) * sizeof(uint8_t));
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <graph_builder+0xb4>)
 8000fc2:	2281      	movs	r2, #129	; 0x81
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <graph_builder+0xb0>)
 8000fc8:	f005 fcc6 	bl	8006958 <memcpy>
	heights[XN - 1] = y1;
 8000fcc:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <graph_builder+0xb0>)
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	f882 3081 	strb.w	r3, [r2, #129]	; 0x81
}
 8000fd4:	bf00      	nop
 8000fd6:	3728      	adds	r7, #40	; 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200000a4 	.word	0x200000a4
 8000fe0:	200000a5 	.word	0x200000a5

08000fe4 <draw_graph_builder_menu>:

void draw_graph_builder_menu(int lower_bound, int upper_bound, const graph_t *graphs, int curr_graph){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	603b      	str	r3, [r7, #0]

	SSD1306_GotoXY (6,0);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2006      	movs	r0, #6
 8000ff6:	f001 fa83 	bl	8002500 <SSD1306_GotoXY>
	char str[18];
	snprintf(str, 18, "%s [%d,%d]        ", graphs[curr_graph].description, lower_bound, upper_bound);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	011b      	lsls	r3, r3, #4
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	1d1a      	adds	r2, r3, #4
 8001004:	f107 0014 	add.w	r0, r7, #20
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <draw_graph_builder_menu+0x70>)
 8001014:	2112      	movs	r1, #18
 8001016:	f005 fcb5 	bl	8006984 <sniprintf>
	SSD1306_Puts(str, &Font_7x10, 1);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	2201      	movs	r2, #1
 8001020:	490d      	ldr	r1, [pc, #52]	; (8001058 <draw_graph_builder_menu+0x74>)
 8001022:	4618      	mov	r0, r3
 8001024:	f001 fb02 	bl	800262c <SSD1306_Puts>

	// Boundary selectors
	draw_graph_menu_upper_bound_button();
 8001028:	f000 f818 	bl	800105c <draw_graph_menu_upper_bound_button>
	draw_graph_menu_lower_bound_button();
 800102c:	f000 f820 	bl	8001070 <draw_graph_menu_lower_bound_button>

	graph_builder(*(graphs[curr_graph].value), lower_bound, upper_bound);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	68f9      	ldr	r1, [r7, #12]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff73 	bl	8000f2c <graph_builder>

	// Reset
	draw_graph_menu_reset_button();
 8001046:	f000 f859 	bl	80010fc <draw_graph_menu_reset_button>
}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	08007380 	.word	0x08007380
 8001058:	20000000 	.word	0x20000000

0800105c <draw_graph_menu_upper_bound_button>:

void draw_graph_menu_upper_bound_button(){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	SSD1306_DrawCircle(XN-1, MENU_OFFSET, 3, 1);
 8001060:	2301      	movs	r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	2114      	movs	r1, #20
 8001066:	2081      	movs	r0, #129	; 0x81
 8001068:	f001 fcb7 	bl	80029da <SSD1306_DrawCircle>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <draw_graph_menu_lower_bound_button>:

void draw_graph_menu_lower_bound_button(){
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	SSD1306_DrawCircle(XN-1, HEIGHT-5, 3, 1);
 8001074:	2301      	movs	r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	213c      	movs	r1, #60	; 0x3c
 800107a:	2081      	movs	r0, #129	; 0x81
 800107c:	f001 fcad 	bl	80029da <SSD1306_DrawCircle>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <draw_graph_menu_upper_bound_selected>:

void draw_graph_menu_upper_bound_selected(){
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	SSD1306_DrawFilledCircle(XN-1, MENU_OFFSET, 3, 1);
 8001088:	2301      	movs	r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	2114      	movs	r1, #20
 800108e:	2081      	movs	r0, #129	; 0x81
 8001090:	f001 fd77 	bl	8002b82 <SSD1306_DrawFilledCircle>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <draw_graph_menu_upper_bound_deselect>:

void draw_graph_menu_upper_bound_deselect(){
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	SSD1306_DrawFilledCircle(XN-1, MENU_OFFSET, 3, 0);
 800109c:	2300      	movs	r3, #0
 800109e:	2203      	movs	r2, #3
 80010a0:	2114      	movs	r1, #20
 80010a2:	2081      	movs	r0, #129	; 0x81
 80010a4:	f001 fd6d 	bl	8002b82 <SSD1306_DrawFilledCircle>
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <draw_graph_menu_upper_bound_focus>:

void draw_graph_menu_upper_bound_focus(){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	SSD1306_DrawCircle(XN-1, MENU_OFFSET, 5, 1);
 80010b0:	2301      	movs	r3, #1
 80010b2:	2205      	movs	r2, #5
 80010b4:	2114      	movs	r1, #20
 80010b6:	2081      	movs	r0, #129	; 0x81
 80010b8:	f001 fc8f 	bl	80029da <SSD1306_DrawCircle>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <draw_graph_menu_lower_bound_selected>:

void draw_graph_menu_lower_bound_selected(){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	SSD1306_DrawFilledCircle(XN-1, HEIGHT-5, 3, 1);
 80010c4:	2301      	movs	r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	213c      	movs	r1, #60	; 0x3c
 80010ca:	2081      	movs	r0, #129	; 0x81
 80010cc:	f001 fd59 	bl	8002b82 <SSD1306_DrawFilledCircle>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <draw_graph_menu_lower_bound_deselect>:

void draw_graph_menu_lower_bound_deselect(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	SSD1306_DrawFilledCircle(XN-1, HEIGHT-5, 3, 0);
 80010d8:	2300      	movs	r3, #0
 80010da:	2203      	movs	r2, #3
 80010dc:	213c      	movs	r1, #60	; 0x3c
 80010de:	2081      	movs	r0, #129	; 0x81
 80010e0:	f001 fd4f 	bl	8002b82 <SSD1306_DrawFilledCircle>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <draw_graph_menu_lower_bound_focus>:

void draw_graph_menu_lower_bound_focus(){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	SSD1306_DrawCircle(XN-1, HEIGHT-5, 5, 1);
 80010ec:	2301      	movs	r3, #1
 80010ee:	2205      	movs	r2, #5
 80010f0:	213c      	movs	r1, #60	; 0x3c
 80010f2:	2081      	movs	r0, #129	; 0x81
 80010f4:	f001 fc71 	bl	80029da <SSD1306_DrawCircle>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <draw_graph_menu_reset_button>:

void draw_graph_menu_reset_button(){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	SSD1306_GotoXY (6, HEIGHT-12);
 8001100:	2135      	movs	r1, #53	; 0x35
 8001102:	2006      	movs	r0, #6
 8001104:	f001 f9fc 	bl	8002500 <SSD1306_GotoXY>
	SSD1306_DrawFilledCircle(6+3, HEIGHT-9, 7, 0);
 8001108:	2300      	movs	r3, #0
 800110a:	2207      	movs	r2, #7
 800110c:	2138      	movs	r1, #56	; 0x38
 800110e:	2009      	movs	r0, #9
 8001110:	f001 fd37 	bl	8002b82 <SSD1306_DrawFilledCircle>
	SSD1306_Puts ("R", &Font_7x10, 1);
 8001114:	2201      	movs	r2, #1
 8001116:	4903      	ldr	r1, [pc, #12]	; (8001124 <draw_graph_menu_reset_button+0x28>)
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <draw_graph_menu_reset_button+0x2c>)
 800111a:	f001 fa87 	bl	800262c <SSD1306_Puts>
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000000 	.word	0x20000000
 8001128:	08007394 	.word	0x08007394

0800112c <draw_graph_menu_reset_focus>:

void draw_graph_menu_reset_focus(){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	SSD1306_DrawCircle(6+3, HEIGHT-9, 7, 1);
 8001130:	2301      	movs	r3, #1
 8001132:	2207      	movs	r2, #7
 8001134:	2138      	movs	r1, #56	; 0x38
 8001136:	2009      	movs	r0, #9
 8001138:	f001 fc4f 	bl	80029da <SSD1306_DrawCircle>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <draw_graph_menu_data_deselect>:

void draw_graph_menu_data_deselect(){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af02      	add	r7, sp, #8
	SSD1306_DrawRectangle(4, 0, 18, 10 , 0);
 8001146:	2300      	movs	r3, #0
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	230a      	movs	r3, #10
 800114c:	2212      	movs	r2, #18
 800114e:	2100      	movs	r1, #0
 8001150:	2004      	movs	r0, #4
 8001152:	f001 fb8b 	bl	800286c <SSD1306_DrawRectangle>
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <draw_graph_menu_data_focus>:

void draw_graph_menu_data_selected(){
	SSD1306_DrawRectangle(4, 0, 18, 10 , 0);
}

void draw_graph_menu_data_focus(){
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af02      	add	r7, sp, #8
	SSD1306_DrawRectangle(4, 0, 18, 10 , 1);
 8001162:	2301      	movs	r3, #1
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	230a      	movs	r3, #10
 8001168:	2212      	movs	r2, #18
 800116a:	2100      	movs	r1, #0
 800116c:	2004      	movs	r0, #4
 800116e:	f001 fb7d 	bl	800286c <SSD1306_DrawRectangle>
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <draw_graph_menu_exit_deselect>:

void draw_graph_menu_exit_deselect(){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(6, MENU_OFFSET-3, 6, 6 ,0);
 800117e:	2300      	movs	r3, #0
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2306      	movs	r3, #6
 8001184:	2206      	movs	r2, #6
 8001186:	2111      	movs	r1, #17
 8001188:	2006      	movs	r0, #6
 800118a:	f001 fbd9 	bl	8002940 <SSD1306_DrawFilledRectangle>
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <draw_graph_menu_exit_button>:

void draw_graph_menu_exit_button(){
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af02      	add	r7, sp, #8
	SSD1306_DrawRectangle(6, MENU_OFFSET-3, 6, 6 ,1);
 800119a:	2301      	movs	r3, #1
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2306      	movs	r3, #6
 80011a0:	2206      	movs	r2, #6
 80011a2:	2111      	movs	r1, #17
 80011a4:	2006      	movs	r0, #6
 80011a6:	f001 fb61 	bl	800286c <SSD1306_DrawRectangle>
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <draw_graph_menu_exit_focus>:

void draw_graph_menu_exit_focus(){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(6, MENU_OFFSET-3, 6, 6 ,1);
 80011b6:	2301      	movs	r3, #1
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2306      	movs	r3, #6
 80011bc:	2206      	movs	r2, #6
 80011be:	2111      	movs	r1, #17
 80011c0:	2006      	movs	r0, #6
 80011c2:	f001 fbbd 	bl	8002940 <SSD1306_DrawFilledRectangle>
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <draw_graph_menu_clear_selection>:

void draw_graph_menu_clear_selection(){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	draw_graph_menu_data_deselect();
 80011d0:	f7ff ffb6 	bl	8001140 <draw_graph_menu_data_deselect>
	draw_graph_menu_exit_deselect();
 80011d4:	f7ff ffd0 	bl	8001178 <draw_graph_menu_exit_deselect>
	SSD1306_DrawCircle(XN-1, MENU_OFFSET, 5, 0);
 80011d8:	2300      	movs	r3, #0
 80011da:	2205      	movs	r2, #5
 80011dc:	2114      	movs	r1, #20
 80011de:	2081      	movs	r0, #129	; 0x81
 80011e0:	f001 fbfb 	bl	80029da <SSD1306_DrawCircle>
	SSD1306_DrawCircle(XN-1, HEIGHT-5, 5, 0);
 80011e4:	2300      	movs	r3, #0
 80011e6:	2205      	movs	r2, #5
 80011e8:	213c      	movs	r1, #60	; 0x3c
 80011ea:	2081      	movs	r0, #129	; 0x81
 80011ec:	f001 fbf5 	bl	80029da <SSD1306_DrawCircle>
	SSD1306_DrawCircle(6+3, HEIGHT-9, 7, 0);
 80011f0:	2300      	movs	r3, #0
 80011f2:	2207      	movs	r2, #7
 80011f4:	2138      	movs	r1, #56	; 0x38
 80011f6:	2009      	movs	r0, #9
 80011f8:	f001 fbef 	bl	80029da <SSD1306_DrawCircle>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <wireWriteRegister>:
 @brief  Sends a single command byte over I2C
 */
/**************************************************************************/
uint8_t adrs_219 = 0x41; // you can call this from main function when necessary especially when using multiple INA219 on board
void wireWriteRegister (uint8_t reg, uint16_t value)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af04      	add	r7, sp, #16
 8001206:	4603      	mov	r3, r0
 8001208:	460a      	mov	r2, r1
 800120a:	71fb      	strb	r3, [r7, #7]
 800120c:	4613      	mov	r3, r2
 800120e:	80bb      	strh	r3, [r7, #4]
    uint8_t i2c_temp[2];
    i2c_temp[0] = value>>8;
 8001210:	88bb      	ldrh	r3, [r7, #4]
 8001212:	0a1b      	lsrs	r3, r3, #8
 8001214:	b29b      	uxth	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	733b      	strb	r3, [r7, #12]
    i2c_temp[1] = value;
 800121a:	88bb      	ldrh	r3, [r7, #4]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Mem_Write(&hi2c1, adrs_219<<1, (uint16_t)reg, 1, i2c_temp, 2, 0xffffffff);
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <wireWriteRegister+0x54>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	b299      	uxth	r1, r3
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	b29a      	uxth	r2, r3
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	2302      	movs	r3, #2
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2301      	movs	r3, #1
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <wireWriteRegister+0x58>)
 8001242:	f002 fdc9 	bl	8003dd8 <HAL_I2C_Mem_Write>
    HAL_Delay(1);
 8001246:	2001      	movs	r0, #1
 8001248:	f002 f866 	bl	8003318 <HAL_Delay>
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000008 	.word	0x20000008
 8001258:	20000134 	.word	0x20000134

0800125c <wireReadRegister>:
/*!
 @brief  Reads a 16 bit values over I2C
 */
/**************************************************************************/
void wireReadRegister(uint8_t reg, uint16_t *value)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af04      	add	r7, sp, #16
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
    uint8_t i2c_temp[2];
    HAL_I2C_Mem_Read(&hi2c1, adrs_219<<1, (uint16_t)reg, 1,i2c_temp, 2, 0xffffffff);
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <wireReadRegister+0x54>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b29b      	uxth	r3, r3
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	b299      	uxth	r1, r3
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	b29a      	uxth	r2, r3
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	2302      	movs	r3, #2
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2301      	movs	r3, #1
 8001288:	480a      	ldr	r0, [pc, #40]	; (80012b4 <wireReadRegister+0x58>)
 800128a:	f002 fe9f 	bl	8003fcc <HAL_I2C_Mem_Read>
    HAL_Delay(1);
 800128e:	2001      	movs	r0, #1
 8001290:	f002 f842 	bl	8003318 <HAL_Delay>
    *value = ((uint16_t)i2c_temp[0]<<8 )|(uint16_t)i2c_temp[1];
 8001294:	7b3b      	ldrb	r3, [r7, #12]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	7b7b      	ldrb	r3, [r7, #13]
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	801a      	strh	r2, [r3, #0]
}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000008 	.word	0x20000008
 80012b4:	20000134 	.word	0x20000134

080012b8 <setCalibration_32V_2A_custom>:
 occurs at 3.2A.

 @note   These calculations assume a 0.1 ohm resistor is present
 */
/**************************************************************************/
void setCalibration_32V_2A_custom(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
    // 5. Compute the calibration register
    // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
    // Cal = 4096 (0x1000)

    // ina219_calValue = 4096;
    ina219_calValue = 5120;  // Rsh=0.04R,
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <setCalibration_32V_2A_custom+0x40>)
 80012c0:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80012c4:	601a      	str	r2, [r3, #0]
    // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
    // MaximumPower = 3.2 * 32V
    // MaximumPower = 102.4W

    // Set multipliers to convert raw current/power values
    ina219_currentDivider_mA = 6; // Current LSB = 100uA per bit (1000/100 = 10)
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <setCalibration_32V_2A_custom+0x44>)
 80012c8:	2206      	movs	r2, #6
 80012ca:	601a      	str	r2, [r3, #0]
    ina219_powerMultiplier_mW = 3;     // Power LSB = 1mW per bit (2/1)
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <setCalibration_32V_2A_custom+0x48>)
 80012ce:	2203      	movs	r2, #3
 80012d0:	601a      	str	r2, [r3, #0]

    // Set Calibration register to 'Cal' calculated above
    wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <setCalibration_32V_2A_custom+0x40>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4619      	mov	r1, r3
 80012da:	2005      	movs	r0, #5
 80012dc:	f7ff ff90 	bl	8001200 <wireWriteRegister>

    // Set Config register to take into account the settings above
    uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V
 80012e0:	f643 13ff 	movw	r3, #14847	; 0x39ff
 80012e4:	80fb      	strh	r3, [r7, #6]
            | INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT
            | INA219_CONFIG_SADCRES_12BIT_128S_69MS
            | INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
    wireWriteRegister(INA219_REG_CONFIG, config);
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	4619      	mov	r1, r3
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff ff88 	bl	8001200 <wireWriteRegister>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000130 	.word	0x20000130
 80012fc:	20000128 	.word	0x20000128
 8001300:	2000012c 	.word	0x2000012c

08001304 <getBusVoltage_raw>:
/*!
 @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
 @return the raw bus voltage reading
 */
/**************************************************************************/
int16_t getBusVoltage_raw() {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
    uint16_t value;
    wireReadRegister(INA219_REG_BUSVOLTAGE, &value);
 800130a:	1dbb      	adds	r3, r7, #6
 800130c:	4619      	mov	r1, r3
 800130e:	2002      	movs	r0, #2
 8001310:	f7ff ffa4 	bl	800125c <wireReadRegister>

    // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
    return (int16_t) ((value >> 3) * 4);
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	08db      	lsrs	r3, r3, #3
 8001318:	b29b      	uxth	r3, r3
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	b29b      	uxth	r3, r3
 800131e:	b21b      	sxth	r3, r3
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <getCurrent_raw>:
/*!
 @brief  Gets the raw current value (16-bit signed integer, so +-32767)
 @return the raw current reading
 */
/**************************************************************************/
int16_t getCurrent_raw() {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0

    // Sometimes a sharp load will reset the INA219, which will
    // reset the cal register, meaning CURRENT and POWER will
    // not be available ... avoid this by always setting a cal
    // value even if it's an unfortunate extra step
    wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <getCurrent_raw+0x2c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	4619      	mov	r1, r3
 8001336:	2005      	movs	r0, #5
 8001338:	f7ff ff62 	bl	8001200 <wireWriteRegister>

    // Now we can safely read the CURRENT register!
    wireReadRegister(INA219_REG_CURRENT, &value);
 800133c:	1dbb      	adds	r3, r7, #6
 800133e:	4619      	mov	r1, r3
 8001340:	2004      	movs	r0, #4
 8001342:	f7ff ff8b 	bl	800125c <wireReadRegister>

    return (int16_t) value;
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	b21b      	sxth	r3, r3
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000130 	.word	0x20000130

08001358 <getPower_raw>:
/*!
 @brief  Gets the raw power value (16-bit signed integer, so +-32767)
 @return raw power reading
 */
/**************************************************************************/
int16_t getPower_raw() {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0

    // Sometimes a sharp load will reset the INA219, which will
    // reset the cal register, meaning CURRENT and POWER will
    // not be available ... avoid this by always setting a cal
    // value even if it's an unfortunate extra step
    wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <getPower_raw+0x2c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	b29b      	uxth	r3, r3
 8001364:	4619      	mov	r1, r3
 8001366:	2005      	movs	r0, #5
 8001368:	f7ff ff4a 	bl	8001200 <wireWriteRegister>

    // Now we can safely read the POWER register!
    wireReadRegister(INA219_REG_POWER, &value);
 800136c:	1dbb      	adds	r3, r7, #6
 800136e:	4619      	mov	r1, r3
 8001370:	2003      	movs	r0, #3
 8001372:	f7ff ff73 	bl	800125c <wireReadRegister>

    return (int16_t) value;
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	b21b      	sxth	r3, r3
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000130 	.word	0x20000130

08001388 <getBusVoltage_V>:
/*!
 @brief  Gets the shunt voltage in volts
 @return the bus voltage converted to volts
 */
/**************************************************************************/
float getBusVoltage_V() {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
    int16_t value = getBusVoltage_raw();
 800138e:	f7ff ffb9 	bl	8001304 <getBusVoltage_raw>
 8001392:	4603      	mov	r3, r0
 8001394:	80fb      	strh	r3, [r7, #6]
    return value * 0.001;
 8001396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f9ec 	bl	8000778 <__aeabi_i2d>
 80013a0:	a309      	add	r3, pc, #36	; (adr r3, 80013c8 <getBusVoltage_V+0x40>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	f7fe ff6b 	bl	8000280 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fa4b 	bl	800084c <__aeabi_d2f>
 80013b6:	4603      	mov	r3, r0
 80013b8:	ee07 3a90 	vmov	s15, r3
}
 80013bc:	eeb0 0a67 	vmov.f32	s0, s15
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80013cc:	3f50624d 	.word	0x3f50624d

080013d0 <getCurrent_mA>:
 @brief  Gets the current value in mA, taking into account the
 config settings and current LSB
 @return the current reading convereted to milliamps
 */
/**************************************************************************/
float getCurrent_mA() {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
    float valueDec = getCurrent_raw();
 80013d6:	f7ff ffa7 	bl	8001328 <getCurrent_raw>
 80013da:	4603      	mov	r3, r0
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e4:	edc7 7a01 	vstr	s15, [r7, #4]
    valueDec /= ina219_currentDivider_mA;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <getCurrent_mA+0x40>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013f4:	edd7 6a01 	vldr	s13, [r7, #4]
 80013f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fc:	edc7 7a01 	vstr	s15, [r7, #4]
    return valueDec;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	ee07 3a90 	vmov	s15, r3
}
 8001406:	eeb0 0a67 	vmov.f32	s0, s15
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000128 	.word	0x20000128

08001414 <getPower_mW>:
 @brief  Gets the power value in mW, taking into account the
 config settings and current LSB
 @return power reading converted to milliwatts
 */
/**************************************************************************/
float getPower_mW() {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
    float valueDec = getPower_raw();
 800141a:	f7ff ff9d 	bl	8001358 <getPower_raw>
 800141e:	4603      	mov	r3, r0
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001428:	edc7 7a01 	vstr	s15, [r7, #4]
    valueDec *= ina219_powerMultiplier_mW;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <getPower_mW+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001438:	ed97 7a01 	vldr	s14, [r7, #4]
 800143c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001440:	edc7 7a01 	vstr	s15, [r7, #4]
    return valueDec;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	ee07 3a90 	vmov	s15, r3
}
 800144a:	eeb0 0a67 	vmov.f32	s0, s15
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000012c 	.word	0x2000012c

08001458 <reset_graph_bounds>:

const graph_t graphs[GRAPHS_N] = {milliVoltage, milliAmperage, milliWattage};

int curr_graph = 0;

void reset_graph_bounds(){
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
    graph_upper_bound = graphs[curr_graph].upper_bound;
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <reset_graph_bounds+0x34>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <reset_graph_bounds+0x38>)
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	4413      	add	r3, r2
 8001466:	330c      	adds	r3, #12
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <reset_graph_bounds+0x3c>)
 800146c:	6013      	str	r3, [r2, #0]
    graph_lower_bound = graphs[curr_graph].lower_bound;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <reset_graph_bounds+0x34>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a07      	ldr	r2, [pc, #28]	; (8001490 <reset_graph_bounds+0x38>)
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	4413      	add	r3, r2
 8001478:	3308      	adds	r3, #8
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <reset_graph_bounds+0x40>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	2000028c 	.word	0x2000028c
 8001490:	08007b04 	.word	0x08007b04
 8001494:	20000014 	.word	0x20000014
 8001498:	20000288 	.word	0x20000288

0800149c <get_encoder_rotation>:

int get_encoder_rotation(){
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
    unsigned int tim3_cnt = TIM3->CNT;
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <get_encoder_rotation+0x48>)
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	603b      	str	r3, [r7, #0]
    int diff;
    if (tim3_cnt > tim3_prev_cnt)
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <get_encoder_rotation+0x4c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d902      	bls.n	80014b8 <get_encoder_rotation+0x1c>
        diff = 1;
 80014b2:	2301      	movs	r3, #1
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	e00a      	b.n	80014ce <get_encoder_rotation+0x32>
    else if (tim3_cnt == tim3_prev_cnt)
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <get_encoder_rotation+0x4c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d102      	bne.n	80014c8 <get_encoder_rotation+0x2c>
        diff = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	e002      	b.n	80014ce <get_encoder_rotation+0x32>
    else
        diff = -1;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
 80014cc:	607b      	str	r3, [r7, #4]
    tim3_prev_cnt = tim3_cnt;
 80014ce:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <get_encoder_rotation+0x4c>)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	6013      	str	r3, [r2, #0]
    return diff;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40000400 	.word	0x40000400
 80014e8:	2000027c 	.word	0x2000027c

080014ec <electrical_load>:

void electrical_load(){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0

    int diff = get_encoder_rotation();
 80014f2:	f7ff ffd3 	bl	800149c <get_encoder_rotation>
 80014f6:	6078      	str	r0, [r7, #4]

//    diff <<= 8;
    diff = diff * 25;
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	009a      	lsls	r2, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	607b      	str	r3, [r7, #4]

    if (!active_load){
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <electrical_load+0x9c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d105      	bne.n	800151a <electrical_load+0x2e>
        amperage_load = 0;
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <electrical_load+0xa0>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
        active_load = 1;
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <electrical_load+0x9c>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]
    }

    if(amperage_load + diff < 0){
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <electrical_load+0xa0>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	2b00      	cmp	r3, #0
 8001524:	da04      	bge.n	8001530 <electrical_load+0x44>
        amperage_load = 0;
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <electrical_load+0xa0>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
        diff = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
    }

    if(amperage_load + diff >= MAX_ALLOWED_LOAD){
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <electrical_load+0xa0>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800153c:	db05      	blt.n	800154a <electrical_load+0x5e>
        amperage_load = MAX_ALLOWED_LOAD;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <electrical_load+0xa0>)
 8001540:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001544:	601a      	str	r2, [r3, #0]
        diff = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
    }

    amperage_load += diff;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <electrical_load+0xa0>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <electrical_load+0xa0>)
 8001554:	6013      	str	r3, [r2, #0]
    qc_t qc_state = GetStateQC();
 8001556:	f000 fd77 	bl	8002048 <GetStateQC>
 800155a:	4603      	mov	r3, r0
 800155c:	70fb      	strb	r3, [r7, #3]
    if (qc_state != QC_OFF && qc_state != QC_5V && qc_state != QC_9V){
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <electrical_load+0x8a>
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d005      	beq.n	8001576 <electrical_load+0x8a>
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d002      	beq.n	8001576 <electrical_load+0x8a>
        amperage_load = 0;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <electrical_load+0xa0>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
    // 10000 - 1470 mA

    // !!!!!!! ATTENTION !!!!!!!!
    // find values for QC, using these values will cause damage to the device
    // !!!!!!! ATTENTION !!!!!!!!
    TIM2->CCR1 = amperage_load;
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <electrical_load+0xa0>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800157e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000284 	.word	0x20000284
 800158c:	20000280 	.word	0x20000280

08001590 <read_circut_parameters>:

void read_circut_parameters(){
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
    adrs_219 = 0x40;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <read_circut_parameters+0x74>)
 8001596:	2240      	movs	r2, #64	; 0x40
 8001598:	601a      	str	r2, [r3, #0]
    ina_curr = getCurrent_mA();
 800159a:	f7ff ff19 	bl	80013d0 <getCurrent_mA>
 800159e:	eef0 7a40 	vmov.f32	s15, s0
 80015a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a6:	ee17 2a90 	vmov	r2, s15
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <read_circut_parameters+0x78>)
 80015ac:	601a      	str	r2, [r3, #0]
    ina_vol = getBusVoltage_V() * 1000;
 80015ae:	f7ff feeb 	bl	8001388 <getBusVoltage_V>
 80015b2:	eef0 7a40 	vmov.f32	s15, s0
 80015b6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800160c <read_circut_parameters+0x7c>
 80015ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c2:	ee17 2a90 	vmov	r2, s15
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <read_circut_parameters+0x80>)
 80015c8:	601a      	str	r2, [r3, #0]
    ina_vol_float = getBusVoltage_V();
 80015ca:	f7ff fedd 	bl	8001388 <getBusVoltage_V>
 80015ce:	eef0 7a40 	vmov.f32	s15, s0
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <read_circut_parameters+0x84>)
 80015d4:	edc3 7a00 	vstr	s15, [r3]
    ina_pwr = getPower_mW();
 80015d8:	f7ff ff1c 	bl	8001414 <getPower_mW>
 80015dc:	eef0 7a40 	vmov.f32	s15, s0
 80015e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e4:	ee17 2a90 	vmov	r2, s15
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <read_circut_parameters+0x88>)
 80015ea:	601a      	str	r2, [r3, #0]

    ina_curr /= 2; // FIXME: calibrate ina219 correctly
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <read_circut_parameters+0x78>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	085b      	lsrs	r3, r3, #1
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <read_circut_parameters+0x78>)
 80015f4:	6013      	str	r3, [r2, #0]
    ina_pwr /= 2;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <read_circut_parameters+0x88>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	085b      	lsrs	r3, r3, #1
 80015fc:	4a06      	ldr	r2, [pc, #24]	; (8001618 <read_circut_parameters+0x88>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000008 	.word	0x20000008
 8001608:	2000026c 	.word	0x2000026c
 800160c:	447a0000 	.word	0x447a0000
 8001610:	20000270 	.word	0x20000270
 8001614:	20000274 	.word	0x20000274
 8001618:	20000278 	.word	0x20000278

0800161c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */

    if(htim == &htim1){
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a06      	ldr	r2, [pc, #24]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d105      	bne.n	8001638 <HAL_TIM_PeriodElapsedCallback+0x1c>
        //HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
        can_be_pressed = 1;
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]
        HAL_TIM_Base_Stop_IT(&htim1);
 8001632:	4803      	ldr	r0, [pc, #12]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001634:	f004 f8f2 	bl	800581c <HAL_TIM_Base_Stop_IT>
    }
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000188 	.word	0x20000188
 8001644:	20000010 	.word	0x20000010

08001648 <on_button_clicked>:

void on_button_clicked(){
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
    switch (state){
 800164e:	4b76      	ldr	r3, [pc, #472]	; (8001828 <on_button_clicked+0x1e0>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b04      	cmp	r3, #4
 8001656:	f200 80e2 	bhi.w	800181e <on_button_clicked+0x1d6>
 800165a:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <on_button_clicked+0x18>)
 800165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001660:	08001675 	.word	0x08001675
 8001664:	080016a7 	.word	0x080016a7
 8001668:	08001733 	.word	0x08001733
 800166c:	08001753 	.word	0x08001753
 8001670:	08001779 	.word	0x08001779
        case MAIN_MENU:
            state=move+1;
 8001674:	4b6d      	ldr	r3, [pc, #436]	; (800182c <on_button_clicked+0x1e4>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	3301      	adds	r3, #1
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b69      	ldr	r3, [pc, #420]	; (8001828 <on_button_clicked+0x1e0>)
 8001682:	701a      	strb	r2, [r3, #0]
            draw_fill(0);
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff fab9 	bl	8000bfc <draw_fill>
            move=0;
 800168a:	4b68      	ldr	r3, [pc, #416]	; (800182c <on_button_clicked+0x1e4>)
 800168c:	2200      	movs	r2, #0
 800168e:	801a      	strh	r2, [r3, #0]
			if(move == QC)
 8001690:	4b66      	ldr	r3, [pc, #408]	; (800182c <on_button_clicked+0x1e4>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	b29b      	uxth	r3, r3
 8001696:	2b01      	cmp	r3, #1
 8001698:	f040 80ba 	bne.w	8001810 <on_button_clicked+0x1c8>
			{
				TIM2->CCR1 = 0;
 800169c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a0:	2200      	movs	r2, #0
 80016a2:	635a      	str	r2, [r3, #52]	; 0x34
			}
            break;
 80016a4:	e0b4      	b.n	8001810 <on_button_clicked+0x1c8>

        case QC:
			
            switch (move){
 80016a6:	4b61      	ldr	r3, [pc, #388]	; (800182c <on_button_clicked+0x1e4>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	f200 80b1 	bhi.w	8001814 <on_button_clicked+0x1cc>
 80016b2:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <on_button_clicked+0x70>)
 80016b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b8:	080016d1 	.word	0x080016d1
 80016bc:	080016e3 	.word	0x080016e3
 80016c0:	080016e9 	.word	0x080016e9
 80016c4:	080016ef 	.word	0x080016ef
 80016c8:	080016f5 	.word	0x080016f5
 80016cc:	080016fb 	.word	0x080016fb
                case EXIT_TO_MAIN_MENU:
                    state=MAIN_MENU;
 80016d0:	4b55      	ldr	r3, [pc, #340]	; (8001828 <on_button_clicked+0x1e0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
                    draw_clear();
 80016d6:	f7ff fa9e 	bl	8000c16 <draw_clear>
                    move=0;
 80016da:	4b54      	ldr	r3, [pc, #336]	; (800182c <on_button_clicked+0x1e4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	801a      	strh	r2, [r3, #0]
                    break;
 80016e0:	e026      	b.n	8001730 <on_button_clicked+0xe8>

                case SET_5V:
                    Set_5V();
 80016e2:	f000 fd49 	bl	8002178 <Set_5V>
                    break;
 80016e6:	e023      	b.n	8001730 <on_button_clicked+0xe8>

                case SET_9V:
                    Set_9V();
 80016e8:	f000 fd54 	bl	8002194 <Set_9V>
                    break;
 80016ec:	e020      	b.n	8001730 <on_button_clicked+0xe8>

                case SET_12V:
                    Set_12V();
 80016ee:	f000 fd5f 	bl	80021b0 <Set_12V>
                    break;
 80016f2:	e01d      	b.n	8001730 <on_button_clicked+0xe8>

                case SET_20V:
                    Set_20V();
 80016f4:	f000 fd6a 	bl	80021cc <Set_20V>
                    break;
 80016f8:	e01a      	b.n	8001730 <on_button_clicked+0xe8>

                case CONTINUOUS_MODE:
                    //ContinuousMode();
                	DM_33V();
 80016fa:	f000 fd11 	bl	8002120 <DM_33V>
                		HAL_Delay(3);
 80016fe:	2003      	movs	r0, #3
 8001700:	f001 fe0a 	bl	8003318 <HAL_Delay>
                		DP_06V();
 8001704:	f000 fcac 	bl	8002060 <DP_06V>
                		HAL_Delay(60);
 8001708:	203c      	movs	r0, #60	; 0x3c
 800170a:	f001 fe05 	bl	8003318 <HAL_Delay>
                    for(int i = 0; i < 10; ++i){
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	e009      	b.n	8001728 <on_button_clicked+0xe0>
                    	draw_clear();
 8001714:	f7ff fa7f 	bl	8000c16 <draw_clear>
                        IncVoltage();
 8001718:	f000 fd66 	bl	80021e8 <IncVoltage>
                        HAL_Delay(50);
 800171c:	2032      	movs	r0, #50	; 0x32
 800171e:	f001 fdfb 	bl	8003318 <HAL_Delay>
                    for(int i = 0; i < 10; ++i){
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3301      	adds	r3, #1
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b09      	cmp	r3, #9
 800172c:	ddf2      	ble.n	8001714 <on_button_clicked+0xcc>
					//HAL_Delay(2500);
//					for(int i = 0; i < 25; ++i){
//                        DecVoltage();
//                        HAL_Delay(350);
//                    }
                    break;
 800172e:	bf00      	nop

            }
            break;
 8001730:	e070      	b.n	8001814 <on_button_clicked+0x1cc>

        case POWER:
            switch (move){
 8001732:	4b3e      	ldr	r3, [pc, #248]	; (800182c <on_button_clicked+0x1e4>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d16d      	bne.n	8001818 <on_button_clicked+0x1d0>
                case EXIT_TO_MAIN_MENU:
                    state=MAIN_MENU;
 800173c:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <on_button_clicked+0x1e0>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
                    draw_fill (0);
 8001742:	2000      	movs	r0, #0
 8001744:	f7ff fa5a 	bl	8000bfc <draw_fill>
                    move=0;
 8001748:	4b38      	ldr	r3, [pc, #224]	; (800182c <on_button_clicked+0x1e4>)
 800174a:	2200      	movs	r2, #0
 800174c:	801a      	strh	r2, [r3, #0]
                    break;
 800174e:	bf00      	nop
            }
            break;
 8001750:	e062      	b.n	8001818 <on_button_clicked+0x1d0>

        case CURRENT_CONTROL:
            switch (move){
 8001752:	4b36      	ldr	r3, [pc, #216]	; (800182c <on_button_clicked+0x1e4>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d15f      	bne.n	800181c <on_button_clicked+0x1d4>
                case EXIT_TO_MAIN_MENU:
                    state=MAIN_MENU;
 800175c:	4b32      	ldr	r3, [pc, #200]	; (8001828 <on_button_clicked+0x1e0>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
                    draw_fill (0);
 8001762:	2000      	movs	r0, #0
 8001764:	f7ff fa4a 	bl	8000bfc <draw_fill>
                    move=0;
 8001768:	4b30      	ldr	r3, [pc, #192]	; (800182c <on_button_clicked+0x1e4>)
 800176a:	2200      	movs	r2, #0
 800176c:	801a      	strh	r2, [r3, #0]
                    active_load=0;
 800176e:	4b30      	ldr	r3, [pc, #192]	; (8001830 <on_button_clicked+0x1e8>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
                    break;
 8001774:	bf00      	nop
            }
            break;
 8001776:	e051      	b.n	800181c <on_button_clicked+0x1d4>

        case GRAPHS:
            if(graph_toggle_state == GRAPH_TOGGLE_NONE){
 8001778:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <on_button_clicked+0x1ec>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d13a      	bne.n	80017f8 <on_button_clicked+0x1b0>
                if (move == EXIT_TO_MAIN_MENU){
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <on_button_clicked+0x1e4>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10c      	bne.n	80017a6 <on_button_clicked+0x15e>
                    state=move;
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <on_button_clicked+0x1e4>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	b29b      	uxth	r3, r3
 8001792:	b2da      	uxtb	r2, r3
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <on_button_clicked+0x1e0>)
 8001796:	701a      	strb	r2, [r3, #0]
                    draw_fill (0);
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff fa2f 	bl	8000bfc <draw_fill>
                    move=0;
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <on_button_clicked+0x1e4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	801a      	strh	r2, [r3, #0]
                    break;
 80017a4:	e03b      	b.n	800181e <on_button_clicked+0x1d6>
                }

                draw_graph_menu_clear_selection();
 80017a6:	f7ff fd11 	bl	80011cc <draw_graph_menu_clear_selection>

                switch(move){
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <on_button_clicked+0x1e4>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	3b01      	subs	r3, #1
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d819      	bhi.n	80017ea <on_button_clicked+0x1a2>
 80017b6:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <on_button_clicked+0x174>)
 80017b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017bc:	080017cd 	.word	0x080017cd
 80017c0:	080017d3 	.word	0x080017d3
 80017c4:	080017d9 	.word	0x080017d9
 80017c8:	080017e5 	.word	0x080017e5
                    case GRAPH_TOGGLE_UPPER_BOUND:
                        draw_graph_menu_upper_bound_selected();
 80017cc:	f7ff fc5a 	bl	8001084 <draw_graph_menu_upper_bound_selected>
                        break;
 80017d0:	e00b      	b.n	80017ea <on_button_clicked+0x1a2>
                    case GRAPH_TOGGLE_LOWER_BOUND:
                        draw_graph_menu_lower_bound_selected();
 80017d2:	f7ff fc75 	bl	80010c0 <draw_graph_menu_lower_bound_selected>
                        break;
 80017d6:	e008      	b.n	80017ea <on_button_clicked+0x1a2>
                    case GRAPH_TOGGLE_RESET:
                        reset_graph_bounds();
 80017d8:	f7ff fe3e 	bl	8001458 <reset_graph_bounds>
                        move=0;
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <on_button_clicked+0x1e4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	801a      	strh	r2, [r3, #0]
                        break;
 80017e2:	e002      	b.n	80017ea <on_button_clicked+0x1a2>
                    case GRAPH_TOGGLE_DATA:
                        reset_graph_bounds();
 80017e4:	f7ff fe38 	bl	8001458 <reset_graph_bounds>
                        break;
 80017e8:	bf00      	nop
                }

                graph_toggle_state = move;
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <on_button_clicked+0x1e4>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <on_button_clicked+0x1ec>)
 80017f4:	701a      	strb	r2, [r3, #0]
                draw_graph_menu_upper_bound_deselect();
                draw_graph_menu_lower_bound_deselect();
                draw_graph_menu_upper_bound_button();
                draw_graph_menu_lower_bound_button();
            }
            break;
 80017f6:	e012      	b.n	800181e <on_button_clicked+0x1d6>
                graph_toggle_state = GRAPH_TOGGLE_NONE;
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <on_button_clicked+0x1ec>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
                draw_graph_menu_upper_bound_deselect();
 80017fe:	f7ff fc4b 	bl	8001098 <draw_graph_menu_upper_bound_deselect>
                draw_graph_menu_lower_bound_deselect();
 8001802:	f7ff fc67 	bl	80010d4 <draw_graph_menu_lower_bound_deselect>
                draw_graph_menu_upper_bound_button();
 8001806:	f7ff fc29 	bl	800105c <draw_graph_menu_upper_bound_button>
                draw_graph_menu_lower_bound_button();
 800180a:	f7ff fc31 	bl	8001070 <draw_graph_menu_lower_bound_button>
            break;
 800180e:	e006      	b.n	800181e <on_button_clicked+0x1d6>
            break;
 8001810:	bf00      	nop
 8001812:	e004      	b.n	800181e <on_button_clicked+0x1d6>
            break;
 8001814:	bf00      	nop
 8001816:	e002      	b.n	800181e <on_button_clicked+0x1d6>
            break;
 8001818:	bf00      	nop
 800181a:	e000      	b.n	800181e <on_button_clicked+0x1d6>
            break;
 800181c:	bf00      	nop
    }
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000264 	.word	0x20000264
 800182c:	20000260 	.word	0x20000260
 8001830:	20000284 	.word	0x20000284
 8001834:	20000265 	.word	0x20000265

08001838 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin==KEY_Pin) {
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	2b04      	cmp	r3, #4
 8001846:	d118      	bne.n	800187a <HAL_GPIO_EXTI_Callback+0x42>
        if (can_be_pressed) {
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_GPIO_EXTI_Callback+0x4c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d014      	beq.n	800187a <HAL_GPIO_EXTI_Callback+0x42>
            can_be_pressed = 0;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
            btn_state = !btn_state;
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_GPIO_EXTI_Callback+0x50>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf0c      	ite	eq
 800185e:	2301      	moveq	r3, #1
 8001860:	2300      	movne	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_GPIO_EXTI_Callback+0x50>)
 8001868:	601a      	str	r2, [r3, #0]
            is_drawn = 0;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_GPIO_EXTI_Callback+0x54>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

            on_button_clicked();
 8001870:	f7ff feea 	bl	8001648 <on_button_clicked>

            HAL_TIM_Base_Start_IT(&htim1);
 8001874:	4806      	ldr	r0, [pc, #24]	; (8001890 <HAL_GPIO_EXTI_Callback+0x58>)
 8001876:	f003 ff6f 	bl	8005758 <HAL_TIM_Base_Start_IT>
        }
    }

}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000010 	.word	0x20000010
 8001888:	2000000c 	.word	0x2000000c
 800188c:	20000268 	.word	0x20000268
 8001890:	20000188 	.word	0x20000188

08001894 <setup>:

void setup(){
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001898:	213c      	movs	r1, #60	; 0x3c
 800189a:	480f      	ldr	r0, [pc, #60]	; (80018d8 <setup+0x44>)
 800189c:	f004 f99c 	bl	8005bd8 <HAL_TIM_Encoder_Start>
    draw_init();
 80018a0:	f7ff f9a6 	bl	8000bf0 <draw_init>
	Init_5V();
 80018a4:	f000 fc54 	bl	8002150 <Init_5V>
  	HAL_Delay(3);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f001 fd35 	bl	8003318 <HAL_Delay>
    HAL_Delay(500);
 80018ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b2:	f001 fd31 	bl	8003318 <HAL_Delay>
    draw_clear();
 80018b6:	f7ff f9ae 	bl	8000c16 <draw_clear>
    adrs_219 = 0x40;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <setup+0x48>)
 80018bc:	2240      	movs	r2, #64	; 0x40
 80018be:	601a      	str	r2, [r3, #0]
    setCalibration_32V_2A_custom();
 80018c0:	f7ff fcfa 	bl	80012b8 <setCalibration_32V_2A_custom>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80018c4:	2100      	movs	r1, #0
 80018c6:	4806      	ldr	r0, [pc, #24]	; (80018e0 <setup+0x4c>)
 80018c8:	f004 f830 	bl	800592c <HAL_TIM_PWM_Start>
	TIM2->CCR1 = 0;
 80018cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018d0:	2200      	movs	r2, #0
 80018d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000218 	.word	0x20000218
 80018dc:	20000008 	.word	0x20000008
 80018e0:	200001d0 	.word	0x200001d0

080018e4 <loop>:
        }
        device_available = 1;
    }
}

void loop(){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
    move_prev = move;
 80018ea:	4ba1      	ldr	r3, [pc, #644]	; (8001b70 <loop+0x28c>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4ba0      	ldr	r3, [pc, #640]	; (8001b74 <loop+0x290>)
 80018f2:	801a      	strh	r2, [r3, #0]

    //board_protection();

    switch(state){
 80018f4:	4ba0      	ldr	r3, [pc, #640]	; (8001b78 <loop+0x294>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	f200 8131 	bhi.w	8001b62 <loop+0x27e>
 8001900:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <loop+0x24>)
 8001902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001906:	bf00      	nop
 8001908:	0800191d 	.word	0x0800191d
 800190c:	08001951 	.word	0x08001951
 8001910:	080019b9 	.word	0x080019b9
 8001914:	08001a07 	.word	0x08001a07
 8001918:	08001a17 	.word	0x08001a17

        case MAIN_MENU:
            move = ((TIM3->CNT)>>2)%4;
 800191c:	4b97      	ldr	r3, [pc, #604]	; (8001b7c <loop+0x298>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	b29b      	uxth	r3, r3
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	b29a      	uxth	r2, r3
 800192a:	4b91      	ldr	r3, [pc, #580]	; (8001b70 <loop+0x28c>)
 800192c:	801a      	strh	r2, [r3, #0]
            if (!is_drawn) {
 800192e:	4b94      	ldr	r3, [pc, #592]	; (8001b80 <loop+0x29c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <loop+0x56>
                draw_main_menu();
 8001936:	f7ff f99f 	bl	8000c78 <draw_main_menu>
            }
            draw_main_menu_selection(move, move_prev);
 800193a:	4b8d      	ldr	r3, [pc, #564]	; (8001b70 <loop+0x28c>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4a8c      	ldr	r2, [pc, #560]	; (8001b74 <loop+0x290>)
 8001942:	8812      	ldrh	r2, [r2, #0]
 8001944:	b292      	uxth	r2, r2
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fa49 	bl	8000de0 <draw_main_menu_selection>
            break;
 800194e:	e108      	b.n	8001b62 <loop+0x27e>

        case QC:
            move = ((TIM3->CNT)>>2)%6;
 8001950:	4b8a      	ldr	r3, [pc, #552]	; (8001b7c <loop+0x298>)
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	0899      	lsrs	r1, r3, #2
 8001956:	4b8b      	ldr	r3, [pc, #556]	; (8001b84 <loop+0x2a0>)
 8001958:	fba3 2301 	umull	r2, r3, r3, r1
 800195c:	089a      	lsrs	r2, r3, #2
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	1aca      	subs	r2, r1, r3
 8001968:	b292      	uxth	r2, r2
 800196a:	4b81      	ldr	r3, [pc, #516]	; (8001b70 <loop+0x28c>)
 800196c:	801a      	strh	r2, [r3, #0]

            if (!is_drawn) {
 800196e:	4b84      	ldr	r3, [pc, #528]	; (8001b80 <loop+0x29c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d104      	bne.n	8001980 <loop+0x9c>
                draw_qc_menu();
 8001976:	f7ff f9bd 	bl	8000cf4 <draw_qc_menu>
                is_drawn=1;
 800197a:	4b81      	ldr	r3, [pc, #516]	; (8001b80 <loop+0x29c>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]
            }
          
		  	if(move_prev != EXIT_TO_MAIN_MENU){
 8001980:	4b7c      	ldr	r3, [pc, #496]	; (8001b74 <loop+0x290>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	b29b      	uxth	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <loop+0xb2>
				draw_qc_menu_deselect(move_prev);
 800198a:	4b7a      	ldr	r3, [pc, #488]	; (8001b74 <loop+0x290>)
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff f9f7 	bl	8000d84 <draw_qc_menu_deselect>
			}
			if (move == EXIT_TO_MAIN_MENU){
 8001996:	4b76      	ldr	r3, [pc, #472]	; (8001b70 <loop+0x28c>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <loop+0xc2>
				draw_exit_focus();
 80019a0:	f7ff f95b 	bl	8000c5a <draw_exit_focus>
            else{
				draw_qc_menu_focus(move);
				draw_exit_button();
			}
			
            break;
 80019a4:	e0dd      	b.n	8001b62 <loop+0x27e>
				draw_qc_menu_focus(move);
 80019a6:	4b72      	ldr	r3, [pc, #456]	; (8001b70 <loop+0x28c>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fa00 	bl	8000db2 <draw_qc_menu_focus>
				draw_exit_button();
 80019b2:	f7ff f93c 	bl	8000c2e <draw_exit_button>
            break;
 80019b6:	e0d4      	b.n	8001b62 <loop+0x27e>

        case POWER:
            move = ((TIM3->CNT)>>2)%1;
 80019b8:	4b70      	ldr	r3, [pc, #448]	; (8001b7c <loop+0x298>)
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	4b6c      	ldr	r3, [pc, #432]	; (8001b70 <loop+0x28c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	801a      	strh	r2, [r3, #0]
            if (!is_drawn) {
 80019c2:	4b6f      	ldr	r3, [pc, #444]	; (8001b80 <loop+0x29c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d103      	bne.n	80019d2 <loop+0xee>
                is_drawn=1;
 80019ca:	4b6d      	ldr	r3, [pc, #436]	; (8001b80 <loop+0x29c>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e003      	b.n	80019da <loop+0xf6>
            }else{
                HAL_Delay(500);
 80019d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019d6:	f001 fc9f 	bl	8003318 <HAL_Delay>
            }
            read_circut_parameters();
 80019da:	f7ff fdd9 	bl	8001590 <read_circut_parameters>
            draw_power_menu(ina_vol, ina_curr, ina_pwr);
 80019de:	4b6a      	ldr	r3, [pc, #424]	; (8001b88 <loop+0x2a4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a6a      	ldr	r2, [pc, #424]	; (8001b8c <loop+0x2a8>)
 80019e4:	6811      	ldr	r1, [r2, #0]
 80019e6:	4a6a      	ldr	r2, [pc, #424]	; (8001b90 <loop+0x2ac>)
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fa20 	bl	8000e30 <draw_power_menu>
			if(move == EXIT_TO_MAIN_MENU){
 80019f0:	4b5f      	ldr	r3, [pc, #380]	; (8001b70 <loop+0x28c>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <loop+0x11c>
				draw_exit_focus();
 80019fa:	f7ff f92e 	bl	8000c5a <draw_exit_focus>
			}
            else{
				draw_exit_button();
			}
            break;
 80019fe:	e0b0      	b.n	8001b62 <loop+0x27e>
				draw_exit_button();
 8001a00:	f7ff f915 	bl	8000c2e <draw_exit_button>
            break;
 8001a04:	e0ad      	b.n	8001b62 <loop+0x27e>

        case CURRENT_CONTROL:
            electrical_load();
 8001a06:	f7ff fd71 	bl	80014ec <electrical_load>
            draw_current_control_menu(amperage_load);
 8001a0a:	4b62      	ldr	r3, [pc, #392]	; (8001b94 <loop+0x2b0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fa62 	bl	8000ed8 <draw_current_control_menu>
            break;
 8001a14:	e0a5      	b.n	8001b62 <loop+0x27e>

        case GRAPHS:
            move = ((TIM3->CNT)>>2)%5;
 8001a16:	4b59      	ldr	r3, [pc, #356]	; (8001b7c <loop+0x298>)
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	0899      	lsrs	r1, r3, #2
 8001a1c:	4b5e      	ldr	r3, [pc, #376]	; (8001b98 <loop+0x2b4>)
 8001a1e:	fba3 2301 	umull	r2, r3, r3, r1
 8001a22:	089a      	lsrs	r2, r3, #2
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	1aca      	subs	r2, r1, r3
 8001a2c:	b292      	uxth	r2, r2
 8001a2e:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <loop+0x28c>)
 8001a30:	801a      	strh	r2, [r3, #0]
            read_circut_parameters();
 8001a32:	f7ff fdad 	bl	8001590 <read_circut_parameters>
            draw_graph_builder_menu(graph_lower_bound, graph_upper_bound, graphs, curr_graph);
 8001a36:	4b59      	ldr	r3, [pc, #356]	; (8001b9c <loop+0x2b8>)
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	4b59      	ldr	r3, [pc, #356]	; (8001ba0 <loop+0x2bc>)
 8001a3c:	6819      	ldr	r1, [r3, #0]
 8001a3e:	4b59      	ldr	r3, [pc, #356]	; (8001ba4 <loop+0x2c0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a59      	ldr	r2, [pc, #356]	; (8001ba8 <loop+0x2c4>)
 8001a44:	f7ff face 	bl	8000fe4 <draw_graph_builder_menu>
            HAL_Delay(50);
 8001a48:	2032      	movs	r0, #50	; 0x32
 8001a4a:	f001 fc65 	bl	8003318 <HAL_Delay>
            int delta = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	603b      	str	r3, [r7, #0]
            switch (graph_toggle_state){
 8001a52:	4b56      	ldr	r3, [pc, #344]	; (8001bac <loop+0x2c8>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	f200 8081 	bhi.w	8001b60 <loop+0x27c>
 8001a5e:	a201      	add	r2, pc, #4	; (adr r2, 8001a64 <loop+0x180>)
 8001a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a64:	08001a79 	.word	0x08001a79
 8001a68:	08001ac5 	.word	0x08001ac5
 8001a6c:	08001af3 	.word	0x08001af3
 8001a70:	08001b53 	.word	0x08001b53
 8001a74:	08001b21 	.word	0x08001b21
                case GRAPH_TOGGLE_NONE:

                    draw_graph_menu_clear_selection();
 8001a78:	f7ff fba8 	bl	80011cc <draw_graph_menu_clear_selection>

                    draw_graph_menu_exit_button();
 8001a7c:	f7ff fb8a 	bl	8001194 <draw_graph_menu_exit_button>

                    switch(move){
 8001a80:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <loop+0x28c>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d865      	bhi.n	8001b56 <loop+0x272>
 8001a8a:	a201      	add	r2, pc, #4	; (adr r2, 8001a90 <loop+0x1ac>)
 8001a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a90:	08001aa5 	.word	0x08001aa5
 8001a94:	08001aab 	.word	0x08001aab
 8001a98:	08001ab1 	.word	0x08001ab1
 8001a9c:	08001ab7 	.word	0x08001ab7
 8001aa0:	08001abd 	.word	0x08001abd
                        case EXIT_TO_MAIN_MENU:
                            draw_graph_menu_exit_focus();
 8001aa4:	f7ff fb84 	bl	80011b0 <draw_graph_menu_exit_focus>
                            break;
 8001aa8:	e00b      	b.n	8001ac2 <loop+0x1de>
                        case GRAPH_TOGGLE_UPPER_BOUND:
                            draw_graph_menu_upper_bound_focus();
 8001aaa:	f7ff faff 	bl	80010ac <draw_graph_menu_upper_bound_focus>
                            break;
 8001aae:	e008      	b.n	8001ac2 <loop+0x1de>
                        case GRAPH_TOGGLE_LOWER_BOUND:
                            draw_graph_menu_lower_bound_focus();
 8001ab0:	f7ff fb1a 	bl	80010e8 <draw_graph_menu_lower_bound_focus>
                            break;
 8001ab4:	e005      	b.n	8001ac2 <loop+0x1de>
                        case GRAPH_TOGGLE_RESET:
                            draw_graph_menu_reset_focus();
 8001ab6:	f7ff fb39 	bl	800112c <draw_graph_menu_reset_focus>
                            break;
 8001aba:	e002      	b.n	8001ac2 <loop+0x1de>
                        case GRAPH_TOGGLE_DATA:
                            draw_graph_menu_data_focus();
 8001abc:	f7ff fb4e 	bl	800115c <draw_graph_menu_data_focus>
                            break;
 8001ac0:	bf00      	nop
                    }
                    break;
 8001ac2:	e048      	b.n	8001b56 <loop+0x272>
                case GRAPH_TOGGLE_UPPER_BOUND:
                    delta = get_encoder_rotation() << 8;
 8001ac4:	f7ff fcea 	bl	800149c <get_encoder_rotation>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	603b      	str	r3, [r7, #0]
                    graph_upper_bound += delta;
 8001ace:	4b34      	ldr	r3, [pc, #208]	; (8001ba0 <loop+0x2bc>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a32      	ldr	r2, [pc, #200]	; (8001ba0 <loop+0x2bc>)
 8001ad8:	6013      	str	r3, [r2, #0]
                    if (graph_upper_bound <= graph_lower_bound){
 8001ada:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <loop+0x2bc>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <loop+0x2b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	dc39      	bgt.n	8001b5a <loop+0x276>
                        graph_upper_bound = graph_lower_bound + 1;
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <loop+0x2b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3301      	adds	r3, #1
 8001aec:	4a2c      	ldr	r2, [pc, #176]	; (8001ba0 <loop+0x2bc>)
 8001aee:	6013      	str	r3, [r2, #0]
                    }
                    break;
 8001af0:	e033      	b.n	8001b5a <loop+0x276>
                case GRAPH_TOGGLE_LOWER_BOUND:
                    delta = get_encoder_rotation() << 8;
 8001af2:	f7ff fcd3 	bl	800149c <get_encoder_rotation>
 8001af6:	4603      	mov	r3, r0
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	603b      	str	r3, [r7, #0]
                    graph_lower_bound += delta;
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <loop+0x2b8>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	4a25      	ldr	r2, [pc, #148]	; (8001b9c <loop+0x2b8>)
 8001b06:	6013      	str	r3, [r2, #0]
                    if (graph_upper_bound <= graph_lower_bound){
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <loop+0x2bc>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <loop+0x2b8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dc24      	bgt.n	8001b5e <loop+0x27a>
                        graph_lower_bound = graph_upper_bound - 1;
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <loop+0x2bc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	4a20      	ldr	r2, [pc, #128]	; (8001b9c <loop+0x2b8>)
 8001b1c:	6013      	str	r3, [r2, #0]
                    }
                    break;
 8001b1e:	e01e      	b.n	8001b5e <loop+0x27a>
                case GRAPH_TOGGLE_DATA:
                    delta = get_encoder_rotation();
 8001b20:	f7ff fcbc 	bl	800149c <get_encoder_rotation>
 8001b24:	6038      	str	r0, [r7, #0]
                    int g = curr_graph + delta;
 8001b26:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <loop+0x2c0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	607b      	str	r3, [r7, #4]
                    if (g < 0)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	da02      	bge.n	8001b3c <loop+0x258>
                        g = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	e004      	b.n	8001b46 <loop+0x262>
                    else if (g >= GRAPHS_N)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	dd01      	ble.n	8001b46 <loop+0x262>
                        g = GRAPHS_N - 1;
 8001b42:	2302      	movs	r3, #2
 8001b44:	607b      	str	r3, [r7, #4]
                    curr_graph = g;
 8001b46:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <loop+0x2c0>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6013      	str	r3, [r2, #0]
                    reset_graph_bounds();
 8001b4c:	f7ff fc84 	bl	8001458 <reset_graph_bounds>
                    break;
 8001b50:	e006      	b.n	8001b60 <loop+0x27c>
				case GRAPH_TOGGLE_RESET:
					break;
 8001b52:	bf00      	nop
 8001b54:	e004      	b.n	8001b60 <loop+0x27c>
                    break;
 8001b56:	bf00      	nop
 8001b58:	e002      	b.n	8001b60 <loop+0x27c>
                    break;
 8001b5a:	bf00      	nop
 8001b5c:	e000      	b.n	8001b60 <loop+0x27c>
                    break;
 8001b5e:	bf00      	nop
            }

            break;
 8001b60:	bf00      	nop
    }

    draw_update_screen();
 8001b62:	f7ff f85e 	bl	8000c22 <draw_update_screen>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000260 	.word	0x20000260
 8001b74:	20000262 	.word	0x20000262
 8001b78:	20000264 	.word	0x20000264
 8001b7c:	40000400 	.word	0x40000400
 8001b80:	20000268 	.word	0x20000268
 8001b84:	aaaaaaab 	.word	0xaaaaaaab
 8001b88:	20000270 	.word	0x20000270
 8001b8c:	2000026c 	.word	0x2000026c
 8001b90:	20000278 	.word	0x20000278
 8001b94:	20000280 	.word	0x20000280
 8001b98:	cccccccd 	.word	0xcccccccd
 8001b9c:	20000288 	.word	0x20000288
 8001ba0:	20000014 	.word	0x20000014
 8001ba4:	2000028c 	.word	0x2000028c
 8001ba8:	08007b04 	.word	0x08007b04
 8001bac:	20000265 	.word	0x20000265

08001bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb4:	f001 fb3e 	bl	8003234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb8:	f000 f816 	bl	8001be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bbc:	f000 f9c6 	bl	8001f4c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bc0:	f000 f87c 	bl	8001cbc <MX_I2C1_Init>
  MX_TIM3_Init();
 8001bc4:	f000 f96e 	bl	8001ea4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001bc8:	f000 f8a6 	bl	8001d18 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001bcc:	f000 f8f4 	bl	8001db8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001bd0:	f7ff fe60 	bl	8001894 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8001bd4:	2008      	movs	r0, #8
 8001bd6:	f001 fcec 	bl	80035b2 <HAL_NVIC_DisableIRQ>
    loop();
 8001bda:	f7ff fe83 	bl	80018e4 <loop>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001bde:	2008      	movs	r0, #8
 8001be0:	f001 fcd9 	bl	8003596 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8001be4:	e7f6      	b.n	8001bd4 <main+0x24>
	...

08001be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b094      	sub	sp, #80	; 0x50
 8001bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bee:	f107 0320 	add.w	r3, r7, #32
 8001bf2:	2230      	movs	r2, #48	; 0x30
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f004 febc 	bl	8006974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <SystemClock_Config+0xcc>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	4a27      	ldr	r2, [pc, #156]	; (8001cb4 <SystemClock_Config+0xcc>)
 8001c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <SystemClock_Config+0xcc>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c28:	2300      	movs	r3, #0
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <SystemClock_Config+0xd0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c34:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <SystemClock_Config+0xd0>)
 8001c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <SystemClock_Config+0xd0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c52:	2302      	movs	r3, #2
 8001c54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c5c:	2319      	movs	r3, #25
 8001c5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001c60:	2390      	movs	r3, #144	; 0x90
 8001c62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c64:	2302      	movs	r3, #2
 8001c66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c68:	2304      	movs	r3, #4
 8001c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c6c:	f107 0320 	add.w	r3, r7, #32
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 f8dd 	bl	8004e30 <HAL_RCC_OscConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c7c:	f000 f9de 	bl	800203c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c80:	230f      	movs	r3, #15
 8001c82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c84:	2302      	movs	r3, #2
 8001c86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c96:	f107 030c 	add.w	r3, r7, #12
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f003 fb3f 	bl	8005320 <HAL_RCC_ClockConfig>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ca8:	f000 f9c8 	bl	800203c <Error_Handler>
  }
}
 8001cac:	bf00      	nop
 8001cae:	3750      	adds	r7, #80	; 0x50
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40007000 	.word	0x40007000

08001cbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cc2:	4a13      	ldr	r2, [pc, #76]	; (8001d10 <MX_I2C1_Init+0x54>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cc8:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <MX_I2C1_Init+0x58>)
 8001cca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cec:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cf8:	4804      	ldr	r0, [pc, #16]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cfa:	f001 fe2b 	bl	8003954 <HAL_I2C_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d04:	f000 f99a 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000134 	.word	0x20000134
 8001d10:	40005400 	.word	0x40005400
 8001d14:	00061a80 	.word	0x00061a80

08001d18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d36:	4a1f      	ldr	r2, [pc, #124]	; (8001db4 <MX_TIM1_Init+0x9c>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d3c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001d40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d4a:	22c8      	movs	r2, #200	; 0xc8
 8001d4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d60:	4813      	ldr	r0, [pc, #76]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d62:	f003 fca9 	bl	80056b8 <HAL_TIM_Base_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d6c:	f000 f966 	bl	800203c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d7e:	f004 f983 	bl	8006088 <HAL_TIM_ConfigClockSource>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d88:	f000 f958 	bl	800203c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d94:	463b      	mov	r3, r7
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d9a:	f004 fd31 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001da4:	f000 f94a 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000188 	.word	0x20000188
 8001db4:	40010000 	.word	0x40010000

08001db8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08e      	sub	sp, #56	; 0x38
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dcc:	f107 0320 	add.w	r3, r7, #32
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
 8001de4:	615a      	str	r2, [r3, #20]
 8001de6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001de8:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <MX_TIM2_Init+0xe8>)
 8001dea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <MX_TIM2_Init+0xe8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df6:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <MX_TIM2_Init+0xe8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <MX_TIM2_Init+0xe8>)
 8001dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e04:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <MX_TIM2_Init+0xe8>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0a:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <MX_TIM2_Init+0xe8>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e10:	4823      	ldr	r0, [pc, #140]	; (8001ea0 <MX_TIM2_Init+0xe8>)
 8001e12:	f003 fc51 	bl	80056b8 <HAL_TIM_Base_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e1c:	f000 f90e 	bl	800203c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	481c      	ldr	r0, [pc, #112]	; (8001ea0 <MX_TIM2_Init+0xe8>)
 8001e2e:	f004 f92b 	bl	8006088 <HAL_TIM_ConfigClockSource>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e38:	f000 f900 	bl	800203c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e3c:	4818      	ldr	r0, [pc, #96]	; (8001ea0 <MX_TIM2_Init+0xe8>)
 8001e3e:	f003 fd1c 	bl	800587a <HAL_TIM_PWM_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e48:	f000 f8f8 	bl	800203c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e54:	f107 0320 	add.w	r3, r7, #32
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4811      	ldr	r0, [pc, #68]	; (8001ea0 <MX_TIM2_Init+0xe8>)
 8001e5c:	f004 fcd0 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e66:	f000 f8e9 	bl	800203c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e6a:	2360      	movs	r3, #96	; 0x60
 8001e6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <MX_TIM2_Init+0xe8>)
 8001e82:	f004 f83f 	bl	8005f04 <HAL_TIM_PWM_ConfigChannel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001e8c:	f000 f8d6 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e90:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <MX_TIM2_Init+0xe8>)
 8001e92:	f001 f8e9 	bl	8003068 <HAL_TIM_MspPostInit>

}
 8001e96:	bf00      	nop
 8001e98:	3738      	adds	r7, #56	; 0x38
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200001d0 	.word	0x200001d0

08001ea4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	; 0x30
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	2224      	movs	r2, #36	; 0x24
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 fd5e 	bl	8006974 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <MX_TIM3_Init+0xa0>)
 8001ec2:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <MX_TIM3_Init+0xa4>)
 8001ec4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <MX_TIM3_Init+0xa0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <MX_TIM3_Init+0xa0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <MX_TIM3_Init+0xa0>)
 8001ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eda:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <MX_TIM3_Init+0xa0>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee0:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <MX_TIM3_Init+0xa0>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001efe:	2301      	movs	r3, #1
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001f06:	230a      	movs	r3, #10
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480c      	ldr	r0, [pc, #48]	; (8001f44 <MX_TIM3_Init+0xa0>)
 8001f12:	f003 fdbb 	bl	8005a8c <HAL_TIM_Encoder_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f1c:	f000 f88e 	bl	800203c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4805      	ldr	r0, [pc, #20]	; (8001f44 <MX_TIM3_Init+0xa0>)
 8001f2e:	f004 fc67 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001f38:	f000 f880 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f3c:	bf00      	nop
 8001f3e:	3730      	adds	r7, #48	; 0x30
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000218 	.word	0x20000218
 8001f48:	40000400 	.word	0x40000400

08001f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
 8001f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b32      	ldr	r3, [pc, #200]	; (8002030 <MX_GPIO_Init+0xe4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a31      	ldr	r2, [pc, #196]	; (8002030 <MX_GPIO_Init+0xe4>)
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b2f      	ldr	r3, [pc, #188]	; (8002030 <MX_GPIO_Init+0xe4>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <MX_GPIO_Init+0xe4>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a2a      	ldr	r2, [pc, #168]	; (8002030 <MX_GPIO_Init+0xe4>)
 8001f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b28      	ldr	r3, [pc, #160]	; (8002030 <MX_GPIO_Init+0xe4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <MX_GPIO_Init+0xe4>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a23      	ldr	r2, [pc, #140]	; (8002030 <MX_GPIO_Init+0xe4>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b21      	ldr	r3, [pc, #132]	; (8002030 <MX_GPIO_Init+0xe4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <MX_GPIO_Init+0xe4>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <MX_GPIO_Init+0xe4>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <MX_GPIO_Init+0xe4>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DP_H_Pin|DP_L_Pin|DM_H_Pin|DM_L_Pin, GPIO_PIN_RESET);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001fd8:	4816      	ldr	r0, [pc, #88]	; (8002034 <MX_GPIO_Init+0xe8>)
 8001fda:	f001 fc89 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8001fde:	2304      	movs	r3, #4
 8001fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fe2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4811      	ldr	r0, [pc, #68]	; (8002038 <MX_GPIO_Init+0xec>)
 8001ff4:	f001 faf8 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DP_H_Pin DP_L_Pin DM_H_Pin DM_L_Pin */
  GPIO_InitStruct.Pin = DP_H_Pin|DP_L_Pin|DM_H_Pin|DM_L_Pin;
 8001ff8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffe:	2301      	movs	r3, #1
 8002000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	4808      	ldr	r0, [pc, #32]	; (8002034 <MX_GPIO_Init+0xe8>)
 8002012:	f001 fae9 	bl	80035e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	2008      	movs	r0, #8
 800201c:	f001 fa9f 	bl	800355e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002020:	2008      	movs	r0, #8
 8002022:	f001 fab8 	bl	8003596 <HAL_NVIC_EnableIRQ>

}
 8002026:	bf00      	nop
 8002028:	3728      	adds	r7, #40	; 0x28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800
 8002034:	40020400 	.word	0x40020400
 8002038:	40020000 	.word	0x40020000

0800203c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002040:	b672      	cpsid	i
}
 8002042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002044:	e7fe      	b.n	8002044 <Error_Handler+0x8>
	...

08002048 <GetStateQC>:
#include "qc.h"
#include "main.h"

qc_t __qc_state = QC_OFF;

qc_t GetStateQC(){
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
	return __qc_state;
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <GetStateQC+0x14>)
 800204e:	781b      	ldrb	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000290 	.word	0x20000290

08002060 <DP_06V>:
	HAL_GPIO_WritePin(DP_H_GPIO_Port, DP_H_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(DP_L_GPIO_Port, DP_L_Pin, GPIO_PIN_RESET);
	__qc_state = QC_MANUAL_UNDEFINED;
}

void DP_06V(){
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DP_H_GPIO_Port, DP_H_Pin, GPIO_PIN_SET);
 8002064:	2201      	movs	r2, #1
 8002066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800206a:	4807      	ldr	r0, [pc, #28]	; (8002088 <DP_06V+0x28>)
 800206c:	f001 fc40 	bl	80038f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DP_L_GPIO_Port, DP_L_Pin, GPIO_PIN_RESET);
 8002070:	2200      	movs	r2, #0
 8002072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002076:	4804      	ldr	r0, [pc, #16]	; (8002088 <DP_06V+0x28>)
 8002078:	f001 fc3a 	bl	80038f0 <HAL_GPIO_WritePin>
	__qc_state = QC_MANUAL_UNDEFINED;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <DP_06V+0x2c>)
 800207e:	2206      	movs	r2, #6
 8002080:	701a      	strb	r2, [r3, #0]
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40020400 	.word	0x40020400
 800208c:	20000290 	.word	0x20000290

08002090 <DP_33V>:

void DP_33V(){
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DP_H_GPIO_Port, DP_H_Pin, GPIO_PIN_SET);
 8002094:	2201      	movs	r2, #1
 8002096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800209a:	4807      	ldr	r0, [pc, #28]	; (80020b8 <DP_33V+0x28>)
 800209c:	f001 fc28 	bl	80038f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DP_L_GPIO_Port, DP_L_Pin, GPIO_PIN_SET);
 80020a0:	2201      	movs	r2, #1
 80020a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020a6:	4804      	ldr	r0, [pc, #16]	; (80020b8 <DP_33V+0x28>)
 80020a8:	f001 fc22 	bl	80038f0 <HAL_GPIO_WritePin>
	__qc_state = QC_MANUAL_UNDEFINED;
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <DP_33V+0x2c>)
 80020ae:	2206      	movs	r2, #6
 80020b0:	701a      	strb	r2, [r3, #0]
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40020400 	.word	0x40020400
 80020bc:	20000290 	.word	0x20000290

080020c0 <DM_0V>:

void DM_0V(){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DM_H_GPIO_Port, DM_H_Pin, GPIO_PIN_RESET);
 80020c4:	2200      	movs	r2, #0
 80020c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020ca:	4807      	ldr	r0, [pc, #28]	; (80020e8 <DM_0V+0x28>)
 80020cc:	f001 fc10 	bl	80038f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DM_L_GPIO_Port, DM_L_Pin, GPIO_PIN_RESET);
 80020d0:	2200      	movs	r2, #0
 80020d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020d6:	4804      	ldr	r0, [pc, #16]	; (80020e8 <DM_0V+0x28>)
 80020d8:	f001 fc0a 	bl	80038f0 <HAL_GPIO_WritePin>
	__qc_state = QC_MANUAL_UNDEFINED;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <DM_0V+0x2c>)
 80020de:	2206      	movs	r2, #6
 80020e0:	701a      	strb	r2, [r3, #0]
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40020400 	.word	0x40020400
 80020ec:	20000290 	.word	0x20000290

080020f0 <DM_06V>:

void DM_06V(){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DM_H_GPIO_Port, DM_H_Pin, GPIO_PIN_SET);
 80020f4:	2201      	movs	r2, #1
 80020f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020fa:	4807      	ldr	r0, [pc, #28]	; (8002118 <DM_06V+0x28>)
 80020fc:	f001 fbf8 	bl	80038f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DM_L_GPIO_Port, DM_L_Pin, GPIO_PIN_RESET);
 8002100:	2200      	movs	r2, #0
 8002102:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002106:	4804      	ldr	r0, [pc, #16]	; (8002118 <DM_06V+0x28>)
 8002108:	f001 fbf2 	bl	80038f0 <HAL_GPIO_WritePin>
	__qc_state = QC_MANUAL_UNDEFINED;
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <DM_06V+0x2c>)
 800210e:	2206      	movs	r2, #6
 8002110:	701a      	strb	r2, [r3, #0]
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40020400 	.word	0x40020400
 800211c:	20000290 	.word	0x20000290

08002120 <DM_33V>:

void DM_33V(){
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DM_H_GPIO_Port, DM_H_Pin, GPIO_PIN_SET);
 8002124:	2201      	movs	r2, #1
 8002126:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800212a:	4807      	ldr	r0, [pc, #28]	; (8002148 <DM_33V+0x28>)
 800212c:	f001 fbe0 	bl	80038f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DM_L_GPIO_Port, DM_L_Pin, GPIO_PIN_SET);
 8002130:	2201      	movs	r2, #1
 8002132:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002136:	4804      	ldr	r0, [pc, #16]	; (8002148 <DM_33V+0x28>)
 8002138:	f001 fbda 	bl	80038f0 <HAL_GPIO_WritePin>
	__qc_state = QC_MANUAL_UNDEFINED;
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <DM_33V+0x2c>)
 800213e:	2206      	movs	r2, #6
 8002140:	701a      	strb	r2, [r3, #0]
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40020400 	.word	0x40020400
 800214c:	20000290 	.word	0x20000290

08002150 <Init_5V>:

void Init_5V(){
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	DP_06V();
 8002154:	f7ff ff84 	bl	8002060 <DP_06V>
	HAL_Delay(1250);
 8002158:	f240 40e2 	movw	r0, #1250	; 0x4e2
 800215c:	f001 f8dc 	bl	8003318 <HAL_Delay>
	DM_0V();
 8002160:	f7ff ffae 	bl	80020c0 <DM_0V>
	HAL_Delay(3);
 8002164:	2003      	movs	r0, #3
 8002166:	f001 f8d7 	bl	8003318 <HAL_Delay>
	__qc_state = QC_5V;
 800216a:	4b02      	ldr	r3, [pc, #8]	; (8002174 <Init_5V+0x24>)
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20000290 	.word	0x20000290

08002178 <Set_5V>:
	DM_06V();
	HAL_Delay(3);
	__qc_state = QC_9V;
}

void Set_5V(){
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	DP_06V();
 800217c:	f7ff ff70 	bl	8002060 <DP_06V>
	DM_0V();
 8002180:	f7ff ff9e 	bl	80020c0 <DM_0V>
	__qc_state = QC_5V;
 8002184:	4b02      	ldr	r3, [pc, #8]	; (8002190 <Set_5V+0x18>)
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000290 	.word	0x20000290

08002194 <Set_9V>:

void Set_9V(){
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
	DP_33V();
 8002198:	f7ff ff7a 	bl	8002090 <DP_33V>
	DM_06V();
 800219c:	f7ff ffa8 	bl	80020f0 <DM_06V>
	__qc_state = QC_9V;
 80021a0:	4b02      	ldr	r3, [pc, #8]	; (80021ac <Set_9V+0x18>)
 80021a2:	2202      	movs	r2, #2
 80021a4:	701a      	strb	r2, [r3, #0]
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000290 	.word	0x20000290

080021b0 <Set_12V>:

void Set_12V(){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	 DP_06V();
 80021b4:	f7ff ff54 	bl	8002060 <DP_06V>
	 DM_06V();
 80021b8:	f7ff ff9a 	bl	80020f0 <DM_06V>
	 __qc_state = QC_12V;
 80021bc:	4b02      	ldr	r3, [pc, #8]	; (80021c8 <Set_12V+0x18>)
 80021be:	2203      	movs	r2, #3
 80021c0:	701a      	strb	r2, [r3, #0]
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000290 	.word	0x20000290

080021cc <Set_20V>:

void Set_20V(){
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
	 DP_33V();
 80021d0:	f7ff ff5e 	bl	8002090 <DP_33V>
	 DM_33V();
 80021d4:	f7ff ffa4 	bl	8002120 <DM_33V>
	 __qc_state = QC_20V;
 80021d8:	4b02      	ldr	r3, [pc, #8]	; (80021e4 <Set_20V+0x18>)
 80021da:	2204      	movs	r2, #4
 80021dc:	701a      	strb	r2, [r3, #0]
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000290 	.word	0x20000290

080021e8 <IncVoltage>:
	DP_06V();
	HAL_Delay(60);
	__qc_state = QC_CONTINUOUS;
}

void IncVoltage(){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	//      ******      //
	//      *    *      //
	//      *    *      //
	//*******    *******//

	DP_33V();
 80021ec:	f7ff ff50 	bl	8002090 <DP_33V>
	HAL_Delay(1);
 80021f0:	2001      	movs	r0, #1
 80021f2:	f001 f891 	bl	8003318 <HAL_Delay>
	DP_06V();
 80021f6:	f7ff ff33 	bl	8002060 <DP_06V>
	HAL_Delay(1);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f001 f88c 	bl	8003318 <HAL_Delay>
	__qc_state = QC_CONTINUOUS;
 8002200:	4b02      	ldr	r3, [pc, #8]	; (800220c <IncVoltage+0x24>)
 8002202:	2205      	movs	r2, #5
 8002204:	701a      	strb	r2, [r3, #0]
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000290 	.word	0x20000290

08002210 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002216:	f000 fd99 	bl	8002d4c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800221a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800221e:	2201      	movs	r2, #1
 8002220:	2178      	movs	r1, #120	; 0x78
 8002222:	485b      	ldr	r0, [pc, #364]	; (8002390 <SSD1306_Init+0x180>)
 8002224:	f002 f8f8 	bl	8004418 <HAL_I2C_IsDeviceReady>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800222e:	2300      	movs	r3, #0
 8002230:	e0a9      	b.n	8002386 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002232:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002236:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002238:	e002      	b.n	8002240 <SSD1306_Init+0x30>
		p--;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3b01      	subs	r3, #1
 800223e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f9      	bne.n	800223a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002246:	22ae      	movs	r2, #174	; 0xae
 8002248:	2100      	movs	r1, #0
 800224a:	2078      	movs	r0, #120	; 0x78
 800224c:	f000 fdfa 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002250:	2220      	movs	r2, #32
 8002252:	2100      	movs	r1, #0
 8002254:	2078      	movs	r0, #120	; 0x78
 8002256:	f000 fdf5 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800225a:	2210      	movs	r2, #16
 800225c:	2100      	movs	r1, #0
 800225e:	2078      	movs	r0, #120	; 0x78
 8002260:	f000 fdf0 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002264:	22b0      	movs	r2, #176	; 0xb0
 8002266:	2100      	movs	r1, #0
 8002268:	2078      	movs	r0, #120	; 0x78
 800226a:	f000 fdeb 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800226e:	22c8      	movs	r2, #200	; 0xc8
 8002270:	2100      	movs	r1, #0
 8002272:	2078      	movs	r0, #120	; 0x78
 8002274:	f000 fde6 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002278:	2200      	movs	r2, #0
 800227a:	2100      	movs	r1, #0
 800227c:	2078      	movs	r0, #120	; 0x78
 800227e:	f000 fde1 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002282:	2210      	movs	r2, #16
 8002284:	2100      	movs	r1, #0
 8002286:	2078      	movs	r0, #120	; 0x78
 8002288:	f000 fddc 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800228c:	2240      	movs	r2, #64	; 0x40
 800228e:	2100      	movs	r1, #0
 8002290:	2078      	movs	r0, #120	; 0x78
 8002292:	f000 fdd7 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002296:	2281      	movs	r2, #129	; 0x81
 8002298:	2100      	movs	r1, #0
 800229a:	2078      	movs	r0, #120	; 0x78
 800229c:	f000 fdd2 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80022a0:	22ff      	movs	r2, #255	; 0xff
 80022a2:	2100      	movs	r1, #0
 80022a4:	2078      	movs	r0, #120	; 0x78
 80022a6:	f000 fdcd 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80022aa:	22a1      	movs	r2, #161	; 0xa1
 80022ac:	2100      	movs	r1, #0
 80022ae:	2078      	movs	r0, #120	; 0x78
 80022b0:	f000 fdc8 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80022b4:	22a6      	movs	r2, #166	; 0xa6
 80022b6:	2100      	movs	r1, #0
 80022b8:	2078      	movs	r0, #120	; 0x78
 80022ba:	f000 fdc3 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80022be:	22a8      	movs	r2, #168	; 0xa8
 80022c0:	2100      	movs	r1, #0
 80022c2:	2078      	movs	r0, #120	; 0x78
 80022c4:	f000 fdbe 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80022c8:	223f      	movs	r2, #63	; 0x3f
 80022ca:	2100      	movs	r1, #0
 80022cc:	2078      	movs	r0, #120	; 0x78
 80022ce:	f000 fdb9 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80022d2:	22a4      	movs	r2, #164	; 0xa4
 80022d4:	2100      	movs	r1, #0
 80022d6:	2078      	movs	r0, #120	; 0x78
 80022d8:	f000 fdb4 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80022dc:	22d3      	movs	r2, #211	; 0xd3
 80022de:	2100      	movs	r1, #0
 80022e0:	2078      	movs	r0, #120	; 0x78
 80022e2:	f000 fdaf 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	2078      	movs	r0, #120	; 0x78
 80022ec:	f000 fdaa 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80022f0:	22d5      	movs	r2, #213	; 0xd5
 80022f2:	2100      	movs	r1, #0
 80022f4:	2078      	movs	r0, #120	; 0x78
 80022f6:	f000 fda5 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80022fa:	22f0      	movs	r2, #240	; 0xf0
 80022fc:	2100      	movs	r1, #0
 80022fe:	2078      	movs	r0, #120	; 0x78
 8002300:	f000 fda0 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002304:	22d9      	movs	r2, #217	; 0xd9
 8002306:	2100      	movs	r1, #0
 8002308:	2078      	movs	r0, #120	; 0x78
 800230a:	f000 fd9b 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800230e:	2222      	movs	r2, #34	; 0x22
 8002310:	2100      	movs	r1, #0
 8002312:	2078      	movs	r0, #120	; 0x78
 8002314:	f000 fd96 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002318:	22da      	movs	r2, #218	; 0xda
 800231a:	2100      	movs	r1, #0
 800231c:	2078      	movs	r0, #120	; 0x78
 800231e:	f000 fd91 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002322:	2212      	movs	r2, #18
 8002324:	2100      	movs	r1, #0
 8002326:	2078      	movs	r0, #120	; 0x78
 8002328:	f000 fd8c 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800232c:	22db      	movs	r2, #219	; 0xdb
 800232e:	2100      	movs	r1, #0
 8002330:	2078      	movs	r0, #120	; 0x78
 8002332:	f000 fd87 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002336:	2220      	movs	r2, #32
 8002338:	2100      	movs	r1, #0
 800233a:	2078      	movs	r0, #120	; 0x78
 800233c:	f000 fd82 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002340:	228d      	movs	r2, #141	; 0x8d
 8002342:	2100      	movs	r1, #0
 8002344:	2078      	movs	r0, #120	; 0x78
 8002346:	f000 fd7d 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800234a:	2214      	movs	r2, #20
 800234c:	2100      	movs	r1, #0
 800234e:	2078      	movs	r0, #120	; 0x78
 8002350:	f000 fd78 	bl	8002e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002354:	22af      	movs	r2, #175	; 0xaf
 8002356:	2100      	movs	r1, #0
 8002358:	2078      	movs	r0, #120	; 0x78
 800235a:	f000 fd73 	bl	8002e44 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800235e:	222e      	movs	r2, #46	; 0x2e
 8002360:	2100      	movs	r1, #0
 8002362:	2078      	movs	r0, #120	; 0x78
 8002364:	f000 fd6e 	bl	8002e44 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002368:	2000      	movs	r0, #0
 800236a:	f000 f847 	bl	80023fc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800236e:	f000 f813 	bl	8002398 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <SSD1306_Init+0x184>)
 8002374:	2200      	movs	r2, #0
 8002376:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <SSD1306_Init+0x184>)
 800237a:	2200      	movs	r2, #0
 800237c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SSD1306_Init+0x184>)
 8002380:	2201      	movs	r2, #1
 8002382:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002384:	2301      	movs	r3, #1
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000134 	.word	0x20000134
 8002394:	200006b4 	.word	0x200006b4

08002398 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800239e:	2300      	movs	r3, #0
 80023a0:	71fb      	strb	r3, [r7, #7]
 80023a2:	e021      	b.n	80023e8 <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	3b50      	subs	r3, #80	; 0x50
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	2100      	movs	r1, #0
 80023ae:	2078      	movs	r0, #120	; 0x78
 80023b0:	f000 fd48 	bl	8002e44 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2100      	movs	r1, #0
 80023b8:	2078      	movs	r0, #120	; 0x78
 80023ba:	f000 fd43 	bl	8002e44 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80023be:	2210      	movs	r2, #16
 80023c0:	2100      	movs	r1, #0
 80023c2:	2078      	movs	r0, #120	; 0x78
 80023c4:	f000 fd3e 	bl	8002e44 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80023c8:	79fa      	ldrb	r2, [r7, #7]
 80023ca:	4613      	mov	r3, r2
 80023cc:	019b      	lsls	r3, r3, #6
 80023ce:	4413      	add	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	461a      	mov	r2, r3
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <SSD1306_UpdateScreen+0x60>)
 80023d6:	441a      	add	r2, r3
 80023d8:	2382      	movs	r3, #130	; 0x82
 80023da:	2140      	movs	r1, #64	; 0x40
 80023dc:	2078      	movs	r0, #120	; 0x78
 80023de:	f000 fccb 	bl	8002d78 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	3301      	adds	r3, #1
 80023e6:	71fb      	strb	r3, [r7, #7]
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	2b07      	cmp	r3, #7
 80023ec:	d9da      	bls.n	80023a4 <SSD1306_UpdateScreen+0xc>
	}
}
 80023ee:	bf00      	nop
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000294 	.word	0x20000294

080023fc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <SSD1306_Fill+0x14>
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <SSD1306_Fill+0x16>
 8002410:	23ff      	movs	r3, #255	; 0xff
 8002412:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8002416:	4619      	mov	r1, r3
 8002418:	4803      	ldr	r0, [pc, #12]	; (8002428 <SSD1306_Fill+0x2c>)
 800241a:	f004 faab 	bl	8006974 <memset>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000294 	.word	0x20000294

0800242c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800242c:	b490      	push	{r4, r7}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	80fb      	strh	r3, [r7, #6]
 8002436:	460b      	mov	r3, r1
 8002438:	80bb      	strh	r3, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	70fb      	strb	r3, [r7, #3]
	if (
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	2b81      	cmp	r3, #129	; 0x81
 8002442:	d854      	bhi.n	80024ee <SSD1306_DrawPixel+0xc2>
		x >= SSD1306_WIDTH ||
 8002444:	88bb      	ldrh	r3, [r7, #4]
 8002446:	2b40      	cmp	r3, #64	; 0x40
 8002448:	d851      	bhi.n	80024ee <SSD1306_DrawPixel+0xc2>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800244a:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <SSD1306_DrawPixel+0xcc>)
 800244c:	791b      	ldrb	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf0c      	ite	eq
 8002458:	2301      	moveq	r3, #1
 800245a:	2300      	movne	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d120      	bne.n	80024a8 <SSD1306_DrawPixel+0x7c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002466:	88fa      	ldrh	r2, [r7, #6]
 8002468:	88bb      	ldrh	r3, [r7, #4]
 800246a:	08db      	lsrs	r3, r3, #3
 800246c:	b298      	uxth	r0, r3
 800246e:	4601      	mov	r1, r0
 8002470:	460b      	mov	r3, r1
 8002472:	019b      	lsls	r3, r3, #6
 8002474:	440b      	add	r3, r1
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	4a20      	ldr	r2, [pc, #128]	; (80024fc <SSD1306_DrawPixel+0xd0>)
 800247c:	5cd3      	ldrb	r3, [r2, r3]
 800247e:	b25a      	sxtb	r2, r3
 8002480:	88bb      	ldrh	r3, [r7, #4]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	2101      	movs	r1, #1
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	b25b      	sxtb	r3, r3
 800248e:	4313      	orrs	r3, r2
 8002490:	b25c      	sxtb	r4, r3
 8002492:	88fa      	ldrh	r2, [r7, #6]
 8002494:	4601      	mov	r1, r0
 8002496:	460b      	mov	r3, r1
 8002498:	019b      	lsls	r3, r3, #6
 800249a:	440b      	add	r3, r1
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	b2e1      	uxtb	r1, r4
 80024a2:	4a16      	ldr	r2, [pc, #88]	; (80024fc <SSD1306_DrawPixel+0xd0>)
 80024a4:	54d1      	strb	r1, [r2, r3]
 80024a6:	e023      	b.n	80024f0 <SSD1306_DrawPixel+0xc4>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80024a8:	88fa      	ldrh	r2, [r7, #6]
 80024aa:	88bb      	ldrh	r3, [r7, #4]
 80024ac:	08db      	lsrs	r3, r3, #3
 80024ae:	b298      	uxth	r0, r3
 80024b0:	4601      	mov	r1, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	019b      	lsls	r3, r3, #6
 80024b6:	440b      	add	r3, r1
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4413      	add	r3, r2
 80024bc:	4a0f      	ldr	r2, [pc, #60]	; (80024fc <SSD1306_DrawPixel+0xd0>)
 80024be:	5cd3      	ldrb	r3, [r2, r3]
 80024c0:	b25a      	sxtb	r2, r3
 80024c2:	88bb      	ldrh	r3, [r7, #4]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	2101      	movs	r1, #1
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	b25b      	sxtb	r3, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	b25b      	sxtb	r3, r3
 80024d4:	4013      	ands	r3, r2
 80024d6:	b25c      	sxtb	r4, r3
 80024d8:	88fa      	ldrh	r2, [r7, #6]
 80024da:	4601      	mov	r1, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	019b      	lsls	r3, r3, #6
 80024e0:	440b      	add	r3, r1
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	b2e1      	uxtb	r1, r4
 80024e8:	4a04      	ldr	r2, [pc, #16]	; (80024fc <SSD1306_DrawPixel+0xd0>)
 80024ea:	54d1      	strb	r1, [r2, r3]
 80024ec:	e000      	b.n	80024f0 <SSD1306_DrawPixel+0xc4>
		return;
 80024ee:	bf00      	nop
	}
}
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc90      	pop	{r4, r7}
 80024f6:	4770      	bx	lr
 80024f8:	200006b4 	.word	0x200006b4
 80024fc:	20000294 	.word	0x20000294

08002500 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	460a      	mov	r2, r1
 800250a:	80fb      	strh	r3, [r7, #6]
 800250c:	4613      	mov	r3, r2
 800250e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002510:	4a05      	ldr	r2, [pc, #20]	; (8002528 <SSD1306_GotoXY+0x28>)
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002516:	4a04      	ldr	r2, [pc, #16]	; (8002528 <SSD1306_GotoXY+0x28>)
 8002518:	88bb      	ldrh	r3, [r7, #4]
 800251a:	8053      	strh	r3, [r2, #2]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	200006b4 	.word	0x200006b4

0800252c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	71fb      	strb	r3, [r7, #7]
 8002538:	4613      	mov	r3, r2
 800253a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800253c:	4b3a      	ldr	r3, [pc, #232]	; (8002628 <SSD1306_Putc+0xfc>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	4413      	add	r3, r2
	if (
 8002548:	2b81      	cmp	r3, #129	; 0x81
 800254a:	dc07      	bgt.n	800255c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800254c:	4b36      	ldr	r3, [pc, #216]	; (8002628 <SSD1306_Putc+0xfc>)
 800254e:	885b      	ldrh	r3, [r3, #2]
 8002550:	461a      	mov	r2, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	785b      	ldrb	r3, [r3, #1]
 8002556:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002558:	2b40      	cmp	r3, #64	; 0x40
 800255a:	dd01      	ble.n	8002560 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800255c:	2300      	movs	r3, #0
 800255e:	e05e      	b.n	800261e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	e04b      	b.n	80025fe <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	3b20      	subs	r3, #32
 800256e:	6839      	ldr	r1, [r7, #0]
 8002570:	7849      	ldrb	r1, [r1, #1]
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4619      	mov	r1, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	440b      	add	r3, r1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4413      	add	r3, r2
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	e030      	b.n	80025ec <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d010      	beq.n	80025bc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800259a:	4b23      	ldr	r3, [pc, #140]	; (8002628 <SSD1306_Putc+0xfc>)
 800259c:	881a      	ldrh	r2, [r3, #0]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	b298      	uxth	r0, r3
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <SSD1306_Putc+0xfc>)
 80025a8:	885a      	ldrh	r2, [r3, #2]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	79ba      	ldrb	r2, [r7, #6]
 80025b4:	4619      	mov	r1, r3
 80025b6:	f7ff ff39 	bl	800242c <SSD1306_DrawPixel>
 80025ba:	e014      	b.n	80025e6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80025bc:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <SSD1306_Putc+0xfc>)
 80025be:	881a      	ldrh	r2, [r3, #0]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	b298      	uxth	r0, r3
 80025c8:	4b17      	ldr	r3, [pc, #92]	; (8002628 <SSD1306_Putc+0xfc>)
 80025ca:	885a      	ldrh	r2, [r3, #2]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	b299      	uxth	r1, r3
 80025d4:	79bb      	ldrb	r3, [r7, #6]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	bf0c      	ite	eq
 80025da:	2301      	moveq	r3, #1
 80025dc:	2300      	movne	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	f7ff ff23 	bl	800242c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	3301      	adds	r3, #1
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d3c8      	bcc.n	800258a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	3301      	adds	r3, #1
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	785b      	ldrb	r3, [r3, #1]
 8002602:	461a      	mov	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	4293      	cmp	r3, r2
 8002608:	d3ad      	bcc.n	8002566 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <SSD1306_Putc+0xfc>)
 800260c:	881a      	ldrh	r2, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	4413      	add	r3, r2
 8002616:	b29a      	uxth	r2, r3
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <SSD1306_Putc+0xfc>)
 800261a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800261c:	79fb      	ldrb	r3, [r7, #7]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200006b4 	.word	0x200006b4

0800262c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800263a:	e012      	b.n	8002662 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	79fa      	ldrb	r2, [r7, #7]
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff71 	bl	800252c <SSD1306_Putc>
 800264a:	4603      	mov	r3, r0
 800264c:	461a      	mov	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d002      	beq.n	800265c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	e008      	b.n	800266e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3301      	adds	r3, #1
 8002660:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1e8      	bne.n	800263c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	781b      	ldrb	r3, [r3, #0]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8002676:	b590      	push	{r4, r7, lr}
 8002678:	b087      	sub	sp, #28
 800267a:	af00      	add	r7, sp, #0
 800267c:	4604      	mov	r4, r0
 800267e:	4608      	mov	r0, r1
 8002680:	4611      	mov	r1, r2
 8002682:	461a      	mov	r2, r3
 8002684:	4623      	mov	r3, r4
 8002686:	80fb      	strh	r3, [r7, #6]
 8002688:	4603      	mov	r3, r0
 800268a:	80bb      	strh	r3, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
 8002690:	4613      	mov	r3, r2
 8002692:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	2b81      	cmp	r3, #129	; 0x81
 8002698:	d901      	bls.n	800269e <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800269a:	2381      	movs	r3, #129	; 0x81
 800269c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	2b81      	cmp	r3, #129	; 0x81
 80026a2:	d901      	bls.n	80026a8 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80026a4:	2381      	movs	r3, #129	; 0x81
 80026a6:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80026a8:	88bb      	ldrh	r3, [r7, #4]
 80026aa:	2b40      	cmp	r3, #64	; 0x40
 80026ac:	d901      	bls.n	80026b2 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80026ae:	2340      	movs	r3, #64	; 0x40
 80026b0:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80026b2:	883b      	ldrh	r3, [r7, #0]
 80026b4:	2b40      	cmp	r3, #64	; 0x40
 80026b6:	d901      	bls.n	80026bc <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80026b8:	2340      	movs	r3, #64	; 0x40
 80026ba:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80026bc:	88fa      	ldrh	r2, [r7, #6]
 80026be:	887b      	ldrh	r3, [r7, #2]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d205      	bcs.n	80026d0 <SSD1306_DrawLine+0x5a>
 80026c4:	887a      	ldrh	r2, [r7, #2]
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	e004      	b.n	80026da <SSD1306_DrawLine+0x64>
 80026d0:	88fa      	ldrh	r2, [r7, #6]
 80026d2:	887b      	ldrh	r3, [r7, #2]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	b21b      	sxth	r3, r3
 80026da:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80026dc:	88ba      	ldrh	r2, [r7, #4]
 80026de:	883b      	ldrh	r3, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d205      	bcs.n	80026f0 <SSD1306_DrawLine+0x7a>
 80026e4:	883a      	ldrh	r2, [r7, #0]
 80026e6:	88bb      	ldrh	r3, [r7, #4]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	b21b      	sxth	r3, r3
 80026ee:	e004      	b.n	80026fa <SSD1306_DrawLine+0x84>
 80026f0:	88ba      	ldrh	r2, [r7, #4]
 80026f2:	883b      	ldrh	r3, [r7, #0]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	b21b      	sxth	r3, r3
 80026fa:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80026fc:	88fa      	ldrh	r2, [r7, #6]
 80026fe:	887b      	ldrh	r3, [r7, #2]
 8002700:	429a      	cmp	r2, r3
 8002702:	d201      	bcs.n	8002708 <SSD1306_DrawLine+0x92>
 8002704:	2301      	movs	r3, #1
 8002706:	e001      	b.n	800270c <SSD1306_DrawLine+0x96>
 8002708:	f04f 33ff 	mov.w	r3, #4294967295
 800270c:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800270e:	88ba      	ldrh	r2, [r7, #4]
 8002710:	883b      	ldrh	r3, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d201      	bcs.n	800271a <SSD1306_DrawLine+0xa4>
 8002716:	2301      	movs	r3, #1
 8002718:	e001      	b.n	800271e <SSD1306_DrawLine+0xa8>
 800271a:	f04f 33ff 	mov.w	r3, #4294967295
 800271e:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8002720:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002724:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002728:	429a      	cmp	r2, r3
 800272a:	dd06      	ble.n	800273a <SSD1306_DrawLine+0xc4>
 800272c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002730:	0fda      	lsrs	r2, r3, #31
 8002732:	4413      	add	r3, r2
 8002734:	105b      	asrs	r3, r3, #1
 8002736:	b21b      	sxth	r3, r3
 8002738:	e006      	b.n	8002748 <SSD1306_DrawLine+0xd2>
 800273a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800273e:	0fda      	lsrs	r2, r3, #31
 8002740:	4413      	add	r3, r2
 8002742:	105b      	asrs	r3, r3, #1
 8002744:	425b      	negs	r3, r3
 8002746:	b21b      	sxth	r3, r3
 8002748:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800274a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d129      	bne.n	80027a6 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8002752:	883a      	ldrh	r2, [r7, #0]
 8002754:	88bb      	ldrh	r3, [r7, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	d205      	bcs.n	8002766 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800275a:	883b      	ldrh	r3, [r7, #0]
 800275c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800275e:	88bb      	ldrh	r3, [r7, #4]
 8002760:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002762:	893b      	ldrh	r3, [r7, #8]
 8002764:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	429a      	cmp	r2, r3
 800276c:	d205      	bcs.n	800277a <SSD1306_DrawLine+0x104>
			tmp = x1;
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002776:	893b      	ldrh	r3, [r7, #8]
 8002778:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800277a:	88bb      	ldrh	r3, [r7, #4]
 800277c:	82bb      	strh	r3, [r7, #20]
 800277e:	e00c      	b.n	800279a <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8002780:	8ab9      	ldrh	r1, [r7, #20]
 8002782:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fe4f 	bl	800242c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 800278e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002792:	b29b      	uxth	r3, r3
 8002794:	3301      	adds	r3, #1
 8002796:	b29b      	uxth	r3, r3
 8002798:	82bb      	strh	r3, [r7, #20]
 800279a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800279e:	883b      	ldrh	r3, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	dded      	ble.n	8002780 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 80027a4:	e05f      	b.n	8002866 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 80027a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d129      	bne.n	8002802 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80027ae:	883a      	ldrh	r2, [r7, #0]
 80027b0:	88bb      	ldrh	r3, [r7, #4]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d205      	bcs.n	80027c2 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80027b6:	883b      	ldrh	r3, [r7, #0]
 80027b8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80027ba:	88bb      	ldrh	r3, [r7, #4]
 80027bc:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80027be:	893b      	ldrh	r3, [r7, #8]
 80027c0:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d205      	bcs.n	80027d6 <SSD1306_DrawLine+0x160>
			tmp = x1;
 80027ca:	887b      	ldrh	r3, [r7, #2]
 80027cc:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80027d2:	893b      	ldrh	r3, [r7, #8]
 80027d4:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	82bb      	strh	r3, [r7, #20]
 80027da:	e00c      	b.n	80027f6 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80027dc:	8abb      	ldrh	r3, [r7, #20]
 80027de:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80027e2:	88b9      	ldrh	r1, [r7, #4]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fe21 	bl	800242c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80027ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	82bb      	strh	r3, [r7, #20]
 80027f6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80027fa:	887b      	ldrh	r3, [r7, #2]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	dded      	ble.n	80027dc <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8002800:	e031      	b.n	8002866 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8002802:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002806:	88b9      	ldrh	r1, [r7, #4]
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fe0e 	bl	800242c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8002810:	88fa      	ldrh	r2, [r7, #6]
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	429a      	cmp	r2, r3
 8002816:	d103      	bne.n	8002820 <SSD1306_DrawLine+0x1aa>
 8002818:	88ba      	ldrh	r2, [r7, #4]
 800281a:	883b      	ldrh	r3, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d021      	beq.n	8002864 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8002820:	8afb      	ldrh	r3, [r7, #22]
 8002822:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8002824:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002828:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800282c:	425b      	negs	r3, r3
 800282e:	429a      	cmp	r2, r3
 8002830:	dd08      	ble.n	8002844 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8002832:	8afa      	ldrh	r2, [r7, #22]
 8002834:	8a3b      	ldrh	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	b29b      	uxth	r3, r3
 800283a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 800283c:	89fa      	ldrh	r2, [r7, #14]
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	4413      	add	r3, r2
 8002842:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8002844:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002848:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800284c:	429a      	cmp	r2, r3
 800284e:	dad8      	bge.n	8002802 <SSD1306_DrawLine+0x18c>
			err += dx;
 8002850:	8afa      	ldrh	r2, [r7, #22]
 8002852:	8a7b      	ldrh	r3, [r7, #18]
 8002854:	4413      	add	r3, r2
 8002856:	b29b      	uxth	r3, r3
 8002858:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800285a:	89ba      	ldrh	r2, [r7, #12]
 800285c:	88bb      	ldrh	r3, [r7, #4]
 800285e:	4413      	add	r3, r2
 8002860:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8002862:	e7ce      	b.n	8002802 <SSD1306_DrawLine+0x18c>
			break;
 8002864:	bf00      	nop
		} 
	}
}
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	bd90      	pop	{r4, r7, pc}

0800286c <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b085      	sub	sp, #20
 8002870:	af02      	add	r7, sp, #8
 8002872:	4604      	mov	r4, r0
 8002874:	4608      	mov	r0, r1
 8002876:	4611      	mov	r1, r2
 8002878:	461a      	mov	r2, r3
 800287a:	4623      	mov	r3, r4
 800287c:	80fb      	strh	r3, [r7, #6]
 800287e:	4603      	mov	r3, r0
 8002880:	80bb      	strh	r3, [r7, #4]
 8002882:	460b      	mov	r3, r1
 8002884:	807b      	strh	r3, [r7, #2]
 8002886:	4613      	mov	r3, r2
 8002888:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	2b81      	cmp	r3, #129	; 0x81
 800288e:	d853      	bhi.n	8002938 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8002890:	88bb      	ldrh	r3, [r7, #4]
 8002892:	2b40      	cmp	r3, #64	; 0x40
 8002894:	d850      	bhi.n	8002938 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8002896:	88fa      	ldrh	r2, [r7, #6]
 8002898:	887b      	ldrh	r3, [r7, #2]
 800289a:	4413      	add	r3, r2
 800289c:	2b81      	cmp	r3, #129	; 0x81
 800289e:	dd03      	ble.n	80028a8 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	f1c3 0382 	rsb	r3, r3, #130	; 0x82
 80028a6:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80028a8:	88ba      	ldrh	r2, [r7, #4]
 80028aa:	883b      	ldrh	r3, [r7, #0]
 80028ac:	4413      	add	r3, r2
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	dd03      	ble.n	80028ba <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80028b2:	88bb      	ldrh	r3, [r7, #4]
 80028b4:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 80028b8:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 80028ba:	88fa      	ldrh	r2, [r7, #6]
 80028bc:	887b      	ldrh	r3, [r7, #2]
 80028be:	4413      	add	r3, r2
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	88bc      	ldrh	r4, [r7, #4]
 80028c4:	88b9      	ldrh	r1, [r7, #4]
 80028c6:	88f8      	ldrh	r0, [r7, #6]
 80028c8:	7e3b      	ldrb	r3, [r7, #24]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	4623      	mov	r3, r4
 80028ce:	f7ff fed2 	bl	8002676 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 80028d2:	88ba      	ldrh	r2, [r7, #4]
 80028d4:	883b      	ldrh	r3, [r7, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	b299      	uxth	r1, r3
 80028da:	88fa      	ldrh	r2, [r7, #6]
 80028dc:	887b      	ldrh	r3, [r7, #2]
 80028de:	4413      	add	r3, r2
 80028e0:	b29c      	uxth	r4, r3
 80028e2:	88ba      	ldrh	r2, [r7, #4]
 80028e4:	883b      	ldrh	r3, [r7, #0]
 80028e6:	4413      	add	r3, r2
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	88f8      	ldrh	r0, [r7, #6]
 80028ec:	7e3b      	ldrb	r3, [r7, #24]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	4622      	mov	r2, r4
 80028f4:	f7ff febf 	bl	8002676 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 80028f8:	88ba      	ldrh	r2, [r7, #4]
 80028fa:	883b      	ldrh	r3, [r7, #0]
 80028fc:	4413      	add	r3, r2
 80028fe:	b29c      	uxth	r4, r3
 8002900:	88fa      	ldrh	r2, [r7, #6]
 8002902:	88b9      	ldrh	r1, [r7, #4]
 8002904:	88f8      	ldrh	r0, [r7, #6]
 8002906:	7e3b      	ldrb	r3, [r7, #24]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	4623      	mov	r3, r4
 800290c:	f7ff feb3 	bl	8002676 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8002910:	88fa      	ldrh	r2, [r7, #6]
 8002912:	887b      	ldrh	r3, [r7, #2]
 8002914:	4413      	add	r3, r2
 8002916:	b298      	uxth	r0, r3
 8002918:	88fa      	ldrh	r2, [r7, #6]
 800291a:	887b      	ldrh	r3, [r7, #2]
 800291c:	4413      	add	r3, r2
 800291e:	b29c      	uxth	r4, r3
 8002920:	88ba      	ldrh	r2, [r7, #4]
 8002922:	883b      	ldrh	r3, [r7, #0]
 8002924:	4413      	add	r3, r2
 8002926:	b29a      	uxth	r2, r3
 8002928:	88b9      	ldrh	r1, [r7, #4]
 800292a:	7e3b      	ldrb	r3, [r7, #24]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	4613      	mov	r3, r2
 8002930:	4622      	mov	r2, r4
 8002932:	f7ff fea0 	bl	8002676 <SSD1306_DrawLine>
 8002936:	e000      	b.n	800293a <SSD1306_DrawRectangle+0xce>
		return;
 8002938:	bf00      	nop
}
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bd90      	pop	{r4, r7, pc}

08002940 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b087      	sub	sp, #28
 8002944:	af02      	add	r7, sp, #8
 8002946:	4604      	mov	r4, r0
 8002948:	4608      	mov	r0, r1
 800294a:	4611      	mov	r1, r2
 800294c:	461a      	mov	r2, r3
 800294e:	4623      	mov	r3, r4
 8002950:	80fb      	strh	r3, [r7, #6]
 8002952:	4603      	mov	r3, r0
 8002954:	80bb      	strh	r3, [r7, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	807b      	strh	r3, [r7, #2]
 800295a:	4613      	mov	r3, r2
 800295c:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	2b81      	cmp	r3, #129	; 0x81
 8002962:	d836      	bhi.n	80029d2 <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8002964:	88bb      	ldrh	r3, [r7, #4]
 8002966:	2b40      	cmp	r3, #64	; 0x40
 8002968:	d833      	bhi.n	80029d2 <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800296a:	88fa      	ldrh	r2, [r7, #6]
 800296c:	887b      	ldrh	r3, [r7, #2]
 800296e:	4413      	add	r3, r2
 8002970:	2b81      	cmp	r3, #129	; 0x81
 8002972:	dd03      	ble.n	800297c <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	f1c3 0382 	rsb	r3, r3, #130	; 0x82
 800297a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800297c:	88ba      	ldrh	r2, [r7, #4]
 800297e:	883b      	ldrh	r3, [r7, #0]
 8002980:	4413      	add	r3, r2
 8002982:	2b40      	cmp	r3, #64	; 0x40
 8002984:	dd03      	ble.n	800298e <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8002986:	88bb      	ldrh	r3, [r7, #4]
 8002988:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 800298c:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800298e:	2300      	movs	r3, #0
 8002990:	73fb      	strb	r3, [r7, #15]
 8002992:	e018      	b.n	80029c6 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	b29a      	uxth	r2, r3
 8002998:	88bb      	ldrh	r3, [r7, #4]
 800299a:	4413      	add	r3, r2
 800299c:	b299      	uxth	r1, r3
 800299e:	88fa      	ldrh	r2, [r7, #6]
 80029a0:	887b      	ldrh	r3, [r7, #2]
 80029a2:	4413      	add	r3, r2
 80029a4:	b29c      	uxth	r4, r3
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	88bb      	ldrh	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	88f8      	ldrh	r0, [r7, #6]
 80029b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	4622      	mov	r2, r4
 80029bc:	f7ff fe5b 	bl	8002676 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	3301      	adds	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	883a      	ldrh	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d2e1      	bcs.n	8002994 <SSD1306_DrawFilledRectangle+0x54>
 80029d0:	e000      	b.n	80029d4 <SSD1306_DrawFilledRectangle+0x94>
		return;
 80029d2:	bf00      	nop
	}
}
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd90      	pop	{r4, r7, pc}

080029da <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 80029da:	b590      	push	{r4, r7, lr}
 80029dc:	b087      	sub	sp, #28
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4604      	mov	r4, r0
 80029e2:	4608      	mov	r0, r1
 80029e4:	4611      	mov	r1, r2
 80029e6:	461a      	mov	r2, r3
 80029e8:	4623      	mov	r3, r4
 80029ea:	80fb      	strh	r3, [r7, #6]
 80029ec:	4603      	mov	r3, r0
 80029ee:	80bb      	strh	r3, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	807b      	strh	r3, [r7, #2]
 80029f4:	4613      	mov	r3, r2
 80029f6:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80029f8:	887b      	ldrh	r3, [r7, #2]
 80029fa:	f1c3 0301 	rsb	r3, r3, #1
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002a02:	2301      	movs	r3, #1
 8002a04:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002a06:	887b      	ldrh	r3, [r7, #2]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	03d2      	lsls	r2, r2, #15
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002a1c:	88f8      	ldrh	r0, [r7, #6]
 8002a1e:	88ba      	ldrh	r2, [r7, #4]
 8002a20:	887b      	ldrh	r3, [r7, #2]
 8002a22:	4413      	add	r3, r2
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	787a      	ldrb	r2, [r7, #1]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f7ff fcff 	bl	800242c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8002a2e:	88f8      	ldrh	r0, [r7, #6]
 8002a30:	88ba      	ldrh	r2, [r7, #4]
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	787a      	ldrb	r2, [r7, #1]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	f7ff fcf6 	bl	800242c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8002a40:	88fa      	ldrh	r2, [r7, #6]
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	4413      	add	r3, r2
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	88b9      	ldrh	r1, [r7, #4]
 8002a4a:	787a      	ldrb	r2, [r7, #1]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fced 	bl	800242c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8002a52:	88fa      	ldrh	r2, [r7, #6]
 8002a54:	887b      	ldrh	r3, [r7, #2]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	88b9      	ldrh	r1, [r7, #4]
 8002a5c:	787a      	ldrb	r2, [r7, #1]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fce4 	bl	800242c <SSD1306_DrawPixel>

    while (x < y) {
 8002a64:	e081      	b.n	8002b6a <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8002a66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	db0e      	blt.n	8002a8c <SSD1306_DrawCircle+0xb2>
            y--;
 8002a6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8002a7a:	8a7b      	ldrh	r3, [r7, #18]
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8002a82:	8afa      	ldrh	r2, [r7, #22]
 8002a84:	8a7b      	ldrh	r3, [r7, #18]
 8002a86:	4413      	add	r3, r2
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8002a8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8002a98:	8abb      	ldrh	r3, [r7, #20]
 8002a9a:	3302      	adds	r3, #2
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8002aa0:	8afa      	ldrh	r2, [r7, #22]
 8002aa2:	8abb      	ldrh	r3, [r7, #20]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8002aaa:	88fa      	ldrh	r2, [r7, #6]
 8002aac:	8a3b      	ldrh	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	b298      	uxth	r0, r3
 8002ab2:	88ba      	ldrh	r2, [r7, #4]
 8002ab4:	89fb      	ldrh	r3, [r7, #14]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	787a      	ldrb	r2, [r7, #1]
 8002abc:	4619      	mov	r1, r3
 8002abe:	f7ff fcb5 	bl	800242c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8002ac2:	88fa      	ldrh	r2, [r7, #6]
 8002ac4:	8a3b      	ldrh	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	b298      	uxth	r0, r3
 8002aca:	88ba      	ldrh	r2, [r7, #4]
 8002acc:	89fb      	ldrh	r3, [r7, #14]
 8002ace:	4413      	add	r3, r2
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	787a      	ldrb	r2, [r7, #1]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f7ff fca9 	bl	800242c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8002ada:	88fa      	ldrh	r2, [r7, #6]
 8002adc:	8a3b      	ldrh	r3, [r7, #16]
 8002ade:	4413      	add	r3, r2
 8002ae0:	b298      	uxth	r0, r3
 8002ae2:	88ba      	ldrh	r2, [r7, #4]
 8002ae4:	89fb      	ldrh	r3, [r7, #14]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	787a      	ldrb	r2, [r7, #1]
 8002aec:	4619      	mov	r1, r3
 8002aee:	f7ff fc9d 	bl	800242c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8002af2:	88fa      	ldrh	r2, [r7, #6]
 8002af4:	8a3b      	ldrh	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	b298      	uxth	r0, r3
 8002afa:	88ba      	ldrh	r2, [r7, #4]
 8002afc:	89fb      	ldrh	r3, [r7, #14]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	787a      	ldrb	r2, [r7, #1]
 8002b04:	4619      	mov	r1, r3
 8002b06:	f7ff fc91 	bl	800242c <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8002b0a:	88fa      	ldrh	r2, [r7, #6]
 8002b0c:	89fb      	ldrh	r3, [r7, #14]
 8002b0e:	4413      	add	r3, r2
 8002b10:	b298      	uxth	r0, r3
 8002b12:	88ba      	ldrh	r2, [r7, #4]
 8002b14:	8a3b      	ldrh	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	787a      	ldrb	r2, [r7, #1]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f7ff fc85 	bl	800242c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8002b22:	88fa      	ldrh	r2, [r7, #6]
 8002b24:	89fb      	ldrh	r3, [r7, #14]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	b298      	uxth	r0, r3
 8002b2a:	88ba      	ldrh	r2, [r7, #4]
 8002b2c:	8a3b      	ldrh	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	787a      	ldrb	r2, [r7, #1]
 8002b34:	4619      	mov	r1, r3
 8002b36:	f7ff fc79 	bl	800242c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8002b3a:	88fa      	ldrh	r2, [r7, #6]
 8002b3c:	89fb      	ldrh	r3, [r7, #14]
 8002b3e:	4413      	add	r3, r2
 8002b40:	b298      	uxth	r0, r3
 8002b42:	88ba      	ldrh	r2, [r7, #4]
 8002b44:	8a3b      	ldrh	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	787a      	ldrb	r2, [r7, #1]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f7ff fc6d 	bl	800242c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8002b52:	88fa      	ldrh	r2, [r7, #6]
 8002b54:	89fb      	ldrh	r3, [r7, #14]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	b298      	uxth	r0, r3
 8002b5a:	88ba      	ldrh	r2, [r7, #4]
 8002b5c:	8a3b      	ldrh	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	787a      	ldrb	r2, [r7, #1]
 8002b64:	4619      	mov	r1, r3
 8002b66:	f7ff fc61 	bl	800242c <SSD1306_DrawPixel>
    while (x < y) {
 8002b6a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002b6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	f6ff af77 	blt.w	8002a66 <SSD1306_DrawCircle+0x8c>
    }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd90      	pop	{r4, r7, pc}

08002b82 <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8002b82:	b590      	push	{r4, r7, lr}
 8002b84:	b089      	sub	sp, #36	; 0x24
 8002b86:	af02      	add	r7, sp, #8
 8002b88:	4604      	mov	r4, r0
 8002b8a:	4608      	mov	r0, r1
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4623      	mov	r3, r4
 8002b92:	80fb      	strh	r3, [r7, #6]
 8002b94:	4603      	mov	r3, r0
 8002b96:	80bb      	strh	r3, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	807b      	strh	r3, [r7, #2]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002ba0:	887b      	ldrh	r3, [r7, #2]
 8002ba2:	f1c3 0301 	rsb	r3, r3, #1
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002baa:	2301      	movs	r3, #1
 8002bac:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002bae:	887b      	ldrh	r3, [r7, #2]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	03d2      	lsls	r2, r2, #15
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002bc0:	887b      	ldrh	r3, [r7, #2]
 8002bc2:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002bc4:	88f8      	ldrh	r0, [r7, #6]
 8002bc6:	88ba      	ldrh	r2, [r7, #4]
 8002bc8:	887b      	ldrh	r3, [r7, #2]
 8002bca:	4413      	add	r3, r2
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	787a      	ldrb	r2, [r7, #1]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f7ff fc2b 	bl	800242c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8002bd6:	88f8      	ldrh	r0, [r7, #6]
 8002bd8:	88ba      	ldrh	r2, [r7, #4]
 8002bda:	887b      	ldrh	r3, [r7, #2]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	787a      	ldrb	r2, [r7, #1]
 8002be2:	4619      	mov	r1, r3
 8002be4:	f7ff fc22 	bl	800242c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8002be8:	88fa      	ldrh	r2, [r7, #6]
 8002bea:	887b      	ldrh	r3, [r7, #2]
 8002bec:	4413      	add	r3, r2
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	88b9      	ldrh	r1, [r7, #4]
 8002bf2:	787a      	ldrb	r2, [r7, #1]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fc19 	bl	800242c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8002bfa:	88fa      	ldrh	r2, [r7, #6]
 8002bfc:	887b      	ldrh	r3, [r7, #2]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	88b9      	ldrh	r1, [r7, #4]
 8002c04:	787a      	ldrb	r2, [r7, #1]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fc10 	bl	800242c <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8002c0c:	88fa      	ldrh	r2, [r7, #6]
 8002c0e:	887b      	ldrh	r3, [r7, #2]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	b298      	uxth	r0, r3
 8002c14:	88b9      	ldrh	r1, [r7, #4]
 8002c16:	88fa      	ldrh	r2, [r7, #6]
 8002c18:	887b      	ldrh	r3, [r7, #2]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	88bc      	ldrh	r4, [r7, #4]
 8002c20:	787b      	ldrb	r3, [r7, #1]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	4623      	mov	r3, r4
 8002c26:	f7ff fd26 	bl	8002676 <SSD1306_DrawLine>

    while (x < y) {
 8002c2a:	e079      	b.n	8002d20 <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 8002c2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	db0e      	blt.n	8002c52 <SSD1306_DrawFilledCircle+0xd0>
            y--;
 8002c34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8002c40:	8a7b      	ldrh	r3, [r7, #18]
 8002c42:	3302      	adds	r3, #2
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8002c48:	8afa      	ldrh	r2, [r7, #22]
 8002c4a:	8a7b      	ldrh	r3, [r7, #18]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8002c52:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8002c5e:	8abb      	ldrh	r3, [r7, #20]
 8002c60:	3302      	adds	r3, #2
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8002c66:	8afa      	ldrh	r2, [r7, #22]
 8002c68:	8abb      	ldrh	r3, [r7, #20]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8002c70:	88fa      	ldrh	r2, [r7, #6]
 8002c72:	8a3b      	ldrh	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	b298      	uxth	r0, r3
 8002c78:	88ba      	ldrh	r2, [r7, #4]
 8002c7a:	89fb      	ldrh	r3, [r7, #14]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	b299      	uxth	r1, r3
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	8a3b      	ldrh	r3, [r7, #16]
 8002c84:	4413      	add	r3, r2
 8002c86:	b29c      	uxth	r4, r3
 8002c88:	88ba      	ldrh	r2, [r7, #4]
 8002c8a:	89fb      	ldrh	r3, [r7, #14]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	787b      	ldrb	r3, [r7, #1]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	4613      	mov	r3, r2
 8002c96:	4622      	mov	r2, r4
 8002c98:	f7ff fced 	bl	8002676 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8002c9c:	88fa      	ldrh	r2, [r7, #6]
 8002c9e:	8a3b      	ldrh	r3, [r7, #16]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	b298      	uxth	r0, r3
 8002ca4:	88ba      	ldrh	r2, [r7, #4]
 8002ca6:	89fb      	ldrh	r3, [r7, #14]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	b299      	uxth	r1, r3
 8002cac:	88fa      	ldrh	r2, [r7, #6]
 8002cae:	8a3b      	ldrh	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	b29c      	uxth	r4, r3
 8002cb4:	88ba      	ldrh	r2, [r7, #4]
 8002cb6:	89fb      	ldrh	r3, [r7, #14]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	787b      	ldrb	r3, [r7, #1]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	4622      	mov	r2, r4
 8002cc4:	f7ff fcd7 	bl	8002676 <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8002cc8:	88fa      	ldrh	r2, [r7, #6]
 8002cca:	89fb      	ldrh	r3, [r7, #14]
 8002ccc:	4413      	add	r3, r2
 8002cce:	b298      	uxth	r0, r3
 8002cd0:	88ba      	ldrh	r2, [r7, #4]
 8002cd2:	8a3b      	ldrh	r3, [r7, #16]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	b299      	uxth	r1, r3
 8002cd8:	88fa      	ldrh	r2, [r7, #6]
 8002cda:	89fb      	ldrh	r3, [r7, #14]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	b29c      	uxth	r4, r3
 8002ce0:	88ba      	ldrh	r2, [r7, #4]
 8002ce2:	8a3b      	ldrh	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	787b      	ldrb	r3, [r7, #1]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	4613      	mov	r3, r2
 8002cee:	4622      	mov	r2, r4
 8002cf0:	f7ff fcc1 	bl	8002676 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8002cf4:	88fa      	ldrh	r2, [r7, #6]
 8002cf6:	89fb      	ldrh	r3, [r7, #14]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	b298      	uxth	r0, r3
 8002cfc:	88ba      	ldrh	r2, [r7, #4]
 8002cfe:	8a3b      	ldrh	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	b299      	uxth	r1, r3
 8002d04:	88fa      	ldrh	r2, [r7, #6]
 8002d06:	89fb      	ldrh	r3, [r7, #14]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	b29c      	uxth	r4, r3
 8002d0c:	88ba      	ldrh	r2, [r7, #4]
 8002d0e:	8a3b      	ldrh	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	787b      	ldrb	r3, [r7, #1]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	f7ff fcab 	bl	8002676 <SSD1306_DrawLine>
    while (x < y) {
 8002d20:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002d24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	f6ff af7f 	blt.w	8002c2c <SSD1306_DrawFilledCircle+0xaa>
    }
}
 8002d2e:	bf00      	nop
 8002d30:	bf00      	nop
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd90      	pop	{r4, r7, pc}

08002d38 <SSD1306_Clear>:
 


void SSD1306_Clear (void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f7ff fb5d 	bl	80023fc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002d42:	f7ff fb29 	bl	8002398 <SSD1306_UpdateScreen>
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
	//MX_i2c1_Init();
	uint32_t p = 250000;
 8002d52:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <ssd1306_I2C_Init+0x28>)
 8002d54:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002d56:	e002      	b.n	8002d5e <ssd1306_I2C_Init+0x12>
		p--;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f9      	bne.n	8002d58 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_i2c1_Init();
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	0003d090 	.word	0x0003d090

08002d78 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b0c7      	sub	sp, #284	; 0x11c
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	4604      	mov	r4, r0
 8002d80:	4608      	mov	r0, r1
 8002d82:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002d86:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8002d8a:	600a      	str	r2, [r1, #0]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d92:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002d96:	4622      	mov	r2, r4
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d9e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002da2:	4602      	mov	r2, r0
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002daa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002dae:	460a      	mov	r2, r1
 8002db0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002db2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002db6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002dba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002dbe:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002dc2:	7812      	ldrb	r2, [r2, #0]
 8002dc4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002dcc:	e015      	b.n	8002dfa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002dce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002dd2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002dd6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	441a      	add	r2, r3
 8002dde:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002de2:	3301      	adds	r3, #1
 8002de4:	7811      	ldrb	r1, [r2, #0]
 8002de6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002dea:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002dee:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002df0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002df4:	3301      	adds	r3, #1
 8002df6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002dfa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002e04:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002e08:	8812      	ldrh	r2, [r2, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d8df      	bhi.n	8002dce <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002e0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e12:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	b299      	uxth	r1, r3
 8002e1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	f107 020c 	add.w	r2, r7, #12
 8002e2c:	200a      	movs	r0, #10
 8002e2e:	9000      	str	r0, [sp, #0]
 8002e30:	4803      	ldr	r0, [pc, #12]	; (8002e40 <ssd1306_I2C_WriteMulti+0xc8>)
 8002e32:	f000 fed3 	bl	8003bdc <HAL_I2C_Master_Transmit>
}
 8002e36:	bf00      	nop
 8002e38:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd90      	pop	{r4, r7, pc}
 8002e40:	20000134 	.word	0x20000134

08002e44 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71fb      	strb	r3, [r7, #7]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	71bb      	strb	r3, [r7, #6]
 8002e52:	4613      	mov	r3, r2
 8002e54:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002e56:	79bb      	ldrb	r3, [r7, #6]
 8002e58:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002e5a:	797b      	ldrb	r3, [r7, #5]
 8002e5c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	b299      	uxth	r1, r3
 8002e62:	f107 020c 	add.w	r2, r7, #12
 8002e66:	230a      	movs	r3, #10
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	4803      	ldr	r0, [pc, #12]	; (8002e7c <ssd1306_I2C_Write+0x38>)
 8002e6e:	f000 feb5 	bl	8003bdc <HAL_I2C_Master_Transmit>
}
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000134 	.word	0x20000134

08002e80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <HAL_MspInit+0x4c>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	4a0f      	ldr	r2, [pc, #60]	; (8002ecc <HAL_MspInit+0x4c>)
 8002e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e94:	6453      	str	r3, [r2, #68]	; 0x44
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <HAL_MspInit+0x4c>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_MspInit+0x4c>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <HAL_MspInit+0x4c>)
 8002eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_MspInit+0x4c>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800

08002ed0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a19      	ldr	r2, [pc, #100]	; (8002f54 <HAL_I2C_MspInit+0x84>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d12b      	bne.n	8002f4a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <HAL_I2C_MspInit+0x88>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	4a17      	ldr	r2, [pc, #92]	; (8002f58 <HAL_I2C_MspInit+0x88>)
 8002efc:	f043 0302 	orr.w	r3, r3, #2
 8002f00:	6313      	str	r3, [r2, #48]	; 0x30
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_I2C_MspInit+0x88>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f0e:	23c0      	movs	r3, #192	; 0xc0
 8002f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f12:	2312      	movs	r3, #18
 8002f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f1e:	2304      	movs	r3, #4
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f22:	f107 0314 	add.w	r3, r7, #20
 8002f26:	4619      	mov	r1, r3
 8002f28:	480c      	ldr	r0, [pc, #48]	; (8002f5c <HAL_I2C_MspInit+0x8c>)
 8002f2a:	f000 fb5d 	bl	80035e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_I2C_MspInit+0x88>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a08      	ldr	r2, [pc, #32]	; (8002f58 <HAL_I2C_MspInit+0x88>)
 8002f38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_I2C_MspInit+0x88>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f4a:	bf00      	nop
 8002f4c:	3728      	adds	r7, #40	; 0x28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40005400 	.word	0x40005400
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40020400 	.word	0x40020400

08002f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a18      	ldr	r2, [pc, #96]	; (8002fd0 <HAL_TIM_Base_MspInit+0x70>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d116      	bne.n	8002fa0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <HAL_TIM_Base_MspInit+0x74>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <HAL_TIM_Base_MspInit+0x74>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	6453      	str	r3, [r2, #68]	; 0x44
 8002f82:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_TIM_Base_MspInit+0x74>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	2019      	movs	r0, #25
 8002f94:	f000 fae3 	bl	800355e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f98:	2019      	movs	r0, #25
 8002f9a:	f000 fafc 	bl	8003596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f9e:	e012      	b.n	8002fc6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa8:	d10d      	bne.n	8002fc6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_TIM_Base_MspInit+0x74>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	4a08      	ldr	r2, [pc, #32]	; (8002fd4 <HAL_TIM_Base_MspInit+0x74>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_TIM_Base_MspInit+0x74>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
}
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40010000 	.word	0x40010000
 8002fd4:	40023800 	.word	0x40023800

08002fd8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a19      	ldr	r2, [pc, #100]	; (800305c <HAL_TIM_Encoder_MspInit+0x84>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d12b      	bne.n	8003052 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	4b18      	ldr	r3, [pc, #96]	; (8003060 <HAL_TIM_Encoder_MspInit+0x88>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	4a17      	ldr	r2, [pc, #92]	; (8003060 <HAL_TIM_Encoder_MspInit+0x88>)
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	6413      	str	r3, [r2, #64]	; 0x40
 800300a:	4b15      	ldr	r3, [pc, #84]	; (8003060 <HAL_TIM_Encoder_MspInit+0x88>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_TIM_Encoder_MspInit+0x88>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	4a10      	ldr	r2, [pc, #64]	; (8003060 <HAL_TIM_Encoder_MspInit+0x88>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6313      	str	r3, [r2, #48]	; 0x30
 8003026:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_TIM_Encoder_MspInit+0x88>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 8003032:	23c0      	movs	r3, #192	; 0xc0
 8003034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303e:	2300      	movs	r3, #0
 8003040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003042:	2302      	movs	r3, #2
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003046:	f107 0314 	add.w	r3, r7, #20
 800304a:	4619      	mov	r1, r3
 800304c:	4805      	ldr	r0, [pc, #20]	; (8003064 <HAL_TIM_Encoder_MspInit+0x8c>)
 800304e:	f000 facb 	bl	80035e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003052:	bf00      	nop
 8003054:	3728      	adds	r7, #40	; 0x28
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40000400 	.word	0x40000400
 8003060:	40023800 	.word	0x40023800
 8003064:	40020000 	.word	0x40020000

08003068 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003070:	f107 030c 	add.w	r3, r7, #12
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003088:	d11d      	bne.n	80030c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <HAL_TIM_MspPostInit+0x68>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	4a0f      	ldr	r2, [pc, #60]	; (80030d0 <HAL_TIM_MspPostInit+0x68>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6313      	str	r3, [r2, #48]	; 0x30
 800309a:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <HAL_TIM_MspPostInit+0x68>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030a6:	2301      	movs	r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030aa:	2302      	movs	r3, #2
 80030ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030b6:	2301      	movs	r3, #1
 80030b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ba:	f107 030c 	add.w	r3, r7, #12
 80030be:	4619      	mov	r1, r3
 80030c0:	4804      	ldr	r0, [pc, #16]	; (80030d4 <HAL_TIM_MspPostInit+0x6c>)
 80030c2:	f000 fa91 	bl	80035e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80030c6:	bf00      	nop
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40020000 	.word	0x40020000

080030d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030dc:	e7fe      	b.n	80030dc <NMI_Handler+0x4>

080030de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030e2:	e7fe      	b.n	80030e2 <HardFault_Handler+0x4>

080030e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030e8:	e7fe      	b.n	80030e8 <MemManage_Handler+0x4>

080030ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ee:	e7fe      	b.n	80030ee <BusFault_Handler+0x4>

080030f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030f4:	e7fe      	b.n	80030f4 <UsageFault_Handler+0x4>

080030f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030f6:	b480      	push	{r7}
 80030f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003124:	f000 f8d8 	bl	80032d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}

0800312c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_Pin);
 8003130:	2004      	movs	r0, #4
 8003132:	f000 fbf7 	bl	8003924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003140:	4802      	ldr	r0, [pc, #8]	; (800314c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003142:	f002 fdd7 	bl	8005cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000188 	.word	0x20000188

08003150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003158:	4a14      	ldr	r2, [pc, #80]	; (80031ac <_sbrk+0x5c>)
 800315a:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <_sbrk+0x60>)
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003164:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <_sbrk+0x64>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d102      	bne.n	8003172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <_sbrk+0x64>)
 800316e:	4a12      	ldr	r2, [pc, #72]	; (80031b8 <_sbrk+0x68>)
 8003170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <_sbrk+0x64>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	429a      	cmp	r2, r3
 800317e:	d207      	bcs.n	8003190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003180:	f003 fbc0 	bl	8006904 <__errno>
 8003184:	4603      	mov	r3, r0
 8003186:	220c      	movs	r2, #12
 8003188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	e009      	b.n	80031a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003190:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <_sbrk+0x64>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003196:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <_sbrk+0x64>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <_sbrk+0x64>)
 80031a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031a2:	68fb      	ldr	r3, [r7, #12]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20010000 	.word	0x20010000
 80031b0:	00000400 	.word	0x00000400
 80031b4:	200006bc 	.word	0x200006bc
 80031b8:	200006d8 	.word	0x200006d8

080031bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <SystemInit+0x20>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	4a05      	ldr	r2, [pc, #20]	; (80031dc <SystemInit+0x20>)
 80031c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003218 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031e4:	480d      	ldr	r0, [pc, #52]	; (800321c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031e6:	490e      	ldr	r1, [pc, #56]	; (8003220 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031e8:	4a0e      	ldr	r2, [pc, #56]	; (8003224 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031ec:	e002      	b.n	80031f4 <LoopCopyDataInit>

080031ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031f2:	3304      	adds	r3, #4

080031f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031f8:	d3f9      	bcc.n	80031ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031fa:	4a0b      	ldr	r2, [pc, #44]	; (8003228 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031fc:	4c0b      	ldr	r4, [pc, #44]	; (800322c <LoopFillZerobss+0x26>)
  movs r3, #0
 80031fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003200:	e001      	b.n	8003206 <LoopFillZerobss>

08003202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003204:	3204      	adds	r2, #4

08003206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003208:	d3fb      	bcc.n	8003202 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800320a:	f7ff ffd7 	bl	80031bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800320e:	f003 fb7f 	bl	8006910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003212:	f7fe fccd 	bl	8001bb0 <main>
  bx  lr    
 8003216:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003218:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800321c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003220:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003224:	08007b90 	.word	0x08007b90
  ldr r2, =_sbss
 8003228:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800322c:	200006d4 	.word	0x200006d4

08003230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003230:	e7fe      	b.n	8003230 <ADC_IRQHandler>
	...

08003234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003238:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_Init+0x40>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0d      	ldr	r2, [pc, #52]	; (8003274 <HAL_Init+0x40>)
 800323e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_Init+0x40>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <HAL_Init+0x40>)
 800324a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800324e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_Init+0x40>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a07      	ldr	r2, [pc, #28]	; (8003274 <HAL_Init+0x40>)
 8003256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800325c:	2003      	movs	r0, #3
 800325e:	f000 f973 	bl	8003548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003262:	200f      	movs	r0, #15
 8003264:	f000 f808 	bl	8003278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003268:	f7ff fe0a 	bl	8002e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023c00 	.word	0x40023c00

08003278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003280:	4b12      	ldr	r3, [pc, #72]	; (80032cc <HAL_InitTick+0x54>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_InitTick+0x58>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4619      	mov	r1, r3
 800328a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800328e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	4618      	mov	r0, r3
 8003298:	f000 f999 	bl	80035ce <HAL_SYSTICK_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e00e      	b.n	80032c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b0f      	cmp	r3, #15
 80032aa:	d80a      	bhi.n	80032c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ac:	2200      	movs	r2, #0
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	f000 f953 	bl	800355e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032b8:	4a06      	ldr	r2, [pc, #24]	; (80032d4 <HAL_InitTick+0x5c>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000018 	.word	0x20000018
 80032d0:	20000020 	.word	0x20000020
 80032d4:	2000001c 	.word	0x2000001c

080032d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_IncTick+0x20>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_IncTick+0x24>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4413      	add	r3, r2
 80032e8:	4a04      	ldr	r2, [pc, #16]	; (80032fc <HAL_IncTick+0x24>)
 80032ea:	6013      	str	r3, [r2, #0]
}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000020 	.word	0x20000020
 80032fc:	200006c0 	.word	0x200006c0

08003300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return uwTick;
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_GetTick+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	200006c0 	.word	0x200006c0

08003318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003320:	f7ff ffee 	bl	8003300 <HAL_GetTick>
 8003324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d005      	beq.n	800333e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <HAL_Delay+0x44>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800333e:	bf00      	nop
 8003340:	f7ff ffde 	bl	8003300 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	429a      	cmp	r2, r3
 800334e:	d8f7      	bhi.n	8003340 <HAL_Delay+0x28>
  {
  }
}
 8003350:	bf00      	nop
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000020 	.word	0x20000020

08003360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800337c:	4013      	ands	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800338c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003392:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	60d3      	str	r3, [r2, #12]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 0307 	and.w	r3, r3, #7
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	db0b      	blt.n	80033ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	4907      	ldr	r1, [pc, #28]	; (80033fc <__NVIC_EnableIRQ+0x38>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2001      	movs	r0, #1
 80033e6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	e000e100 	.word	0xe000e100

08003400 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340e:	2b00      	cmp	r3, #0
 8003410:	db12      	blt.n	8003438 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	f003 021f 	and.w	r2, r3, #31
 8003418:	490a      	ldr	r1, [pc, #40]	; (8003444 <__NVIC_DisableIRQ+0x44>)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	2001      	movs	r0, #1
 8003422:	fa00 f202 	lsl.w	r2, r0, r2
 8003426:	3320      	adds	r3, #32
 8003428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800342c:	f3bf 8f4f 	dsb	sy
}
 8003430:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003432:	f3bf 8f6f 	isb	sy
}
 8003436:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000e100 	.word	0xe000e100

08003448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	6039      	str	r1, [r7, #0]
 8003452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003458:	2b00      	cmp	r3, #0
 800345a:	db0a      	blt.n	8003472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	b2da      	uxtb	r2, r3
 8003460:	490c      	ldr	r1, [pc, #48]	; (8003494 <__NVIC_SetPriority+0x4c>)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	0112      	lsls	r2, r2, #4
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	440b      	add	r3, r1
 800346c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003470:	e00a      	b.n	8003488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4908      	ldr	r1, [pc, #32]	; (8003498 <__NVIC_SetPriority+0x50>)
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	3b04      	subs	r3, #4
 8003480:	0112      	lsls	r2, r2, #4
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	440b      	add	r3, r1
 8003486:	761a      	strb	r2, [r3, #24]
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000e100 	.word	0xe000e100
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	; 0x24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f1c3 0307 	rsb	r3, r3, #7
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	bf28      	it	cs
 80034ba:	2304      	movcs	r3, #4
 80034bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3304      	adds	r3, #4
 80034c2:	2b06      	cmp	r3, #6
 80034c4:	d902      	bls.n	80034cc <NVIC_EncodePriority+0x30>
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3b03      	subs	r3, #3
 80034ca:	e000      	b.n	80034ce <NVIC_EncodePriority+0x32>
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	f04f 32ff 	mov.w	r2, #4294967295
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43da      	mvns	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	401a      	ands	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e4:	f04f 31ff 	mov.w	r1, #4294967295
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	43d9      	mvns	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f4:	4313      	orrs	r3, r2
         );
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3724      	adds	r7, #36	; 0x24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3b01      	subs	r3, #1
 8003510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003514:	d301      	bcc.n	800351a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003516:	2301      	movs	r3, #1
 8003518:	e00f      	b.n	800353a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351a:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <SysTick_Config+0x40>)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3b01      	subs	r3, #1
 8003520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003522:	210f      	movs	r1, #15
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	f7ff ff8e 	bl	8003448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <SysTick_Config+0x40>)
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003532:	4b04      	ldr	r3, [pc, #16]	; (8003544 <SysTick_Config+0x40>)
 8003534:	2207      	movs	r2, #7
 8003536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	e000e010 	.word	0xe000e010

08003548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ff05 	bl	8003360 <__NVIC_SetPriorityGrouping>
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003570:	f7ff ff1a 	bl	80033a8 <__NVIC_GetPriorityGrouping>
 8003574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	6978      	ldr	r0, [r7, #20]
 800357c:	f7ff ff8e 	bl	800349c <NVIC_EncodePriority>
 8003580:	4602      	mov	r2, r0
 8003582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003586:	4611      	mov	r1, r2
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff5d 	bl	8003448 <__NVIC_SetPriority>
}
 800358e:	bf00      	nop
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	4603      	mov	r3, r0
 800359e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff0d 	bl	80033c4 <__NVIC_EnableIRQ>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	4603      	mov	r3, r0
 80035ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80035bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff ff1d 	bl	8003400 <__NVIC_DisableIRQ>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ff94 	bl	8003504 <SysTick_Config>
 80035dc:	4603      	mov	r3, r0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b089      	sub	sp, #36	; 0x24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	e159      	b.n	80038b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003604:	2201      	movs	r2, #1
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	429a      	cmp	r2, r3
 800361e:	f040 8148 	bne.w	80038b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d005      	beq.n	800363a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003636:	2b02      	cmp	r3, #2
 8003638:	d130      	bne.n	800369c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	2203      	movs	r2, #3
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003670:	2201      	movs	r2, #1
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 0201 	and.w	r2, r3, #1
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d017      	beq.n	80036d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	2203      	movs	r2, #3
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d123      	bne.n	800372c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	08da      	lsrs	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3208      	adds	r2, #8
 80036ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	220f      	movs	r2, #15
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	08da      	lsrs	r2, r3, #3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3208      	adds	r2, #8
 8003726:	69b9      	ldr	r1, [r7, #24]
 8003728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	2203      	movs	r2, #3
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0203 	and.w	r2, r3, #3
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80a2 	beq.w	80038b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	4b57      	ldr	r3, [pc, #348]	; (80038d0 <HAL_GPIO_Init+0x2e8>)
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	4a56      	ldr	r2, [pc, #344]	; (80038d0 <HAL_GPIO_Init+0x2e8>)
 8003778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800377c:	6453      	str	r3, [r2, #68]	; 0x44
 800377e:	4b54      	ldr	r3, [pc, #336]	; (80038d0 <HAL_GPIO_Init+0x2e8>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800378a:	4a52      	ldr	r2, [pc, #328]	; (80038d4 <HAL_GPIO_Init+0x2ec>)
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	3302      	adds	r3, #2
 8003792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	220f      	movs	r2, #15
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4013      	ands	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a49      	ldr	r2, [pc, #292]	; (80038d8 <HAL_GPIO_Init+0x2f0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d019      	beq.n	80037ea <HAL_GPIO_Init+0x202>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a48      	ldr	r2, [pc, #288]	; (80038dc <HAL_GPIO_Init+0x2f4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d013      	beq.n	80037e6 <HAL_GPIO_Init+0x1fe>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a47      	ldr	r2, [pc, #284]	; (80038e0 <HAL_GPIO_Init+0x2f8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00d      	beq.n	80037e2 <HAL_GPIO_Init+0x1fa>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a46      	ldr	r2, [pc, #280]	; (80038e4 <HAL_GPIO_Init+0x2fc>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d007      	beq.n	80037de <HAL_GPIO_Init+0x1f6>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a45      	ldr	r2, [pc, #276]	; (80038e8 <HAL_GPIO_Init+0x300>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <HAL_GPIO_Init+0x1f2>
 80037d6:	2304      	movs	r3, #4
 80037d8:	e008      	b.n	80037ec <HAL_GPIO_Init+0x204>
 80037da:	2307      	movs	r3, #7
 80037dc:	e006      	b.n	80037ec <HAL_GPIO_Init+0x204>
 80037de:	2303      	movs	r3, #3
 80037e0:	e004      	b.n	80037ec <HAL_GPIO_Init+0x204>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e002      	b.n	80037ec <HAL_GPIO_Init+0x204>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <HAL_GPIO_Init+0x204>
 80037ea:	2300      	movs	r3, #0
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	f002 0203 	and.w	r2, r2, #3
 80037f2:	0092      	lsls	r2, r2, #2
 80037f4:	4093      	lsls	r3, r2
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037fc:	4935      	ldr	r1, [pc, #212]	; (80038d4 <HAL_GPIO_Init+0x2ec>)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	089b      	lsrs	r3, r3, #2
 8003802:	3302      	adds	r3, #2
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800380a:	4b38      	ldr	r3, [pc, #224]	; (80038ec <HAL_GPIO_Init+0x304>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800382e:	4a2f      	ldr	r2, [pc, #188]	; (80038ec <HAL_GPIO_Init+0x304>)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003834:	4b2d      	ldr	r3, [pc, #180]	; (80038ec <HAL_GPIO_Init+0x304>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003858:	4a24      	ldr	r2, [pc, #144]	; (80038ec <HAL_GPIO_Init+0x304>)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800385e:	4b23      	ldr	r3, [pc, #140]	; (80038ec <HAL_GPIO_Init+0x304>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003882:	4a1a      	ldr	r2, [pc, #104]	; (80038ec <HAL_GPIO_Init+0x304>)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003888:	4b18      	ldr	r3, [pc, #96]	; (80038ec <HAL_GPIO_Init+0x304>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038ac:	4a0f      	ldr	r2, [pc, #60]	; (80038ec <HAL_GPIO_Init+0x304>)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b0f      	cmp	r3, #15
 80038bc:	f67f aea2 	bls.w	8003604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3724      	adds	r7, #36	; 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40013800 	.word	0x40013800
 80038d8:	40020000 	.word	0x40020000
 80038dc:	40020400 	.word	0x40020400
 80038e0:	40020800 	.word	0x40020800
 80038e4:	40020c00 	.word	0x40020c00
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40013c00 	.word	0x40013c00

080038f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	807b      	strh	r3, [r7, #2]
 80038fc:	4613      	mov	r3, r2
 80038fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003900:	787b      	ldrb	r3, [r7, #1]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003906:	887a      	ldrh	r2, [r7, #2]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800390c:	e003      	b.n	8003916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800390e:	887b      	ldrh	r3, [r7, #2]
 8003910:	041a      	lsls	r2, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	619a      	str	r2, [r3, #24]
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d006      	beq.n	8003948 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800393a:	4a05      	ldr	r2, [pc, #20]	; (8003950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd ff78 	bl	8001838 <HAL_GPIO_EXTI_Callback>
  }
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40013c00 	.word	0x40013c00

08003954 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e12b      	b.n	8003bbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff faa8 	bl	8002ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2224      	movs	r2, #36	; 0x24
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0201 	bic.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039b8:	f001 fe6a 	bl	8005690 <HAL_RCC_GetPCLK1Freq>
 80039bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4a81      	ldr	r2, [pc, #516]	; (8003bc8 <HAL_I2C_Init+0x274>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d807      	bhi.n	80039d8 <HAL_I2C_Init+0x84>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4a80      	ldr	r2, [pc, #512]	; (8003bcc <HAL_I2C_Init+0x278>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	bf94      	ite	ls
 80039d0:	2301      	movls	r3, #1
 80039d2:	2300      	movhi	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	e006      	b.n	80039e6 <HAL_I2C_Init+0x92>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4a7d      	ldr	r2, [pc, #500]	; (8003bd0 <HAL_I2C_Init+0x27c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	bf94      	ite	ls
 80039e0:	2301      	movls	r3, #1
 80039e2:	2300      	movhi	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e0e7      	b.n	8003bbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4a78      	ldr	r2, [pc, #480]	; (8003bd4 <HAL_I2C_Init+0x280>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	0c9b      	lsrs	r3, r3, #18
 80039f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	4a6a      	ldr	r2, [pc, #424]	; (8003bc8 <HAL_I2C_Init+0x274>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d802      	bhi.n	8003a28 <HAL_I2C_Init+0xd4>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3301      	adds	r3, #1
 8003a26:	e009      	b.n	8003a3c <HAL_I2C_Init+0xe8>
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	4a69      	ldr	r2, [pc, #420]	; (8003bd8 <HAL_I2C_Init+0x284>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	099b      	lsrs	r3, r3, #6
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	495c      	ldr	r1, [pc, #368]	; (8003bc8 <HAL_I2C_Init+0x274>)
 8003a58:	428b      	cmp	r3, r1
 8003a5a:	d819      	bhi.n	8003a90 <HAL_I2C_Init+0x13c>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1e59      	subs	r1, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a6a:	1c59      	adds	r1, r3, #1
 8003a6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a70:	400b      	ands	r3, r1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_I2C_Init+0x138>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1e59      	subs	r1, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a84:	3301      	adds	r3, #1
 8003a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8a:	e051      	b.n	8003b30 <HAL_I2C_Init+0x1dc>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	e04f      	b.n	8003b30 <HAL_I2C_Init+0x1dc>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d111      	bne.n	8003abc <HAL_I2C_Init+0x168>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1e58      	subs	r0, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	440b      	add	r3, r1
 8003aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e012      	b.n	8003ae2 <HAL_I2C_Init+0x18e>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1e58      	subs	r0, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	0099      	lsls	r1, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Init+0x196>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e022      	b.n	8003b30 <HAL_I2C_Init+0x1dc>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10e      	bne.n	8003b10 <HAL_I2C_Init+0x1bc>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1e58      	subs	r0, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6859      	ldr	r1, [r3, #4]
 8003afa:	460b      	mov	r3, r1
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	440b      	add	r3, r1
 8003b00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b04:	3301      	adds	r3, #1
 8003b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b0e:	e00f      	b.n	8003b30 <HAL_I2C_Init+0x1dc>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1e58      	subs	r0, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	0099      	lsls	r1, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b26:	3301      	adds	r3, #1
 8003b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	6809      	ldr	r1, [r1, #0]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6911      	ldr	r1, [r2, #16]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68d2      	ldr	r2, [r2, #12]
 8003b6a:	4311      	orrs	r1, r2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	000186a0 	.word	0x000186a0
 8003bcc:	001e847f 	.word	0x001e847f
 8003bd0:	003d08ff 	.word	0x003d08ff
 8003bd4:	431bde83 	.word	0x431bde83
 8003bd8:	10624dd3 	.word	0x10624dd3

08003bdc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	461a      	mov	r2, r3
 8003be8:	460b      	mov	r3, r1
 8003bea:	817b      	strh	r3, [r7, #10]
 8003bec:	4613      	mov	r3, r2
 8003bee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bf0:	f7ff fb86 	bl	8003300 <HAL_GetTick>
 8003bf4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	f040 80e0 	bne.w	8003dc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2319      	movs	r3, #25
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	4970      	ldr	r1, [pc, #448]	; (8003dd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 ff30 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e0d3      	b.n	8003dc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_I2C_Master_Transmit+0x50>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e0cc      	b.n	8003dc6 <HAL_I2C_Master_Transmit+0x1ea>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d007      	beq.n	8003c52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0201 	orr.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2221      	movs	r2, #33	; 0x21
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2210      	movs	r2, #16
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	893a      	ldrh	r2, [r7, #8]
 8003c82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4a50      	ldr	r2, [pc, #320]	; (8003dd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c94:	8979      	ldrh	r1, [r7, #10]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	6a3a      	ldr	r2, [r7, #32]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fcea 	bl	8004674 <I2C_MasterRequestWrite>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e08d      	b.n	8003dc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003cc0:	e066      	b.n	8003d90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	6a39      	ldr	r1, [r7, #32]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 ffaa 	bl	8004c20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00d      	beq.n	8003cee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d107      	bne.n	8003cea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e06b      	b.n	8003dc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	781a      	ldrb	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d11b      	bne.n	8003d64 <HAL_I2C_Master_Transmit+0x188>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d017      	beq.n	8003d64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	781a      	ldrb	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	6a39      	ldr	r1, [r7, #32]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 ff9a 	bl	8004ca2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00d      	beq.n	8003d90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d107      	bne.n	8003d8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e01a      	b.n	8003dc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d194      	bne.n	8003cc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e000      	b.n	8003dc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003dc4:	2302      	movs	r3, #2
  }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	00100002 	.word	0x00100002
 8003dd4:	ffff0000 	.word	0xffff0000

08003dd8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	4608      	mov	r0, r1
 8003de2:	4611      	mov	r1, r2
 8003de4:	461a      	mov	r2, r3
 8003de6:	4603      	mov	r3, r0
 8003de8:	817b      	strh	r3, [r7, #10]
 8003dea:	460b      	mov	r3, r1
 8003dec:	813b      	strh	r3, [r7, #8]
 8003dee:	4613      	mov	r3, r2
 8003df0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003df2:	f7ff fa85 	bl	8003300 <HAL_GetTick>
 8003df6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	f040 80d9 	bne.w	8003fb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	2319      	movs	r3, #25
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	496d      	ldr	r1, [pc, #436]	; (8003fc4 <HAL_I2C_Mem_Write+0x1ec>)
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 fe2f 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e0cc      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_I2C_Mem_Write+0x56>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e0c5      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d007      	beq.n	8003e54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2221      	movs	r2, #33	; 0x21
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2240      	movs	r2, #64	; 0x40
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a3a      	ldr	r2, [r7, #32]
 8003e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4a4d      	ldr	r2, [pc, #308]	; (8003fc8 <HAL_I2C_Mem_Write+0x1f0>)
 8003e94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e96:	88f8      	ldrh	r0, [r7, #6]
 8003e98:	893a      	ldrh	r2, [r7, #8]
 8003e9a:	8979      	ldrh	r1, [r7, #10]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	9301      	str	r3, [sp, #4]
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fc66 	bl	8004778 <I2C_RequestMemoryWrite>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d052      	beq.n	8003f58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e081      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 feb0 	bl	8004c20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00d      	beq.n	8003ee2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d107      	bne.n	8003ede <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003edc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e06b      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	781a      	ldrb	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d11b      	bne.n	8003f58 <HAL_I2C_Mem_Write+0x180>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d017      	beq.n	8003f58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	781a      	ldrb	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1aa      	bne.n	8003eb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 fe9c 	bl	8004ca2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00d      	beq.n	8003f8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d107      	bne.n	8003f88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e016      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e000      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003fb8:	2302      	movs	r3, #2
  }
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	00100002 	.word	0x00100002
 8003fc8:	ffff0000 	.word	0xffff0000

08003fcc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08c      	sub	sp, #48	; 0x30
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	4608      	mov	r0, r1
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4603      	mov	r3, r0
 8003fdc:	817b      	strh	r3, [r7, #10]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	813b      	strh	r3, [r7, #8]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fe6:	f7ff f98b 	bl	8003300 <HAL_GetTick>
 8003fea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	f040 8208 	bne.w	800440a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	2319      	movs	r3, #25
 8004000:	2201      	movs	r2, #1
 8004002:	497b      	ldr	r1, [pc, #492]	; (80041f0 <HAL_I2C_Mem_Read+0x224>)
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 fd35 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
 8004012:	e1fb      	b.n	800440c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_I2C_Mem_Read+0x56>
 800401e:	2302      	movs	r3, #2
 8004020:	e1f4      	b.n	800440c <HAL_I2C_Mem_Read+0x440>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	d007      	beq.n	8004048 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004056:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2222      	movs	r2, #34	; 0x22
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2240      	movs	r2, #64	; 0x40
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004072:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004078:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a5b      	ldr	r2, [pc, #364]	; (80041f4 <HAL_I2C_Mem_Read+0x228>)
 8004088:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800408a:	88f8      	ldrh	r0, [r7, #6]
 800408c:	893a      	ldrh	r2, [r7, #8]
 800408e:	8979      	ldrh	r1, [r7, #10]
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	4603      	mov	r3, r0
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fc02 	bl	80048a4 <I2C_RequestMemoryRead>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e1b0      	b.n	800440c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d113      	bne.n	80040da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b2:	2300      	movs	r3, #0
 80040b4:	623b      	str	r3, [r7, #32]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	623b      	str	r3, [r7, #32]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	623b      	str	r3, [r7, #32]
 80040c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e184      	b.n	80043e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d11b      	bne.n	800411a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e164      	b.n	80043e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411e:	2b02      	cmp	r3, #2
 8004120:	d11b      	bne.n	800415a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004130:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004140:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	61bb      	str	r3, [r7, #24]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	e144      	b.n	80043e4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004170:	e138      	b.n	80043e4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004176:	2b03      	cmp	r3, #3
 8004178:	f200 80f1 	bhi.w	800435e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	2b01      	cmp	r3, #1
 8004182:	d123      	bne.n	80041cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004186:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fdcb 	bl	8004d24 <I2C_WaitOnRXNEFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e139      	b.n	800440c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041ca:	e10b      	b.n	80043e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d14e      	bne.n	8004272 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041da:	2200      	movs	r2, #0
 80041dc:	4906      	ldr	r1, [pc, #24]	; (80041f8 <HAL_I2C_Mem_Read+0x22c>)
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fc48 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d008      	beq.n	80041fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e10e      	b.n	800440c <HAL_I2C_Mem_Read+0x440>
 80041ee:	bf00      	nop
 80041f0:	00100002 	.word	0x00100002
 80041f4:	ffff0000 	.word	0xffff0000
 80041f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004270:	e0b8      	b.n	80043e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	2200      	movs	r2, #0
 800427a:	4966      	ldr	r1, [pc, #408]	; (8004414 <HAL_I2C_Mem_Read+0x448>)
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fbf9 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0bf      	b.n	800440c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800429a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d4:	2200      	movs	r2, #0
 80042d6:	494f      	ldr	r1, [pc, #316]	; (8004414 <HAL_I2C_Mem_Read+0x448>)
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fbcb 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e091      	b.n	800440c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800435c:	e042      	b.n	80043e4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800435e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004360:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fcde 	bl	8004d24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e04c      	b.n	800440c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d118      	bne.n	80043e4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f47f aec2 	bne.w	8004172 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800440a:	2302      	movs	r3, #2
  }
}
 800440c:	4618      	mov	r0, r3
 800440e:	3728      	adds	r7, #40	; 0x28
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	00010004 	.word	0x00010004

08004418 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08a      	sub	sp, #40	; 0x28
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	607a      	str	r2, [r7, #4]
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	460b      	mov	r3, r1
 8004426:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004428:	f7fe ff6a 	bl	8003300 <HAL_GetTick>
 800442c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b20      	cmp	r3, #32
 800443c:	f040 8111 	bne.w	8004662 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	2319      	movs	r3, #25
 8004446:	2201      	movs	r2, #1
 8004448:	4988      	ldr	r1, [pc, #544]	; (800466c <HAL_I2C_IsDeviceReady+0x254>)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fb12 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004456:	2302      	movs	r3, #2
 8004458:	e104      	b.n	8004664 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_I2C_IsDeviceReady+0x50>
 8004464:	2302      	movs	r3, #2
 8004466:	e0fd      	b.n	8004664 <HAL_I2C_IsDeviceReady+0x24c>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b01      	cmp	r3, #1
 800447c:	d007      	beq.n	800448e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800449c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2224      	movs	r2, #36	; 0x24
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4a70      	ldr	r2, [pc, #448]	; (8004670 <HAL_I2C_IsDeviceReady+0x258>)
 80044b0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fad0 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e8:	d103      	bne.n	80044f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e0b6      	b.n	8004664 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044f6:	897b      	ldrh	r3, [r7, #10]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004504:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004506:	f7fe fefb 	bl	8003300 <HAL_GetTick>
 800450a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b02      	cmp	r3, #2
 8004518:	bf0c      	ite	eq
 800451a:	2301      	moveq	r3, #1
 800451c:	2300      	movne	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800452c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004530:	bf0c      	ite	eq
 8004532:	2301      	moveq	r3, #1
 8004534:	2300      	movne	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800453a:	e025      	b.n	8004588 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800453c:	f7fe fee0 	bl	8003300 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d302      	bcc.n	8004552 <HAL_I2C_IsDeviceReady+0x13a>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d103      	bne.n	800455a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	22a0      	movs	r2, #160	; 0xa0
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b02      	cmp	r3, #2
 8004566:	bf0c      	ite	eq
 8004568:	2301      	moveq	r3, #1
 800456a:	2300      	movne	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2ba0      	cmp	r3, #160	; 0xa0
 8004592:	d005      	beq.n	80045a0 <HAL_I2C_IsDeviceReady+0x188>
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d102      	bne.n	80045a0 <HAL_I2C_IsDeviceReady+0x188>
 800459a:	7dbb      	ldrb	r3, [r7, #22]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0cd      	beq.n	800453c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d129      	bne.n	800460a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c6:	2300      	movs	r3, #0
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	2319      	movs	r3, #25
 80045e2:	2201      	movs	r2, #1
 80045e4:	4921      	ldr	r1, [pc, #132]	; (800466c <HAL_I2C_IsDeviceReady+0x254>)
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fa44 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e036      	b.n	8004664 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e02c      	b.n	8004664 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004618:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004622:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	2319      	movs	r3, #25
 800462a:	2201      	movs	r2, #1
 800462c:	490f      	ldr	r1, [pc, #60]	; (800466c <HAL_I2C_IsDeviceReady+0x254>)
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 fa20 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e012      	b.n	8004664 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	3301      	adds	r3, #1
 8004642:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	429a      	cmp	r2, r3
 800464a:	f4ff af32 	bcc.w	80044b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004662:	2302      	movs	r3, #2
  }
}
 8004664:	4618      	mov	r0, r3
 8004666:	3720      	adds	r7, #32
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	00100002 	.word	0x00100002
 8004670:	ffff0000 	.word	0xffff0000

08004674 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	607a      	str	r2, [r7, #4]
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	460b      	mov	r3, r1
 8004682:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b08      	cmp	r3, #8
 800468e:	d006      	beq.n	800469e <I2C_MasterRequestWrite+0x2a>
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d003      	beq.n	800469e <I2C_MasterRequestWrite+0x2a>
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800469c:	d108      	bne.n	80046b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	e00b      	b.n	80046c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	2b12      	cmp	r3, #18
 80046b6:	d107      	bne.n	80046c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f9cd 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00d      	beq.n	80046fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ee:	d103      	bne.n	80046f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e035      	b.n	8004768 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004704:	d108      	bne.n	8004718 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004706:	897b      	ldrh	r3, [r7, #10]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	461a      	mov	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004714:	611a      	str	r2, [r3, #16]
 8004716:	e01b      	b.n	8004750 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004718:	897b      	ldrh	r3, [r7, #10]
 800471a:	11db      	asrs	r3, r3, #7
 800471c:	b2db      	uxtb	r3, r3
 800471e:	f003 0306 	and.w	r3, r3, #6
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f063 030f 	orn	r3, r3, #15
 8004728:	b2da      	uxtb	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	490e      	ldr	r1, [pc, #56]	; (8004770 <I2C_MasterRequestWrite+0xfc>)
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 f9f3 	bl	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e010      	b.n	8004768 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004746:	897b      	ldrh	r3, [r7, #10]
 8004748:	b2da      	uxtb	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	4907      	ldr	r1, [pc, #28]	; (8004774 <I2C_MasterRequestWrite+0x100>)
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f9e3 	bl	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	00010008 	.word	0x00010008
 8004774:	00010002 	.word	0x00010002

08004778 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af02      	add	r7, sp, #8
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	4608      	mov	r0, r1
 8004782:	4611      	mov	r1, r2
 8004784:	461a      	mov	r2, r3
 8004786:	4603      	mov	r3, r0
 8004788:	817b      	strh	r3, [r7, #10]
 800478a:	460b      	mov	r3, r1
 800478c:	813b      	strh	r3, [r7, #8]
 800478e:	4613      	mov	r3, r2
 8004790:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f960 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c8:	d103      	bne.n	80047d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e05f      	b.n	8004896 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047d6:	897b      	ldrh	r3, [r7, #10]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	6a3a      	ldr	r2, [r7, #32]
 80047ea:	492d      	ldr	r1, [pc, #180]	; (80048a0 <I2C_RequestMemoryWrite+0x128>)
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f998 	bl	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e04c      	b.n	8004896 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004814:	6a39      	ldr	r1, [r7, #32]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 fa02 	bl	8004c20 <I2C_WaitOnTXEFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00d      	beq.n	800483e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	2b04      	cmp	r3, #4
 8004828:	d107      	bne.n	800483a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004838:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e02b      	b.n	8004896 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d105      	bne.n	8004850 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004844:	893b      	ldrh	r3, [r7, #8]
 8004846:	b2da      	uxtb	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	611a      	str	r2, [r3, #16]
 800484e:	e021      	b.n	8004894 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004850:	893b      	ldrh	r3, [r7, #8]
 8004852:	0a1b      	lsrs	r3, r3, #8
 8004854:	b29b      	uxth	r3, r3
 8004856:	b2da      	uxtb	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800485e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004860:	6a39      	ldr	r1, [r7, #32]
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f9dc 	bl	8004c20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00d      	beq.n	800488a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	2b04      	cmp	r3, #4
 8004874:	d107      	bne.n	8004886 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004884:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e005      	b.n	8004896 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800488a:	893b      	ldrh	r3, [r7, #8]
 800488c:	b2da      	uxtb	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	00010002 	.word	0x00010002

080048a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	4608      	mov	r0, r1
 80048ae:	4611      	mov	r1, r2
 80048b0:	461a      	mov	r2, r3
 80048b2:	4603      	mov	r3, r0
 80048b4:	817b      	strh	r3, [r7, #10]
 80048b6:	460b      	mov	r3, r1
 80048b8:	813b      	strh	r3, [r7, #8]
 80048ba:	4613      	mov	r3, r2
 80048bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 f8c2 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00d      	beq.n	8004912 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004904:	d103      	bne.n	800490e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800490c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e0aa      	b.n	8004a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004912:	897b      	ldrh	r3, [r7, #10]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004920:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	6a3a      	ldr	r2, [r7, #32]
 8004926:	4952      	ldr	r1, [pc, #328]	; (8004a70 <I2C_RequestMemoryRead+0x1cc>)
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f8fa 	bl	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e097      	b.n	8004a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800494e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004950:	6a39      	ldr	r1, [r7, #32]
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f964 	bl	8004c20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00d      	beq.n	800497a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	2b04      	cmp	r3, #4
 8004964:	d107      	bne.n	8004976 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004974:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e076      	b.n	8004a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d105      	bne.n	800498c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004980:	893b      	ldrh	r3, [r7, #8]
 8004982:	b2da      	uxtb	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	611a      	str	r2, [r3, #16]
 800498a:	e021      	b.n	80049d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800498c:	893b      	ldrh	r3, [r7, #8]
 800498e:	0a1b      	lsrs	r3, r3, #8
 8004990:	b29b      	uxth	r3, r3
 8004992:	b2da      	uxtb	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800499a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499c:	6a39      	ldr	r1, [r7, #32]
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 f93e 	bl	8004c20 <I2C_WaitOnTXEFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00d      	beq.n	80049c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d107      	bne.n	80049c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e050      	b.n	8004a68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049c6:	893b      	ldrh	r3, [r7, #8]
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d2:	6a39      	ldr	r1, [r7, #32]
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f923 	bl	8004c20 <I2C_WaitOnTXEFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00d      	beq.n	80049fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d107      	bne.n	80049f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e035      	b.n	8004a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 f82b 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00d      	beq.n	8004a40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a32:	d103      	bne.n	8004a3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e013      	b.n	8004a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a40:	897b      	ldrh	r3, [r7, #10]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f043 0301 	orr.w	r3, r3, #1
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	6a3a      	ldr	r2, [r7, #32]
 8004a54:	4906      	ldr	r1, [pc, #24]	; (8004a70 <I2C_RequestMemoryRead+0x1cc>)
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f863 	bl	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	00010002 	.word	0x00010002

08004a74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	4613      	mov	r3, r2
 8004a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a84:	e025      	b.n	8004ad2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8c:	d021      	beq.n	8004ad2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8e:	f7fe fc37 	bl	8003300 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d302      	bcc.n	8004aa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d116      	bne.n	8004ad2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f043 0220 	orr.w	r2, r3, #32
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e023      	b.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	0c1b      	lsrs	r3, r3, #16
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d10d      	bne.n	8004af8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	43da      	mvns	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	bf0c      	ite	eq
 8004aee:	2301      	moveq	r3, #1
 8004af0:	2300      	movne	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	e00c      	b.n	8004b12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	43da      	mvns	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4013      	ands	r3, r2
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bf0c      	ite	eq
 8004b0a:	2301      	moveq	r3, #1
 8004b0c:	2300      	movne	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	461a      	mov	r2, r3
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d0b6      	beq.n	8004a86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b30:	e051      	b.n	8004bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b40:	d123      	bne.n	8004b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f043 0204 	orr.w	r2, r3, #4
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e046      	b.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b90:	d021      	beq.n	8004bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b92:	f7fe fbb5 	bl	8003300 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d302      	bcc.n	8004ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d116      	bne.n	8004bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	f043 0220 	orr.w	r2, r3, #32
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e020      	b.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	0c1b      	lsrs	r3, r3, #16
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d10c      	bne.n	8004bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	43da      	mvns	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4013      	ands	r3, r2
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	bf14      	ite	ne
 8004bf2:	2301      	movne	r3, #1
 8004bf4:	2300      	moveq	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	e00b      	b.n	8004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	43da      	mvns	r2, r3
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4013      	ands	r3, r2
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bf14      	ite	ne
 8004c0c:	2301      	movne	r3, #1
 8004c0e:	2300      	moveq	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d18d      	bne.n	8004b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c2c:	e02d      	b.n	8004c8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f8ce 	bl	8004dd0 <I2C_IsAcknowledgeFailed>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e02d      	b.n	8004c9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d021      	beq.n	8004c8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c46:	f7fe fb5b 	bl	8003300 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d116      	bne.n	8004c8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0220 	orr.w	r2, r3, #32
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e007      	b.n	8004c9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c94:	2b80      	cmp	r3, #128	; 0x80
 8004c96:	d1ca      	bne.n	8004c2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cae:	e02d      	b.n	8004d0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 f88d 	bl	8004dd0 <I2C_IsAcknowledgeFailed>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e02d      	b.n	8004d1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc6:	d021      	beq.n	8004d0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc8:	f7fe fb1a 	bl	8003300 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d302      	bcc.n	8004cde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d116      	bne.n	8004d0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	f043 0220 	orr.w	r2, r3, #32
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e007      	b.n	8004d1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d1ca      	bne.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d30:	e042      	b.n	8004db8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b10      	cmp	r3, #16
 8004d3e:	d119      	bne.n	8004d74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0210 	mvn.w	r2, #16
 8004d48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e029      	b.n	8004dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d74:	f7fe fac4 	bl	8003300 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d302      	bcc.n	8004d8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d116      	bne.n	8004db8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	f043 0220 	orr.w	r2, r3, #32
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e007      	b.n	8004dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d1b5      	bne.n	8004d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de6:	d11b      	bne.n	8004e20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004df0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	f043 0204 	orr.w	r2, r3, #4
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e267      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d075      	beq.n	8004f3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e4e:	4b88      	ldr	r3, [pc, #544]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d00c      	beq.n	8004e74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e5a:	4b85      	ldr	r3, [pc, #532]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d112      	bne.n	8004e8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e66:	4b82      	ldr	r3, [pc, #520]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e72:	d10b      	bne.n	8004e8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e74:	4b7e      	ldr	r3, [pc, #504]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d05b      	beq.n	8004f38 <HAL_RCC_OscConfig+0x108>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d157      	bne.n	8004f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e242      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e94:	d106      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x74>
 8004e96:	4b76      	ldr	r3, [pc, #472]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a75      	ldr	r2, [pc, #468]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	e01d      	b.n	8004ee0 <HAL_RCC_OscConfig+0xb0>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x98>
 8004eae:	4b70      	ldr	r3, [pc, #448]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a6f      	ldr	r2, [pc, #444]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	4b6d      	ldr	r3, [pc, #436]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a6c      	ldr	r2, [pc, #432]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e00b      	b.n	8004ee0 <HAL_RCC_OscConfig+0xb0>
 8004ec8:	4b69      	ldr	r3, [pc, #420]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a68      	ldr	r2, [pc, #416]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	4b66      	ldr	r3, [pc, #408]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a65      	ldr	r2, [pc, #404]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d013      	beq.n	8004f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee8:	f7fe fa0a 	bl	8003300 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ef0:	f7fe fa06 	bl	8003300 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	; 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e207      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f02:	4b5b      	ldr	r3, [pc, #364]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCC_OscConfig+0xc0>
 8004f0e:	e014      	b.n	8004f3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f10:	f7fe f9f6 	bl	8003300 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f18:	f7fe f9f2 	bl	8003300 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	; 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e1f3      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f2a:	4b51      	ldr	r3, [pc, #324]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0xe8>
 8004f36:	e000      	b.n	8004f3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d063      	beq.n	800500e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f46:	4b4a      	ldr	r3, [pc, #296]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 030c 	and.w	r3, r3, #12
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00b      	beq.n	8004f6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f52:	4b47      	ldr	r3, [pc, #284]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d11c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f5e:	4b44      	ldr	r3, [pc, #272]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d116      	bne.n	8004f98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f6a:	4b41      	ldr	r3, [pc, #260]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <HAL_RCC_OscConfig+0x152>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d001      	beq.n	8004f82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e1c7      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f82:	4b3b      	ldr	r3, [pc, #236]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4937      	ldr	r1, [pc, #220]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f96:	e03a      	b.n	800500e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d020      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fa0:	4b34      	ldr	r3, [pc, #208]	; (8005074 <HAL_RCC_OscConfig+0x244>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa6:	f7fe f9ab 	bl	8003300 <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fae:	f7fe f9a7 	bl	8003300 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e1a8      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc0:	4b2b      	ldr	r3, [pc, #172]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fcc:	4b28      	ldr	r3, [pc, #160]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	4925      	ldr	r1, [pc, #148]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	600b      	str	r3, [r1, #0]
 8004fe0:	e015      	b.n	800500e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fe2:	4b24      	ldr	r3, [pc, #144]	; (8005074 <HAL_RCC_OscConfig+0x244>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe8:	f7fe f98a 	bl	8003300 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ff0:	f7fe f986 	bl	8003300 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e187      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005002:	4b1b      	ldr	r3, [pc, #108]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f0      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d036      	beq.n	8005088 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d016      	beq.n	8005050 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005022:	4b15      	ldr	r3, [pc, #84]	; (8005078 <HAL_RCC_OscConfig+0x248>)
 8005024:	2201      	movs	r2, #1
 8005026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005028:	f7fe f96a 	bl	8003300 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005030:	f7fe f966 	bl	8003300 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e167      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8005044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f0      	beq.n	8005030 <HAL_RCC_OscConfig+0x200>
 800504e:	e01b      	b.n	8005088 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005050:	4b09      	ldr	r3, [pc, #36]	; (8005078 <HAL_RCC_OscConfig+0x248>)
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005056:	f7fe f953 	bl	8003300 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800505c:	e00e      	b.n	800507c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800505e:	f7fe f94f 	bl	8003300 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d907      	bls.n	800507c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e150      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
 8005070:	40023800 	.word	0x40023800
 8005074:	42470000 	.word	0x42470000
 8005078:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800507c:	4b88      	ldr	r3, [pc, #544]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 800507e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1ea      	bne.n	800505e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8097 	beq.w	80051c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005096:	2300      	movs	r3, #0
 8005098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800509a:	4b81      	ldr	r3, [pc, #516]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10f      	bne.n	80050c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	4b7d      	ldr	r3, [pc, #500]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	4a7c      	ldr	r2, [pc, #496]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 80050b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b4:	6413      	str	r3, [r2, #64]	; 0x40
 80050b6:	4b7a      	ldr	r3, [pc, #488]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050c2:	2301      	movs	r3, #1
 80050c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c6:	4b77      	ldr	r3, [pc, #476]	; (80052a4 <HAL_RCC_OscConfig+0x474>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d118      	bne.n	8005104 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050d2:	4b74      	ldr	r3, [pc, #464]	; (80052a4 <HAL_RCC_OscConfig+0x474>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a73      	ldr	r2, [pc, #460]	; (80052a4 <HAL_RCC_OscConfig+0x474>)
 80050d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050de:	f7fe f90f 	bl	8003300 <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e6:	f7fe f90b 	bl	8003300 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e10c      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f8:	4b6a      	ldr	r3, [pc, #424]	; (80052a4 <HAL_RCC_OscConfig+0x474>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0f0      	beq.n	80050e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d106      	bne.n	800511a <HAL_RCC_OscConfig+0x2ea>
 800510c:	4b64      	ldr	r3, [pc, #400]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 800510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005110:	4a63      	ldr	r2, [pc, #396]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	6713      	str	r3, [r2, #112]	; 0x70
 8005118:	e01c      	b.n	8005154 <HAL_RCC_OscConfig+0x324>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b05      	cmp	r3, #5
 8005120:	d10c      	bne.n	800513c <HAL_RCC_OscConfig+0x30c>
 8005122:	4b5f      	ldr	r3, [pc, #380]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	4a5e      	ldr	r2, [pc, #376]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005128:	f043 0304 	orr.w	r3, r3, #4
 800512c:	6713      	str	r3, [r2, #112]	; 0x70
 800512e:	4b5c      	ldr	r3, [pc, #368]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	4a5b      	ldr	r2, [pc, #364]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005134:	f043 0301 	orr.w	r3, r3, #1
 8005138:	6713      	str	r3, [r2, #112]	; 0x70
 800513a:	e00b      	b.n	8005154 <HAL_RCC_OscConfig+0x324>
 800513c:	4b58      	ldr	r3, [pc, #352]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 800513e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005140:	4a57      	ldr	r2, [pc, #348]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	6713      	str	r3, [r2, #112]	; 0x70
 8005148:	4b55      	ldr	r3, [pc, #340]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 800514a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514c:	4a54      	ldr	r2, [pc, #336]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 800514e:	f023 0304 	bic.w	r3, r3, #4
 8005152:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d015      	beq.n	8005188 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515c:	f7fe f8d0 	bl	8003300 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005162:	e00a      	b.n	800517a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005164:	f7fe f8cc 	bl	8003300 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005172:	4293      	cmp	r3, r2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e0cb      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517a:	4b49      	ldr	r3, [pc, #292]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0ee      	beq.n	8005164 <HAL_RCC_OscConfig+0x334>
 8005186:	e014      	b.n	80051b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005188:	f7fe f8ba 	bl	8003300 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518e:	e00a      	b.n	80051a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005190:	f7fe f8b6 	bl	8003300 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f241 3288 	movw	r2, #5000	; 0x1388
 800519e:	4293      	cmp	r3, r2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e0b5      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a6:	4b3e      	ldr	r3, [pc, #248]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1ee      	bne.n	8005190 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d105      	bne.n	80051c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b8:	4b39      	ldr	r3, [pc, #228]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	4a38      	ldr	r2, [pc, #224]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 80051be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80a1 	beq.w	8005310 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051ce:	4b34      	ldr	r3, [pc, #208]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 030c 	and.w	r3, r3, #12
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d05c      	beq.n	8005294 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d141      	bne.n	8005266 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e2:	4b31      	ldr	r3, [pc, #196]	; (80052a8 <HAL_RCC_OscConfig+0x478>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fe f88a 	bl	8003300 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f0:	f7fe f886 	bl	8003300 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e087      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005202:	4b27      	ldr	r3, [pc, #156]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69da      	ldr	r2, [r3, #28]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	019b      	lsls	r3, r3, #6
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	085b      	lsrs	r3, r3, #1
 8005226:	3b01      	subs	r3, #1
 8005228:	041b      	lsls	r3, r3, #16
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	061b      	lsls	r3, r3, #24
 8005232:	491b      	ldr	r1, [pc, #108]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005234:	4313      	orrs	r3, r2
 8005236:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005238:	4b1b      	ldr	r3, [pc, #108]	; (80052a8 <HAL_RCC_OscConfig+0x478>)
 800523a:	2201      	movs	r2, #1
 800523c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523e:	f7fe f85f 	bl	8003300 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005246:	f7fe f85b 	bl	8003300 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e05c      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005258:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0f0      	beq.n	8005246 <HAL_RCC_OscConfig+0x416>
 8005264:	e054      	b.n	8005310 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005266:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <HAL_RCC_OscConfig+0x478>)
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526c:	f7fe f848 	bl	8003300 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005274:	f7fe f844 	bl	8003300 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e045      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005286:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f0      	bne.n	8005274 <HAL_RCC_OscConfig+0x444>
 8005292:	e03d      	b.n	8005310 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d107      	bne.n	80052ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e038      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
 80052a0:	40023800 	.word	0x40023800
 80052a4:	40007000 	.word	0x40007000
 80052a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052ac:	4b1b      	ldr	r3, [pc, #108]	; (800531c <HAL_RCC_OscConfig+0x4ec>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d028      	beq.n	800530c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d121      	bne.n	800530c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d11a      	bne.n	800530c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052dc:	4013      	ands	r3, r2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d111      	bne.n	800530c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f2:	085b      	lsrs	r3, r3, #1
 80052f4:	3b01      	subs	r3, #1
 80052f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d107      	bne.n	800530c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005308:	429a      	cmp	r2, r3
 800530a:	d001      	beq.n	8005310 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e000      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	40023800 	.word	0x40023800

08005320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0cc      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005334:	4b68      	ldr	r3, [pc, #416]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d90c      	bls.n	800535c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005342:	4b65      	ldr	r3, [pc, #404]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800534a:	4b63      	ldr	r3, [pc, #396]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e0b8      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d020      	beq.n	80053aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005374:	4b59      	ldr	r3, [pc, #356]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	4a58      	ldr	r2, [pc, #352]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800537e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800538c:	4b53      	ldr	r3, [pc, #332]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4a52      	ldr	r2, [pc, #328]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005398:	4b50      	ldr	r3, [pc, #320]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	494d      	ldr	r1, [pc, #308]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d044      	beq.n	8005440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d107      	bne.n	80053ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053be:	4b47      	ldr	r3, [pc, #284]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d119      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e07f      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d003      	beq.n	80053de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d107      	bne.n	80053ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053de:	4b3f      	ldr	r3, [pc, #252]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d109      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e06f      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ee:	4b3b      	ldr	r3, [pc, #236]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e067      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053fe:	4b37      	ldr	r3, [pc, #220]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f023 0203 	bic.w	r2, r3, #3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	4934      	ldr	r1, [pc, #208]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	4313      	orrs	r3, r2
 800540e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005410:	f7fd ff76 	bl	8003300 <HAL_GetTick>
 8005414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005416:	e00a      	b.n	800542e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005418:	f7fd ff72 	bl	8003300 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	f241 3288 	movw	r2, #5000	; 0x1388
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e04f      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542e:	4b2b      	ldr	r3, [pc, #172]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 020c 	and.w	r2, r3, #12
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	429a      	cmp	r2, r3
 800543e:	d1eb      	bne.n	8005418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005440:	4b25      	ldr	r3, [pc, #148]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d20c      	bcs.n	8005468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544e:	4b22      	ldr	r3, [pc, #136]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005456:	4b20      	ldr	r3, [pc, #128]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d001      	beq.n	8005468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e032      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005474:	4b19      	ldr	r3, [pc, #100]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	4916      	ldr	r1, [pc, #88]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	4313      	orrs	r3, r2
 8005484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005492:	4b12      	ldr	r3, [pc, #72]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	490e      	ldr	r1, [pc, #56]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054a6:	f000 f821 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 80054aa:	4602      	mov	r2, r0
 80054ac:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	091b      	lsrs	r3, r3, #4
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	490a      	ldr	r1, [pc, #40]	; (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 80054b8:	5ccb      	ldrb	r3, [r1, r3]
 80054ba:	fa22 f303 	lsr.w	r3, r2, r3
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80054c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <HAL_RCC_ClockConfig+0x1c8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fd fed6 	bl	8003278 <HAL_InitTick>

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40023c00 	.word	0x40023c00
 80054dc:	40023800 	.word	0x40023800
 80054e0:	08007b34 	.word	0x08007b34
 80054e4:	20000018 	.word	0x20000018
 80054e8:	2000001c 	.word	0x2000001c

080054ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054f0:	b090      	sub	sp, #64	; 0x40
 80054f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	637b      	str	r3, [r7, #52]	; 0x34
 80054f8:	2300      	movs	r3, #0
 80054fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054fc:	2300      	movs	r3, #0
 80054fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005504:	4b59      	ldr	r3, [pc, #356]	; (800566c <HAL_RCC_GetSysClockFreq+0x180>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 030c 	and.w	r3, r3, #12
 800550c:	2b08      	cmp	r3, #8
 800550e:	d00d      	beq.n	800552c <HAL_RCC_GetSysClockFreq+0x40>
 8005510:	2b08      	cmp	r3, #8
 8005512:	f200 80a1 	bhi.w	8005658 <HAL_RCC_GetSysClockFreq+0x16c>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_RCC_GetSysClockFreq+0x34>
 800551a:	2b04      	cmp	r3, #4
 800551c:	d003      	beq.n	8005526 <HAL_RCC_GetSysClockFreq+0x3a>
 800551e:	e09b      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005520:	4b53      	ldr	r3, [pc, #332]	; (8005670 <HAL_RCC_GetSysClockFreq+0x184>)
 8005522:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005524:	e09b      	b.n	800565e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005526:	4b53      	ldr	r3, [pc, #332]	; (8005674 <HAL_RCC_GetSysClockFreq+0x188>)
 8005528:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800552a:	e098      	b.n	800565e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800552c:	4b4f      	ldr	r3, [pc, #316]	; (800566c <HAL_RCC_GetSysClockFreq+0x180>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005536:	4b4d      	ldr	r3, [pc, #308]	; (800566c <HAL_RCC_GetSysClockFreq+0x180>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d028      	beq.n	8005594 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005542:	4b4a      	ldr	r3, [pc, #296]	; (800566c <HAL_RCC_GetSysClockFreq+0x180>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	099b      	lsrs	r3, r3, #6
 8005548:	2200      	movs	r2, #0
 800554a:	623b      	str	r3, [r7, #32]
 800554c:	627a      	str	r2, [r7, #36]	; 0x24
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005554:	2100      	movs	r1, #0
 8005556:	4b47      	ldr	r3, [pc, #284]	; (8005674 <HAL_RCC_GetSysClockFreq+0x188>)
 8005558:	fb03 f201 	mul.w	r2, r3, r1
 800555c:	2300      	movs	r3, #0
 800555e:	fb00 f303 	mul.w	r3, r0, r3
 8005562:	4413      	add	r3, r2
 8005564:	4a43      	ldr	r2, [pc, #268]	; (8005674 <HAL_RCC_GetSysClockFreq+0x188>)
 8005566:	fba0 1202 	umull	r1, r2, r0, r2
 800556a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800556c:	460a      	mov	r2, r1
 800556e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005572:	4413      	add	r3, r2
 8005574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005578:	2200      	movs	r2, #0
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	61fa      	str	r2, [r7, #28]
 800557e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005582:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005586:	f7fb f9b1 	bl	80008ec <__aeabi_uldivmod>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4613      	mov	r3, r2
 8005590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005592:	e053      	b.n	800563c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005594:	4b35      	ldr	r3, [pc, #212]	; (800566c <HAL_RCC_GetSysClockFreq+0x180>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	099b      	lsrs	r3, r3, #6
 800559a:	2200      	movs	r2, #0
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	617a      	str	r2, [r7, #20]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80055a6:	f04f 0b00 	mov.w	fp, #0
 80055aa:	4652      	mov	r2, sl
 80055ac:	465b      	mov	r3, fp
 80055ae:	f04f 0000 	mov.w	r0, #0
 80055b2:	f04f 0100 	mov.w	r1, #0
 80055b6:	0159      	lsls	r1, r3, #5
 80055b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055bc:	0150      	lsls	r0, r2, #5
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	ebb2 080a 	subs.w	r8, r2, sl
 80055c6:	eb63 090b 	sbc.w	r9, r3, fp
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80055d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80055da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80055de:	ebb2 0408 	subs.w	r4, r2, r8
 80055e2:	eb63 0509 	sbc.w	r5, r3, r9
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	00eb      	lsls	r3, r5, #3
 80055f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055f4:	00e2      	lsls	r2, r4, #3
 80055f6:	4614      	mov	r4, r2
 80055f8:	461d      	mov	r5, r3
 80055fa:	eb14 030a 	adds.w	r3, r4, sl
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	eb45 030b 	adc.w	r3, r5, fp
 8005604:	607b      	str	r3, [r7, #4]
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005612:	4629      	mov	r1, r5
 8005614:	028b      	lsls	r3, r1, #10
 8005616:	4621      	mov	r1, r4
 8005618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800561c:	4621      	mov	r1, r4
 800561e:	028a      	lsls	r2, r1, #10
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005626:	2200      	movs	r2, #0
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	60fa      	str	r2, [r7, #12]
 800562c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005630:	f7fb f95c 	bl	80008ec <__aeabi_uldivmod>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4613      	mov	r3, r2
 800563a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800563c:	4b0b      	ldr	r3, [pc, #44]	; (800566c <HAL_RCC_GetSysClockFreq+0x180>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	0c1b      	lsrs	r3, r3, #16
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	3301      	adds	r3, #1
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800564c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	fbb2 f3f3 	udiv	r3, r2, r3
 8005654:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005656:	e002      	b.n	800565e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <HAL_RCC_GetSysClockFreq+0x184>)
 800565a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800565c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005660:	4618      	mov	r0, r3
 8005662:	3740      	adds	r7, #64	; 0x40
 8005664:	46bd      	mov	sp, r7
 8005666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800566a:	bf00      	nop
 800566c:	40023800 	.word	0x40023800
 8005670:	00f42400 	.word	0x00f42400
 8005674:	017d7840 	.word	0x017d7840

08005678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800567c:	4b03      	ldr	r3, [pc, #12]	; (800568c <HAL_RCC_GetHCLKFreq+0x14>)
 800567e:	681b      	ldr	r3, [r3, #0]
}
 8005680:	4618      	mov	r0, r3
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	20000018 	.word	0x20000018

08005690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005694:	f7ff fff0 	bl	8005678 <HAL_RCC_GetHCLKFreq>
 8005698:	4602      	mov	r2, r0
 800569a:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	0a9b      	lsrs	r3, r3, #10
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	4903      	ldr	r1, [pc, #12]	; (80056b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056a6:	5ccb      	ldrb	r3, [r1, r3]
 80056a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40023800 	.word	0x40023800
 80056b4:	08007b44 	.word	0x08007b44

080056b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e041      	b.n	800574e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fd fc3e 	bl	8002f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3304      	adds	r3, #4
 80056f4:	4619      	mov	r1, r3
 80056f6:	4610      	mov	r0, r2
 80056f8:	f000 fdb6 	bl	8006268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b01      	cmp	r3, #1
 800576a:	d001      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e044      	b.n	80057fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0201 	orr.w	r2, r2, #1
 8005786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <HAL_TIM_Base_Start_IT+0xb0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d018      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x6c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579a:	d013      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x6c>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1a      	ldr	r2, [pc, #104]	; (800580c <HAL_TIM_Base_Start_IT+0xb4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00e      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x6c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a19      	ldr	r2, [pc, #100]	; (8005810 <HAL_TIM_Base_Start_IT+0xb8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d009      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x6c>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a17      	ldr	r2, [pc, #92]	; (8005814 <HAL_TIM_Base_Start_IT+0xbc>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d004      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x6c>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a16      	ldr	r2, [pc, #88]	; (8005818 <HAL_TIM_Base_Start_IT+0xc0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d111      	bne.n	80057e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b06      	cmp	r3, #6
 80057d4:	d010      	beq.n	80057f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0201 	orr.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e6:	e007      	b.n	80057f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40010000 	.word	0x40010000
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40000c00 	.word	0x40000c00
 8005818:	40014000 	.word	0x40014000

0800581c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0201 	bic.w	r2, r2, #1
 8005832:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6a1a      	ldr	r2, [r3, #32]
 800583a:	f241 1311 	movw	r3, #4369	; 0x1111
 800583e:	4013      	ands	r3, r2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10f      	bne.n	8005864 <HAL_TIM_Base_Stop_IT+0x48>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6a1a      	ldr	r2, [r3, #32]
 800584a:	f240 4344 	movw	r3, #1092	; 0x444
 800584e:	4013      	ands	r3, r2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d107      	bne.n	8005864 <HAL_TIM_Base_Stop_IT+0x48>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0201 	bic.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e041      	b.n	8005910 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d106      	bne.n	80058a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f839 	bl	8005918 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2202      	movs	r2, #2
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3304      	adds	r3, #4
 80058b6:	4619      	mov	r1, r3
 80058b8:	4610      	mov	r0, r2
 80058ba:	f000 fcd5 	bl	8006268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <HAL_TIM_PWM_Start+0x24>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b01      	cmp	r3, #1
 8005946:	bf14      	ite	ne
 8005948:	2301      	movne	r3, #1
 800594a:	2300      	moveq	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	e022      	b.n	8005996 <HAL_TIM_PWM_Start+0x6a>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b04      	cmp	r3, #4
 8005954:	d109      	bne.n	800596a <HAL_TIM_PWM_Start+0x3e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b01      	cmp	r3, #1
 8005960:	bf14      	ite	ne
 8005962:	2301      	movne	r3, #1
 8005964:	2300      	moveq	r3, #0
 8005966:	b2db      	uxtb	r3, r3
 8005968:	e015      	b.n	8005996 <HAL_TIM_PWM_Start+0x6a>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b08      	cmp	r3, #8
 800596e:	d109      	bne.n	8005984 <HAL_TIM_PWM_Start+0x58>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b01      	cmp	r3, #1
 800597a:	bf14      	ite	ne
 800597c:	2301      	movne	r3, #1
 800597e:	2300      	moveq	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	e008      	b.n	8005996 <HAL_TIM_PWM_Start+0x6a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b01      	cmp	r3, #1
 800598e:	bf14      	ite	ne
 8005990:	2301      	movne	r3, #1
 8005992:	2300      	moveq	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e068      	b.n	8005a70 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d104      	bne.n	80059ae <HAL_TIM_PWM_Start+0x82>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059ac:	e013      	b.n	80059d6 <HAL_TIM_PWM_Start+0xaa>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d104      	bne.n	80059be <HAL_TIM_PWM_Start+0x92>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059bc:	e00b      	b.n	80059d6 <HAL_TIM_PWM_Start+0xaa>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d104      	bne.n	80059ce <HAL_TIM_PWM_Start+0xa2>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059cc:	e003      	b.n	80059d6 <HAL_TIM_PWM_Start+0xaa>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2202      	movs	r2, #2
 80059d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2201      	movs	r2, #1
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fee8 	bl	80067b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a23      	ldr	r2, [pc, #140]	; (8005a78 <HAL_TIM_PWM_Start+0x14c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d107      	bne.n	80059fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1d      	ldr	r2, [pc, #116]	; (8005a78 <HAL_TIM_PWM_Start+0x14c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d018      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x10e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a10:	d013      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x10e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a19      	ldr	r2, [pc, #100]	; (8005a7c <HAL_TIM_PWM_Start+0x150>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00e      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x10e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a17      	ldr	r2, [pc, #92]	; (8005a80 <HAL_TIM_PWM_Start+0x154>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x10e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a16      	ldr	r2, [pc, #88]	; (8005a84 <HAL_TIM_PWM_Start+0x158>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x10e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a14      	ldr	r2, [pc, #80]	; (8005a88 <HAL_TIM_PWM_Start+0x15c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d111      	bne.n	8005a5e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b06      	cmp	r3, #6
 8005a4a:	d010      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0201 	orr.w	r2, r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5c:	e007      	b.n	8005a6e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0201 	orr.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40000800 	.word	0x40000800
 8005a84:	40000c00 	.word	0x40000c00
 8005a88:	40014000 	.word	0x40014000

08005a8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e097      	b.n	8005bd0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d106      	bne.n	8005aba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7fd fa8f 	bl	8002fd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2202      	movs	r2, #2
 8005abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ad0:	f023 0307 	bic.w	r3, r3, #7
 8005ad4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	f000 fbc1 	bl	8006268 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b0e:	f023 0303 	bic.w	r3, r3, #3
 8005b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	021b      	lsls	r3, r3, #8
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b2c:	f023 030c 	bic.w	r3, r3, #12
 8005b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	021b      	lsls	r3, r3, #8
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	011a      	lsls	r2, r3, #4
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	031b      	lsls	r3, r3, #12
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005b72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005be8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bf0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bf8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c00:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d110      	bne.n	8005c2a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d102      	bne.n	8005c14 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c0e:	7b7b      	ldrb	r3, [r7, #13]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d001      	beq.n	8005c18 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e069      	b.n	8005cec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c28:	e031      	b.n	8005c8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	d110      	bne.n	8005c52 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c30:	7bbb      	ldrb	r3, [r7, #14]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d102      	bne.n	8005c3c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c36:	7b3b      	ldrb	r3, [r7, #12]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d001      	beq.n	8005c40 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e055      	b.n	8005cec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c50:	e01d      	b.n	8005c8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d108      	bne.n	8005c6a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c58:	7bbb      	ldrb	r3, [r7, #14]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d105      	bne.n	8005c6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c5e:	7b7b      	ldrb	r3, [r7, #13]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d102      	bne.n	8005c6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c64:	7b3b      	ldrb	r3, [r7, #12]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d001      	beq.n	8005c6e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e03e      	b.n	8005cec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2202      	movs	r2, #2
 8005c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2202      	movs	r2, #2
 8005c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2202      	movs	r2, #2
 8005c8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_TIM_Encoder_Start+0xc4>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d008      	beq.n	8005cac <HAL_TIM_Encoder_Start+0xd4>
 8005c9a:	e00f      	b.n	8005cbc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fd85 	bl	80067b4 <TIM_CCxChannelCmd>
      break;
 8005caa:	e016      	b.n	8005cda <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	2104      	movs	r1, #4
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fd7d 	bl	80067b4 <TIM_CCxChannelCmd>
      break;
 8005cba:	e00e      	b.n	8005cda <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fd75 	bl	80067b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	2104      	movs	r1, #4
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fd6e 	bl	80067b4 <TIM_CCxChannelCmd>
      break;
 8005cd8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f042 0201 	orr.w	r2, r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d122      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d11b      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f06f 0202 	mvn.w	r2, #2
 8005d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fa77 	bl	800622a <HAL_TIM_IC_CaptureCallback>
 8005d3c:	e005      	b.n	8005d4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fa69 	bl	8006216 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fa7a 	bl	800623e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d122      	bne.n	8005da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d11b      	bne.n	8005da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0204 	mvn.w	r2, #4
 8005d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fa4d 	bl	800622a <HAL_TIM_IC_CaptureCallback>
 8005d90:	e005      	b.n	8005d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fa3f 	bl	8006216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fa50 	bl	800623e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b08      	cmp	r3, #8
 8005db0:	d122      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d11b      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0208 	mvn.w	r2, #8
 8005dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2204      	movs	r2, #4
 8005dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa23 	bl	800622a <HAL_TIM_IC_CaptureCallback>
 8005de4:	e005      	b.n	8005df2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fa15 	bl	8006216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fa26 	bl	800623e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0310 	and.w	r3, r3, #16
 8005e02:	2b10      	cmp	r3, #16
 8005e04:	d122      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b10      	cmp	r3, #16
 8005e12:	d11b      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0210 	mvn.w	r2, #16
 8005e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2208      	movs	r2, #8
 8005e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f9f9 	bl	800622a <HAL_TIM_IC_CaptureCallback>
 8005e38:	e005      	b.n	8005e46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f9eb 	bl	8006216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f9fc 	bl	800623e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d10e      	bne.n	8005e78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d107      	bne.n	8005e78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0201 	mvn.w	r2, #1
 8005e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fb fbd2 	bl	800161c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e82:	2b80      	cmp	r3, #128	; 0x80
 8005e84:	d10e      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e90:	2b80      	cmp	r3, #128	; 0x80
 8005e92:	d107      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fd26 	bl	80068f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eae:	2b40      	cmp	r3, #64	; 0x40
 8005eb0:	d10e      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebc:	2b40      	cmp	r3, #64	; 0x40
 8005ebe:	d107      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f9c1 	bl	8006252 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d10e      	bne.n	8005efc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f003 0320 	and.w	r3, r3, #32
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	d107      	bne.n	8005efc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f06f 0220 	mvn.w	r2, #32
 8005ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fcf0 	bl	80068dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e0ae      	b.n	8006080 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b0c      	cmp	r3, #12
 8005f2e:	f200 809f 	bhi.w	8006070 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f32:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f38:	08005f6d 	.word	0x08005f6d
 8005f3c:	08006071 	.word	0x08006071
 8005f40:	08006071 	.word	0x08006071
 8005f44:	08006071 	.word	0x08006071
 8005f48:	08005fad 	.word	0x08005fad
 8005f4c:	08006071 	.word	0x08006071
 8005f50:	08006071 	.word	0x08006071
 8005f54:	08006071 	.word	0x08006071
 8005f58:	08005fef 	.word	0x08005fef
 8005f5c:	08006071 	.word	0x08006071
 8005f60:	08006071 	.word	0x08006071
 8005f64:	08006071 	.word	0x08006071
 8005f68:	0800602f 	.word	0x0800602f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 f9f8 	bl	8006368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699a      	ldr	r2, [r3, #24]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0208 	orr.w	r2, r2, #8
 8005f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0204 	bic.w	r2, r2, #4
 8005f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6999      	ldr	r1, [r3, #24]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	619a      	str	r2, [r3, #24]
      break;
 8005faa:	e064      	b.n	8006076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fa3e 	bl	8006434 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6999      	ldr	r1, [r3, #24]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	021a      	lsls	r2, r3, #8
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	619a      	str	r2, [r3, #24]
      break;
 8005fec:	e043      	b.n	8006076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 fa89 	bl	800650c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0208 	orr.w	r2, r2, #8
 8006008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0204 	bic.w	r2, r2, #4
 8006018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69d9      	ldr	r1, [r3, #28]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	61da      	str	r2, [r3, #28]
      break;
 800602c:	e023      	b.n	8006076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68b9      	ldr	r1, [r7, #8]
 8006034:	4618      	mov	r0, r3
 8006036:	f000 fad3 	bl	80065e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69da      	ldr	r2, [r3, #28]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69d9      	ldr	r1, [r3, #28]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	021a      	lsls	r2, r3, #8
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	61da      	str	r2, [r3, #28]
      break;
 800606e:	e002      	b.n	8006076 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	75fb      	strb	r3, [r7, #23]
      break;
 8006074:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800607e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_TIM_ConfigClockSource+0x1c>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e0b4      	b.n	800620e <HAL_TIM_ConfigClockSource+0x186>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060dc:	d03e      	beq.n	800615c <HAL_TIM_ConfigClockSource+0xd4>
 80060de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e2:	f200 8087 	bhi.w	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 80060e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ea:	f000 8086 	beq.w	80061fa <HAL_TIM_ConfigClockSource+0x172>
 80060ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f2:	d87f      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 80060f4:	2b70      	cmp	r3, #112	; 0x70
 80060f6:	d01a      	beq.n	800612e <HAL_TIM_ConfigClockSource+0xa6>
 80060f8:	2b70      	cmp	r3, #112	; 0x70
 80060fa:	d87b      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 80060fc:	2b60      	cmp	r3, #96	; 0x60
 80060fe:	d050      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x11a>
 8006100:	2b60      	cmp	r3, #96	; 0x60
 8006102:	d877      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006104:	2b50      	cmp	r3, #80	; 0x50
 8006106:	d03c      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0xfa>
 8006108:	2b50      	cmp	r3, #80	; 0x50
 800610a:	d873      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 800610c:	2b40      	cmp	r3, #64	; 0x40
 800610e:	d058      	beq.n	80061c2 <HAL_TIM_ConfigClockSource+0x13a>
 8006110:	2b40      	cmp	r3, #64	; 0x40
 8006112:	d86f      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006114:	2b30      	cmp	r3, #48	; 0x30
 8006116:	d064      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006118:	2b30      	cmp	r3, #48	; 0x30
 800611a:	d86b      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 800611c:	2b20      	cmp	r3, #32
 800611e:	d060      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006120:	2b20      	cmp	r3, #32
 8006122:	d867      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d05c      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006128:	2b10      	cmp	r3, #16
 800612a:	d05a      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x15a>
 800612c:	e062      	b.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6818      	ldr	r0, [r3, #0]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6899      	ldr	r1, [r3, #8]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f000 fb19 	bl	8006774 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006150:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	609a      	str	r2, [r3, #8]
      break;
 800615a:	e04f      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	6899      	ldr	r1, [r3, #8]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f000 fb02 	bl	8006774 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800617e:	609a      	str	r2, [r3, #8]
      break;
 8006180:	e03c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6859      	ldr	r1, [r3, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	461a      	mov	r2, r3
 8006190:	f000 fa76 	bl	8006680 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2150      	movs	r1, #80	; 0x50
 800619a:	4618      	mov	r0, r3
 800619c:	f000 facf 	bl	800673e <TIM_ITRx_SetConfig>
      break;
 80061a0:	e02c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6859      	ldr	r1, [r3, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	461a      	mov	r2, r3
 80061b0:	f000 fa95 	bl	80066de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2160      	movs	r1, #96	; 0x60
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fabf 	bl	800673e <TIM_ITRx_SetConfig>
      break;
 80061c0:	e01c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6859      	ldr	r1, [r3, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	461a      	mov	r2, r3
 80061d0:	f000 fa56 	bl	8006680 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2140      	movs	r1, #64	; 0x40
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 faaf 	bl	800673e <TIM_ITRx_SetConfig>
      break;
 80061e0:	e00c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4619      	mov	r1, r3
 80061ec:	4610      	mov	r0, r2
 80061ee:	f000 faa6 	bl	800673e <TIM_ITRx_SetConfig>
      break;
 80061f2:	e003      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	73fb      	strb	r3, [r7, #15]
      break;
 80061f8:	e000      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800621e:	bf00      	nop
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
	...

08006268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a34      	ldr	r2, [pc, #208]	; (800634c <TIM_Base_SetConfig+0xe4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00f      	beq.n	80062a0 <TIM_Base_SetConfig+0x38>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006286:	d00b      	beq.n	80062a0 <TIM_Base_SetConfig+0x38>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a31      	ldr	r2, [pc, #196]	; (8006350 <TIM_Base_SetConfig+0xe8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d007      	beq.n	80062a0 <TIM_Base_SetConfig+0x38>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a30      	ldr	r2, [pc, #192]	; (8006354 <TIM_Base_SetConfig+0xec>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d003      	beq.n	80062a0 <TIM_Base_SetConfig+0x38>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a2f      	ldr	r2, [pc, #188]	; (8006358 <TIM_Base_SetConfig+0xf0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d108      	bne.n	80062b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a25      	ldr	r2, [pc, #148]	; (800634c <TIM_Base_SetConfig+0xe4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d01b      	beq.n	80062f2 <TIM_Base_SetConfig+0x8a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c0:	d017      	beq.n	80062f2 <TIM_Base_SetConfig+0x8a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a22      	ldr	r2, [pc, #136]	; (8006350 <TIM_Base_SetConfig+0xe8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d013      	beq.n	80062f2 <TIM_Base_SetConfig+0x8a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a21      	ldr	r2, [pc, #132]	; (8006354 <TIM_Base_SetConfig+0xec>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d00f      	beq.n	80062f2 <TIM_Base_SetConfig+0x8a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a20      	ldr	r2, [pc, #128]	; (8006358 <TIM_Base_SetConfig+0xf0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00b      	beq.n	80062f2 <TIM_Base_SetConfig+0x8a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a1f      	ldr	r2, [pc, #124]	; (800635c <TIM_Base_SetConfig+0xf4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d007      	beq.n	80062f2 <TIM_Base_SetConfig+0x8a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a1e      	ldr	r2, [pc, #120]	; (8006360 <TIM_Base_SetConfig+0xf8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d003      	beq.n	80062f2 <TIM_Base_SetConfig+0x8a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a1d      	ldr	r2, [pc, #116]	; (8006364 <TIM_Base_SetConfig+0xfc>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d108      	bne.n	8006304 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a08      	ldr	r2, [pc, #32]	; (800634c <TIM_Base_SetConfig+0xe4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d103      	bne.n	8006338 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	691a      	ldr	r2, [r3, #16]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	615a      	str	r2, [r3, #20]
}
 800633e:	bf00      	nop
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	40010000 	.word	0x40010000
 8006350:	40000400 	.word	0x40000400
 8006354:	40000800 	.word	0x40000800
 8006358:	40000c00 	.word	0x40000c00
 800635c:	40014000 	.word	0x40014000
 8006360:	40014400 	.word	0x40014400
 8006364:	40014800 	.word	0x40014800

08006368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f023 0201 	bic.w	r2, r3, #1
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0303 	bic.w	r3, r3, #3
 800639e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 0302 	bic.w	r3, r3, #2
 80063b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a1c      	ldr	r2, [pc, #112]	; (8006430 <TIM_OC1_SetConfig+0xc8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d10c      	bne.n	80063de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f023 0308 	bic.w	r3, r3, #8
 80063ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f023 0304 	bic.w	r3, r3, #4
 80063dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a13      	ldr	r2, [pc, #76]	; (8006430 <TIM_OC1_SetConfig+0xc8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d111      	bne.n	800640a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	621a      	str	r2, [r3, #32]
}
 8006424:	bf00      	nop
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	40010000 	.word	0x40010000

08006434 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f023 0210 	bic.w	r2, r3, #16
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800646a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f023 0320 	bic.w	r3, r3, #32
 800647e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a1e      	ldr	r2, [pc, #120]	; (8006508 <TIM_OC2_SetConfig+0xd4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d10d      	bne.n	80064b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800649a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	011b      	lsls	r3, r3, #4
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a15      	ldr	r2, [pc, #84]	; (8006508 <TIM_OC2_SetConfig+0xd4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d113      	bne.n	80064e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40010000 	.word	0x40010000

0800650c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0303 	bic.w	r3, r3, #3
 8006542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a1d      	ldr	r2, [pc, #116]	; (80065dc <TIM_OC3_SetConfig+0xd0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d10d      	bne.n	8006586 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a14      	ldr	r2, [pc, #80]	; (80065dc <TIM_OC3_SetConfig+0xd0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d113      	bne.n	80065b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800659c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	621a      	str	r2, [r3, #32]
}
 80065d0:	bf00      	nop
 80065d2:	371c      	adds	r7, #28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	40010000 	.word	0x40010000

080065e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800660e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	021b      	lsls	r3, r3, #8
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800662a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	031b      	lsls	r3, r3, #12
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4313      	orrs	r3, r2
 8006636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a10      	ldr	r2, [pc, #64]	; (800667c <TIM_OC4_SetConfig+0x9c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d109      	bne.n	8006654 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	019b      	lsls	r3, r3, #6
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	621a      	str	r2, [r3, #32]
}
 800666e:	bf00      	nop
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40010000 	.word	0x40010000

08006680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	f023 0201 	bic.w	r2, r3, #1
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f023 030a 	bic.w	r3, r3, #10
 80066bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066de:	b480      	push	{r7}
 80066e0:	b087      	sub	sp, #28
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	f023 0210 	bic.w	r2, r3, #16
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006708:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	031b      	lsls	r3, r3, #12
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800671a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	621a      	str	r2, [r3, #32]
}
 8006732:	bf00      	nop
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	f043 0307 	orr.w	r3, r3, #7
 8006760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	609a      	str	r2, [r3, #8]
}
 8006768:	bf00      	nop
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800678e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	021a      	lsls	r2, r3, #8
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	431a      	orrs	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4313      	orrs	r3, r2
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	609a      	str	r2, [r3, #8]
}
 80067a8:	bf00      	nop
 80067aa:	371c      	adds	r7, #28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f003 031f 	and.w	r3, r3, #31
 80067c6:	2201      	movs	r2, #1
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6a1a      	ldr	r2, [r3, #32]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	43db      	mvns	r3, r3
 80067d6:	401a      	ands	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a1a      	ldr	r2, [r3, #32]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	fa01 f303 	lsl.w	r3, r1, r3
 80067ec:	431a      	orrs	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
	...

08006800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006814:	2302      	movs	r3, #2
 8006816:	e050      	b.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1c      	ldr	r2, [pc, #112]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d018      	beq.n	800688e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006864:	d013      	beq.n	800688e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a18      	ldr	r2, [pc, #96]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00e      	beq.n	800688e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a16      	ldr	r2, [pc, #88]	; (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d009      	beq.n	800688e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a15      	ldr	r2, [pc, #84]	; (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d004      	beq.n	800688e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a13      	ldr	r2, [pc, #76]	; (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d10c      	bne.n	80068a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	4313      	orrs	r3, r2
 800689e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40010000 	.word	0x40010000
 80068cc:	40000400 	.word	0x40000400
 80068d0:	40000800 	.word	0x40000800
 80068d4:	40000c00 	.word	0x40000c00
 80068d8:	40014000 	.word	0x40014000

080068dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <__errno>:
 8006904:	4b01      	ldr	r3, [pc, #4]	; (800690c <__errno+0x8>)
 8006906:	6818      	ldr	r0, [r3, #0]
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	20000024 	.word	0x20000024

08006910 <__libc_init_array>:
 8006910:	b570      	push	{r4, r5, r6, lr}
 8006912:	4d0d      	ldr	r5, [pc, #52]	; (8006948 <__libc_init_array+0x38>)
 8006914:	4c0d      	ldr	r4, [pc, #52]	; (800694c <__libc_init_array+0x3c>)
 8006916:	1b64      	subs	r4, r4, r5
 8006918:	10a4      	asrs	r4, r4, #2
 800691a:	2600      	movs	r6, #0
 800691c:	42a6      	cmp	r6, r4
 800691e:	d109      	bne.n	8006934 <__libc_init_array+0x24>
 8006920:	4d0b      	ldr	r5, [pc, #44]	; (8006950 <__libc_init_array+0x40>)
 8006922:	4c0c      	ldr	r4, [pc, #48]	; (8006954 <__libc_init_array+0x44>)
 8006924:	f000 fcc2 	bl	80072ac <_init>
 8006928:	1b64      	subs	r4, r4, r5
 800692a:	10a4      	asrs	r4, r4, #2
 800692c:	2600      	movs	r6, #0
 800692e:	42a6      	cmp	r6, r4
 8006930:	d105      	bne.n	800693e <__libc_init_array+0x2e>
 8006932:	bd70      	pop	{r4, r5, r6, pc}
 8006934:	f855 3b04 	ldr.w	r3, [r5], #4
 8006938:	4798      	blx	r3
 800693a:	3601      	adds	r6, #1
 800693c:	e7ee      	b.n	800691c <__libc_init_array+0xc>
 800693e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006942:	4798      	blx	r3
 8006944:	3601      	adds	r6, #1
 8006946:	e7f2      	b.n	800692e <__libc_init_array+0x1e>
 8006948:	08007b88 	.word	0x08007b88
 800694c:	08007b88 	.word	0x08007b88
 8006950:	08007b88 	.word	0x08007b88
 8006954:	08007b8c 	.word	0x08007b8c

08006958 <memcpy>:
 8006958:	440a      	add	r2, r1
 800695a:	4291      	cmp	r1, r2
 800695c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006960:	d100      	bne.n	8006964 <memcpy+0xc>
 8006962:	4770      	bx	lr
 8006964:	b510      	push	{r4, lr}
 8006966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800696a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800696e:	4291      	cmp	r1, r2
 8006970:	d1f9      	bne.n	8006966 <memcpy+0xe>
 8006972:	bd10      	pop	{r4, pc}

08006974 <memset>:
 8006974:	4402      	add	r2, r0
 8006976:	4603      	mov	r3, r0
 8006978:	4293      	cmp	r3, r2
 800697a:	d100      	bne.n	800697e <memset+0xa>
 800697c:	4770      	bx	lr
 800697e:	f803 1b01 	strb.w	r1, [r3], #1
 8006982:	e7f9      	b.n	8006978 <memset+0x4>

08006984 <sniprintf>:
 8006984:	b40c      	push	{r2, r3}
 8006986:	b530      	push	{r4, r5, lr}
 8006988:	4b17      	ldr	r3, [pc, #92]	; (80069e8 <sniprintf+0x64>)
 800698a:	1e0c      	subs	r4, r1, #0
 800698c:	681d      	ldr	r5, [r3, #0]
 800698e:	b09d      	sub	sp, #116	; 0x74
 8006990:	da08      	bge.n	80069a4 <sniprintf+0x20>
 8006992:	238b      	movs	r3, #139	; 0x8b
 8006994:	602b      	str	r3, [r5, #0]
 8006996:	f04f 30ff 	mov.w	r0, #4294967295
 800699a:	b01d      	add	sp, #116	; 0x74
 800699c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069a0:	b002      	add	sp, #8
 80069a2:	4770      	bx	lr
 80069a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80069a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80069ac:	bf14      	ite	ne
 80069ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80069b2:	4623      	moveq	r3, r4
 80069b4:	9304      	str	r3, [sp, #16]
 80069b6:	9307      	str	r3, [sp, #28]
 80069b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069bc:	9002      	str	r0, [sp, #8]
 80069be:	9006      	str	r0, [sp, #24]
 80069c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80069c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80069c6:	ab21      	add	r3, sp, #132	; 0x84
 80069c8:	a902      	add	r1, sp, #8
 80069ca:	4628      	mov	r0, r5
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	f000 f889 	bl	8006ae4 <_svfiprintf_r>
 80069d2:	1c43      	adds	r3, r0, #1
 80069d4:	bfbc      	itt	lt
 80069d6:	238b      	movlt	r3, #139	; 0x8b
 80069d8:	602b      	strlt	r3, [r5, #0]
 80069da:	2c00      	cmp	r4, #0
 80069dc:	d0dd      	beq.n	800699a <sniprintf+0x16>
 80069de:	9b02      	ldr	r3, [sp, #8]
 80069e0:	2200      	movs	r2, #0
 80069e2:	701a      	strb	r2, [r3, #0]
 80069e4:	e7d9      	b.n	800699a <sniprintf+0x16>
 80069e6:	bf00      	nop
 80069e8:	20000024 	.word	0x20000024

080069ec <siprintf>:
 80069ec:	b40e      	push	{r1, r2, r3}
 80069ee:	b500      	push	{lr}
 80069f0:	b09c      	sub	sp, #112	; 0x70
 80069f2:	ab1d      	add	r3, sp, #116	; 0x74
 80069f4:	9002      	str	r0, [sp, #8]
 80069f6:	9006      	str	r0, [sp, #24]
 80069f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069fc:	4809      	ldr	r0, [pc, #36]	; (8006a24 <siprintf+0x38>)
 80069fe:	9107      	str	r1, [sp, #28]
 8006a00:	9104      	str	r1, [sp, #16]
 8006a02:	4909      	ldr	r1, [pc, #36]	; (8006a28 <siprintf+0x3c>)
 8006a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a08:	9105      	str	r1, [sp, #20]
 8006a0a:	6800      	ldr	r0, [r0, #0]
 8006a0c:	9301      	str	r3, [sp, #4]
 8006a0e:	a902      	add	r1, sp, #8
 8006a10:	f000 f868 	bl	8006ae4 <_svfiprintf_r>
 8006a14:	9b02      	ldr	r3, [sp, #8]
 8006a16:	2200      	movs	r2, #0
 8006a18:	701a      	strb	r2, [r3, #0]
 8006a1a:	b01c      	add	sp, #112	; 0x70
 8006a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a20:	b003      	add	sp, #12
 8006a22:	4770      	bx	lr
 8006a24:	20000024 	.word	0x20000024
 8006a28:	ffff0208 	.word	0xffff0208

08006a2c <__ssputs_r>:
 8006a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a30:	688e      	ldr	r6, [r1, #8]
 8006a32:	429e      	cmp	r6, r3
 8006a34:	4682      	mov	sl, r0
 8006a36:	460c      	mov	r4, r1
 8006a38:	4690      	mov	r8, r2
 8006a3a:	461f      	mov	r7, r3
 8006a3c:	d838      	bhi.n	8006ab0 <__ssputs_r+0x84>
 8006a3e:	898a      	ldrh	r2, [r1, #12]
 8006a40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a44:	d032      	beq.n	8006aac <__ssputs_r+0x80>
 8006a46:	6825      	ldr	r5, [r4, #0]
 8006a48:	6909      	ldr	r1, [r1, #16]
 8006a4a:	eba5 0901 	sub.w	r9, r5, r1
 8006a4e:	6965      	ldr	r5, [r4, #20]
 8006a50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a58:	3301      	adds	r3, #1
 8006a5a:	444b      	add	r3, r9
 8006a5c:	106d      	asrs	r5, r5, #1
 8006a5e:	429d      	cmp	r5, r3
 8006a60:	bf38      	it	cc
 8006a62:	461d      	movcc	r5, r3
 8006a64:	0553      	lsls	r3, r2, #21
 8006a66:	d531      	bpl.n	8006acc <__ssputs_r+0xa0>
 8006a68:	4629      	mov	r1, r5
 8006a6a:	f000 fb55 	bl	8007118 <_malloc_r>
 8006a6e:	4606      	mov	r6, r0
 8006a70:	b950      	cbnz	r0, 8006a88 <__ssputs_r+0x5c>
 8006a72:	230c      	movs	r3, #12
 8006a74:	f8ca 3000 	str.w	r3, [sl]
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a7e:	81a3      	strh	r3, [r4, #12]
 8006a80:	f04f 30ff 	mov.w	r0, #4294967295
 8006a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a88:	6921      	ldr	r1, [r4, #16]
 8006a8a:	464a      	mov	r2, r9
 8006a8c:	f7ff ff64 	bl	8006958 <memcpy>
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9a:	81a3      	strh	r3, [r4, #12]
 8006a9c:	6126      	str	r6, [r4, #16]
 8006a9e:	6165      	str	r5, [r4, #20]
 8006aa0:	444e      	add	r6, r9
 8006aa2:	eba5 0509 	sub.w	r5, r5, r9
 8006aa6:	6026      	str	r6, [r4, #0]
 8006aa8:	60a5      	str	r5, [r4, #8]
 8006aaa:	463e      	mov	r6, r7
 8006aac:	42be      	cmp	r6, r7
 8006aae:	d900      	bls.n	8006ab2 <__ssputs_r+0x86>
 8006ab0:	463e      	mov	r6, r7
 8006ab2:	6820      	ldr	r0, [r4, #0]
 8006ab4:	4632      	mov	r2, r6
 8006ab6:	4641      	mov	r1, r8
 8006ab8:	f000 faa8 	bl	800700c <memmove>
 8006abc:	68a3      	ldr	r3, [r4, #8]
 8006abe:	1b9b      	subs	r3, r3, r6
 8006ac0:	60a3      	str	r3, [r4, #8]
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	4433      	add	r3, r6
 8006ac6:	6023      	str	r3, [r4, #0]
 8006ac8:	2000      	movs	r0, #0
 8006aca:	e7db      	b.n	8006a84 <__ssputs_r+0x58>
 8006acc:	462a      	mov	r2, r5
 8006ace:	f000 fb97 	bl	8007200 <_realloc_r>
 8006ad2:	4606      	mov	r6, r0
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d1e1      	bne.n	8006a9c <__ssputs_r+0x70>
 8006ad8:	6921      	ldr	r1, [r4, #16]
 8006ada:	4650      	mov	r0, sl
 8006adc:	f000 fab0 	bl	8007040 <_free_r>
 8006ae0:	e7c7      	b.n	8006a72 <__ssputs_r+0x46>
	...

08006ae4 <_svfiprintf_r>:
 8006ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae8:	4698      	mov	r8, r3
 8006aea:	898b      	ldrh	r3, [r1, #12]
 8006aec:	061b      	lsls	r3, r3, #24
 8006aee:	b09d      	sub	sp, #116	; 0x74
 8006af0:	4607      	mov	r7, r0
 8006af2:	460d      	mov	r5, r1
 8006af4:	4614      	mov	r4, r2
 8006af6:	d50e      	bpl.n	8006b16 <_svfiprintf_r+0x32>
 8006af8:	690b      	ldr	r3, [r1, #16]
 8006afa:	b963      	cbnz	r3, 8006b16 <_svfiprintf_r+0x32>
 8006afc:	2140      	movs	r1, #64	; 0x40
 8006afe:	f000 fb0b 	bl	8007118 <_malloc_r>
 8006b02:	6028      	str	r0, [r5, #0]
 8006b04:	6128      	str	r0, [r5, #16]
 8006b06:	b920      	cbnz	r0, 8006b12 <_svfiprintf_r+0x2e>
 8006b08:	230c      	movs	r3, #12
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b10:	e0d1      	b.n	8006cb6 <_svfiprintf_r+0x1d2>
 8006b12:	2340      	movs	r3, #64	; 0x40
 8006b14:	616b      	str	r3, [r5, #20]
 8006b16:	2300      	movs	r3, #0
 8006b18:	9309      	str	r3, [sp, #36]	; 0x24
 8006b1a:	2320      	movs	r3, #32
 8006b1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b24:	2330      	movs	r3, #48	; 0x30
 8006b26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006cd0 <_svfiprintf_r+0x1ec>
 8006b2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b2e:	f04f 0901 	mov.w	r9, #1
 8006b32:	4623      	mov	r3, r4
 8006b34:	469a      	mov	sl, r3
 8006b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b3a:	b10a      	cbz	r2, 8006b40 <_svfiprintf_r+0x5c>
 8006b3c:	2a25      	cmp	r2, #37	; 0x25
 8006b3e:	d1f9      	bne.n	8006b34 <_svfiprintf_r+0x50>
 8006b40:	ebba 0b04 	subs.w	fp, sl, r4
 8006b44:	d00b      	beq.n	8006b5e <_svfiprintf_r+0x7a>
 8006b46:	465b      	mov	r3, fp
 8006b48:	4622      	mov	r2, r4
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	4638      	mov	r0, r7
 8006b4e:	f7ff ff6d 	bl	8006a2c <__ssputs_r>
 8006b52:	3001      	adds	r0, #1
 8006b54:	f000 80aa 	beq.w	8006cac <_svfiprintf_r+0x1c8>
 8006b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b5a:	445a      	add	r2, fp
 8006b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 80a2 	beq.w	8006cac <_svfiprintf_r+0x1c8>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b72:	f10a 0a01 	add.w	sl, sl, #1
 8006b76:	9304      	str	r3, [sp, #16]
 8006b78:	9307      	str	r3, [sp, #28]
 8006b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b80:	4654      	mov	r4, sl
 8006b82:	2205      	movs	r2, #5
 8006b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b88:	4851      	ldr	r0, [pc, #324]	; (8006cd0 <_svfiprintf_r+0x1ec>)
 8006b8a:	f7f9 fb29 	bl	80001e0 <memchr>
 8006b8e:	9a04      	ldr	r2, [sp, #16]
 8006b90:	b9d8      	cbnz	r0, 8006bca <_svfiprintf_r+0xe6>
 8006b92:	06d0      	lsls	r0, r2, #27
 8006b94:	bf44      	itt	mi
 8006b96:	2320      	movmi	r3, #32
 8006b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b9c:	0711      	lsls	r1, r2, #28
 8006b9e:	bf44      	itt	mi
 8006ba0:	232b      	movmi	r3, #43	; 0x2b
 8006ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8006baa:	2b2a      	cmp	r3, #42	; 0x2a
 8006bac:	d015      	beq.n	8006bda <_svfiprintf_r+0xf6>
 8006bae:	9a07      	ldr	r2, [sp, #28]
 8006bb0:	4654      	mov	r4, sl
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	f04f 0c0a 	mov.w	ip, #10
 8006bb8:	4621      	mov	r1, r4
 8006bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bbe:	3b30      	subs	r3, #48	; 0x30
 8006bc0:	2b09      	cmp	r3, #9
 8006bc2:	d94e      	bls.n	8006c62 <_svfiprintf_r+0x17e>
 8006bc4:	b1b0      	cbz	r0, 8006bf4 <_svfiprintf_r+0x110>
 8006bc6:	9207      	str	r2, [sp, #28]
 8006bc8:	e014      	b.n	8006bf4 <_svfiprintf_r+0x110>
 8006bca:	eba0 0308 	sub.w	r3, r0, r8
 8006bce:	fa09 f303 	lsl.w	r3, r9, r3
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	9304      	str	r3, [sp, #16]
 8006bd6:	46a2      	mov	sl, r4
 8006bd8:	e7d2      	b.n	8006b80 <_svfiprintf_r+0x9c>
 8006bda:	9b03      	ldr	r3, [sp, #12]
 8006bdc:	1d19      	adds	r1, r3, #4
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	9103      	str	r1, [sp, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	bfbb      	ittet	lt
 8006be6:	425b      	neglt	r3, r3
 8006be8:	f042 0202 	orrlt.w	r2, r2, #2
 8006bec:	9307      	strge	r3, [sp, #28]
 8006bee:	9307      	strlt	r3, [sp, #28]
 8006bf0:	bfb8      	it	lt
 8006bf2:	9204      	strlt	r2, [sp, #16]
 8006bf4:	7823      	ldrb	r3, [r4, #0]
 8006bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8006bf8:	d10c      	bne.n	8006c14 <_svfiprintf_r+0x130>
 8006bfa:	7863      	ldrb	r3, [r4, #1]
 8006bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8006bfe:	d135      	bne.n	8006c6c <_svfiprintf_r+0x188>
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	1d1a      	adds	r2, r3, #4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	9203      	str	r2, [sp, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bfb8      	it	lt
 8006c0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c10:	3402      	adds	r4, #2
 8006c12:	9305      	str	r3, [sp, #20]
 8006c14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ce0 <_svfiprintf_r+0x1fc>
 8006c18:	7821      	ldrb	r1, [r4, #0]
 8006c1a:	2203      	movs	r2, #3
 8006c1c:	4650      	mov	r0, sl
 8006c1e:	f7f9 fadf 	bl	80001e0 <memchr>
 8006c22:	b140      	cbz	r0, 8006c36 <_svfiprintf_r+0x152>
 8006c24:	2340      	movs	r3, #64	; 0x40
 8006c26:	eba0 000a 	sub.w	r0, r0, sl
 8006c2a:	fa03 f000 	lsl.w	r0, r3, r0
 8006c2e:	9b04      	ldr	r3, [sp, #16]
 8006c30:	4303      	orrs	r3, r0
 8006c32:	3401      	adds	r4, #1
 8006c34:	9304      	str	r3, [sp, #16]
 8006c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c3a:	4826      	ldr	r0, [pc, #152]	; (8006cd4 <_svfiprintf_r+0x1f0>)
 8006c3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c40:	2206      	movs	r2, #6
 8006c42:	f7f9 facd 	bl	80001e0 <memchr>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	d038      	beq.n	8006cbc <_svfiprintf_r+0x1d8>
 8006c4a:	4b23      	ldr	r3, [pc, #140]	; (8006cd8 <_svfiprintf_r+0x1f4>)
 8006c4c:	bb1b      	cbnz	r3, 8006c96 <_svfiprintf_r+0x1b2>
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	3307      	adds	r3, #7
 8006c52:	f023 0307 	bic.w	r3, r3, #7
 8006c56:	3308      	adds	r3, #8
 8006c58:	9303      	str	r3, [sp, #12]
 8006c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c5c:	4433      	add	r3, r6
 8006c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c60:	e767      	b.n	8006b32 <_svfiprintf_r+0x4e>
 8006c62:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c66:	460c      	mov	r4, r1
 8006c68:	2001      	movs	r0, #1
 8006c6a:	e7a5      	b.n	8006bb8 <_svfiprintf_r+0xd4>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	3401      	adds	r4, #1
 8006c70:	9305      	str	r3, [sp, #20]
 8006c72:	4619      	mov	r1, r3
 8006c74:	f04f 0c0a 	mov.w	ip, #10
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c7e:	3a30      	subs	r2, #48	; 0x30
 8006c80:	2a09      	cmp	r2, #9
 8006c82:	d903      	bls.n	8006c8c <_svfiprintf_r+0x1a8>
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0c5      	beq.n	8006c14 <_svfiprintf_r+0x130>
 8006c88:	9105      	str	r1, [sp, #20]
 8006c8a:	e7c3      	b.n	8006c14 <_svfiprintf_r+0x130>
 8006c8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c90:	4604      	mov	r4, r0
 8006c92:	2301      	movs	r3, #1
 8006c94:	e7f0      	b.n	8006c78 <_svfiprintf_r+0x194>
 8006c96:	ab03      	add	r3, sp, #12
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	462a      	mov	r2, r5
 8006c9c:	4b0f      	ldr	r3, [pc, #60]	; (8006cdc <_svfiprintf_r+0x1f8>)
 8006c9e:	a904      	add	r1, sp, #16
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	f3af 8000 	nop.w
 8006ca6:	1c42      	adds	r2, r0, #1
 8006ca8:	4606      	mov	r6, r0
 8006caa:	d1d6      	bne.n	8006c5a <_svfiprintf_r+0x176>
 8006cac:	89ab      	ldrh	r3, [r5, #12]
 8006cae:	065b      	lsls	r3, r3, #25
 8006cb0:	f53f af2c 	bmi.w	8006b0c <_svfiprintf_r+0x28>
 8006cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cb6:	b01d      	add	sp, #116	; 0x74
 8006cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cbc:	ab03      	add	r3, sp, #12
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	462a      	mov	r2, r5
 8006cc2:	4b06      	ldr	r3, [pc, #24]	; (8006cdc <_svfiprintf_r+0x1f8>)
 8006cc4:	a904      	add	r1, sp, #16
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	f000 f87a 	bl	8006dc0 <_printf_i>
 8006ccc:	e7eb      	b.n	8006ca6 <_svfiprintf_r+0x1c2>
 8006cce:	bf00      	nop
 8006cd0:	08007b4c 	.word	0x08007b4c
 8006cd4:	08007b56 	.word	0x08007b56
 8006cd8:	00000000 	.word	0x00000000
 8006cdc:	08006a2d 	.word	0x08006a2d
 8006ce0:	08007b52 	.word	0x08007b52

08006ce4 <_printf_common>:
 8006ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce8:	4616      	mov	r6, r2
 8006cea:	4699      	mov	r9, r3
 8006cec:	688a      	ldr	r2, [r1, #8]
 8006cee:	690b      	ldr	r3, [r1, #16]
 8006cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	bfb8      	it	lt
 8006cf8:	4613      	movlt	r3, r2
 8006cfa:	6033      	str	r3, [r6, #0]
 8006cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d00:	4607      	mov	r7, r0
 8006d02:	460c      	mov	r4, r1
 8006d04:	b10a      	cbz	r2, 8006d0a <_printf_common+0x26>
 8006d06:	3301      	adds	r3, #1
 8006d08:	6033      	str	r3, [r6, #0]
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	0699      	lsls	r1, r3, #26
 8006d0e:	bf42      	ittt	mi
 8006d10:	6833      	ldrmi	r3, [r6, #0]
 8006d12:	3302      	addmi	r3, #2
 8006d14:	6033      	strmi	r3, [r6, #0]
 8006d16:	6825      	ldr	r5, [r4, #0]
 8006d18:	f015 0506 	ands.w	r5, r5, #6
 8006d1c:	d106      	bne.n	8006d2c <_printf_common+0x48>
 8006d1e:	f104 0a19 	add.w	sl, r4, #25
 8006d22:	68e3      	ldr	r3, [r4, #12]
 8006d24:	6832      	ldr	r2, [r6, #0]
 8006d26:	1a9b      	subs	r3, r3, r2
 8006d28:	42ab      	cmp	r3, r5
 8006d2a:	dc26      	bgt.n	8006d7a <_printf_common+0x96>
 8006d2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d30:	1e13      	subs	r3, r2, #0
 8006d32:	6822      	ldr	r2, [r4, #0]
 8006d34:	bf18      	it	ne
 8006d36:	2301      	movne	r3, #1
 8006d38:	0692      	lsls	r2, r2, #26
 8006d3a:	d42b      	bmi.n	8006d94 <_printf_common+0xb0>
 8006d3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d40:	4649      	mov	r1, r9
 8006d42:	4638      	mov	r0, r7
 8006d44:	47c0      	blx	r8
 8006d46:	3001      	adds	r0, #1
 8006d48:	d01e      	beq.n	8006d88 <_printf_common+0xa4>
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	68e5      	ldr	r5, [r4, #12]
 8006d4e:	6832      	ldr	r2, [r6, #0]
 8006d50:	f003 0306 	and.w	r3, r3, #6
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	bf08      	it	eq
 8006d58:	1aad      	subeq	r5, r5, r2
 8006d5a:	68a3      	ldr	r3, [r4, #8]
 8006d5c:	6922      	ldr	r2, [r4, #16]
 8006d5e:	bf0c      	ite	eq
 8006d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d64:	2500      	movne	r5, #0
 8006d66:	4293      	cmp	r3, r2
 8006d68:	bfc4      	itt	gt
 8006d6a:	1a9b      	subgt	r3, r3, r2
 8006d6c:	18ed      	addgt	r5, r5, r3
 8006d6e:	2600      	movs	r6, #0
 8006d70:	341a      	adds	r4, #26
 8006d72:	42b5      	cmp	r5, r6
 8006d74:	d11a      	bne.n	8006dac <_printf_common+0xc8>
 8006d76:	2000      	movs	r0, #0
 8006d78:	e008      	b.n	8006d8c <_printf_common+0xa8>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4652      	mov	r2, sl
 8006d7e:	4649      	mov	r1, r9
 8006d80:	4638      	mov	r0, r7
 8006d82:	47c0      	blx	r8
 8006d84:	3001      	adds	r0, #1
 8006d86:	d103      	bne.n	8006d90 <_printf_common+0xac>
 8006d88:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d90:	3501      	adds	r5, #1
 8006d92:	e7c6      	b.n	8006d22 <_printf_common+0x3e>
 8006d94:	18e1      	adds	r1, r4, r3
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	2030      	movs	r0, #48	; 0x30
 8006d9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d9e:	4422      	add	r2, r4
 8006da0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006da4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006da8:	3302      	adds	r3, #2
 8006daa:	e7c7      	b.n	8006d3c <_printf_common+0x58>
 8006dac:	2301      	movs	r3, #1
 8006dae:	4622      	mov	r2, r4
 8006db0:	4649      	mov	r1, r9
 8006db2:	4638      	mov	r0, r7
 8006db4:	47c0      	blx	r8
 8006db6:	3001      	adds	r0, #1
 8006db8:	d0e6      	beq.n	8006d88 <_printf_common+0xa4>
 8006dba:	3601      	adds	r6, #1
 8006dbc:	e7d9      	b.n	8006d72 <_printf_common+0x8e>
	...

08006dc0 <_printf_i>:
 8006dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc4:	7e0f      	ldrb	r7, [r1, #24]
 8006dc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006dc8:	2f78      	cmp	r7, #120	; 0x78
 8006dca:	4691      	mov	r9, r2
 8006dcc:	4680      	mov	r8, r0
 8006dce:	460c      	mov	r4, r1
 8006dd0:	469a      	mov	sl, r3
 8006dd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dd6:	d807      	bhi.n	8006de8 <_printf_i+0x28>
 8006dd8:	2f62      	cmp	r7, #98	; 0x62
 8006dda:	d80a      	bhi.n	8006df2 <_printf_i+0x32>
 8006ddc:	2f00      	cmp	r7, #0
 8006dde:	f000 80d8 	beq.w	8006f92 <_printf_i+0x1d2>
 8006de2:	2f58      	cmp	r7, #88	; 0x58
 8006de4:	f000 80a3 	beq.w	8006f2e <_printf_i+0x16e>
 8006de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006df0:	e03a      	b.n	8006e68 <_printf_i+0xa8>
 8006df2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006df6:	2b15      	cmp	r3, #21
 8006df8:	d8f6      	bhi.n	8006de8 <_printf_i+0x28>
 8006dfa:	a101      	add	r1, pc, #4	; (adr r1, 8006e00 <_printf_i+0x40>)
 8006dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e00:	08006e59 	.word	0x08006e59
 8006e04:	08006e6d 	.word	0x08006e6d
 8006e08:	08006de9 	.word	0x08006de9
 8006e0c:	08006de9 	.word	0x08006de9
 8006e10:	08006de9 	.word	0x08006de9
 8006e14:	08006de9 	.word	0x08006de9
 8006e18:	08006e6d 	.word	0x08006e6d
 8006e1c:	08006de9 	.word	0x08006de9
 8006e20:	08006de9 	.word	0x08006de9
 8006e24:	08006de9 	.word	0x08006de9
 8006e28:	08006de9 	.word	0x08006de9
 8006e2c:	08006f79 	.word	0x08006f79
 8006e30:	08006e9d 	.word	0x08006e9d
 8006e34:	08006f5b 	.word	0x08006f5b
 8006e38:	08006de9 	.word	0x08006de9
 8006e3c:	08006de9 	.word	0x08006de9
 8006e40:	08006f9b 	.word	0x08006f9b
 8006e44:	08006de9 	.word	0x08006de9
 8006e48:	08006e9d 	.word	0x08006e9d
 8006e4c:	08006de9 	.word	0x08006de9
 8006e50:	08006de9 	.word	0x08006de9
 8006e54:	08006f63 	.word	0x08006f63
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	1d1a      	adds	r2, r3, #4
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	602a      	str	r2, [r5, #0]
 8006e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e0a3      	b.n	8006fb4 <_printf_i+0x1f4>
 8006e6c:	6820      	ldr	r0, [r4, #0]
 8006e6e:	6829      	ldr	r1, [r5, #0]
 8006e70:	0606      	lsls	r6, r0, #24
 8006e72:	f101 0304 	add.w	r3, r1, #4
 8006e76:	d50a      	bpl.n	8006e8e <_printf_i+0xce>
 8006e78:	680e      	ldr	r6, [r1, #0]
 8006e7a:	602b      	str	r3, [r5, #0]
 8006e7c:	2e00      	cmp	r6, #0
 8006e7e:	da03      	bge.n	8006e88 <_printf_i+0xc8>
 8006e80:	232d      	movs	r3, #45	; 0x2d
 8006e82:	4276      	negs	r6, r6
 8006e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e88:	485e      	ldr	r0, [pc, #376]	; (8007004 <_printf_i+0x244>)
 8006e8a:	230a      	movs	r3, #10
 8006e8c:	e019      	b.n	8006ec2 <_printf_i+0x102>
 8006e8e:	680e      	ldr	r6, [r1, #0]
 8006e90:	602b      	str	r3, [r5, #0]
 8006e92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e96:	bf18      	it	ne
 8006e98:	b236      	sxthne	r6, r6
 8006e9a:	e7ef      	b.n	8006e7c <_printf_i+0xbc>
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	6820      	ldr	r0, [r4, #0]
 8006ea0:	1d19      	adds	r1, r3, #4
 8006ea2:	6029      	str	r1, [r5, #0]
 8006ea4:	0601      	lsls	r1, r0, #24
 8006ea6:	d501      	bpl.n	8006eac <_printf_i+0xec>
 8006ea8:	681e      	ldr	r6, [r3, #0]
 8006eaa:	e002      	b.n	8006eb2 <_printf_i+0xf2>
 8006eac:	0646      	lsls	r6, r0, #25
 8006eae:	d5fb      	bpl.n	8006ea8 <_printf_i+0xe8>
 8006eb0:	881e      	ldrh	r6, [r3, #0]
 8006eb2:	4854      	ldr	r0, [pc, #336]	; (8007004 <_printf_i+0x244>)
 8006eb4:	2f6f      	cmp	r7, #111	; 0x6f
 8006eb6:	bf0c      	ite	eq
 8006eb8:	2308      	moveq	r3, #8
 8006eba:	230a      	movne	r3, #10
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ec2:	6865      	ldr	r5, [r4, #4]
 8006ec4:	60a5      	str	r5, [r4, #8]
 8006ec6:	2d00      	cmp	r5, #0
 8006ec8:	bfa2      	ittt	ge
 8006eca:	6821      	ldrge	r1, [r4, #0]
 8006ecc:	f021 0104 	bicge.w	r1, r1, #4
 8006ed0:	6021      	strge	r1, [r4, #0]
 8006ed2:	b90e      	cbnz	r6, 8006ed8 <_printf_i+0x118>
 8006ed4:	2d00      	cmp	r5, #0
 8006ed6:	d04d      	beq.n	8006f74 <_printf_i+0x1b4>
 8006ed8:	4615      	mov	r5, r2
 8006eda:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ede:	fb03 6711 	mls	r7, r3, r1, r6
 8006ee2:	5dc7      	ldrb	r7, [r0, r7]
 8006ee4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ee8:	4637      	mov	r7, r6
 8006eea:	42bb      	cmp	r3, r7
 8006eec:	460e      	mov	r6, r1
 8006eee:	d9f4      	bls.n	8006eda <_printf_i+0x11a>
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d10b      	bne.n	8006f0c <_printf_i+0x14c>
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	07de      	lsls	r6, r3, #31
 8006ef8:	d508      	bpl.n	8006f0c <_printf_i+0x14c>
 8006efa:	6923      	ldr	r3, [r4, #16]
 8006efc:	6861      	ldr	r1, [r4, #4]
 8006efe:	4299      	cmp	r1, r3
 8006f00:	bfde      	ittt	le
 8006f02:	2330      	movle	r3, #48	; 0x30
 8006f04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f0c:	1b52      	subs	r2, r2, r5
 8006f0e:	6122      	str	r2, [r4, #16]
 8006f10:	f8cd a000 	str.w	sl, [sp]
 8006f14:	464b      	mov	r3, r9
 8006f16:	aa03      	add	r2, sp, #12
 8006f18:	4621      	mov	r1, r4
 8006f1a:	4640      	mov	r0, r8
 8006f1c:	f7ff fee2 	bl	8006ce4 <_printf_common>
 8006f20:	3001      	adds	r0, #1
 8006f22:	d14c      	bne.n	8006fbe <_printf_i+0x1fe>
 8006f24:	f04f 30ff 	mov.w	r0, #4294967295
 8006f28:	b004      	add	sp, #16
 8006f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f2e:	4835      	ldr	r0, [pc, #212]	; (8007004 <_printf_i+0x244>)
 8006f30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f34:	6829      	ldr	r1, [r5, #0]
 8006f36:	6823      	ldr	r3, [r4, #0]
 8006f38:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f3c:	6029      	str	r1, [r5, #0]
 8006f3e:	061d      	lsls	r5, r3, #24
 8006f40:	d514      	bpl.n	8006f6c <_printf_i+0x1ac>
 8006f42:	07df      	lsls	r7, r3, #31
 8006f44:	bf44      	itt	mi
 8006f46:	f043 0320 	orrmi.w	r3, r3, #32
 8006f4a:	6023      	strmi	r3, [r4, #0]
 8006f4c:	b91e      	cbnz	r6, 8006f56 <_printf_i+0x196>
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	f023 0320 	bic.w	r3, r3, #32
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	2310      	movs	r3, #16
 8006f58:	e7b0      	b.n	8006ebc <_printf_i+0xfc>
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	f043 0320 	orr.w	r3, r3, #32
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	2378      	movs	r3, #120	; 0x78
 8006f64:	4828      	ldr	r0, [pc, #160]	; (8007008 <_printf_i+0x248>)
 8006f66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f6a:	e7e3      	b.n	8006f34 <_printf_i+0x174>
 8006f6c:	0659      	lsls	r1, r3, #25
 8006f6e:	bf48      	it	mi
 8006f70:	b2b6      	uxthmi	r6, r6
 8006f72:	e7e6      	b.n	8006f42 <_printf_i+0x182>
 8006f74:	4615      	mov	r5, r2
 8006f76:	e7bb      	b.n	8006ef0 <_printf_i+0x130>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	6826      	ldr	r6, [r4, #0]
 8006f7c:	6961      	ldr	r1, [r4, #20]
 8006f7e:	1d18      	adds	r0, r3, #4
 8006f80:	6028      	str	r0, [r5, #0]
 8006f82:	0635      	lsls	r5, r6, #24
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	d501      	bpl.n	8006f8c <_printf_i+0x1cc>
 8006f88:	6019      	str	r1, [r3, #0]
 8006f8a:	e002      	b.n	8006f92 <_printf_i+0x1d2>
 8006f8c:	0670      	lsls	r0, r6, #25
 8006f8e:	d5fb      	bpl.n	8006f88 <_printf_i+0x1c8>
 8006f90:	8019      	strh	r1, [r3, #0]
 8006f92:	2300      	movs	r3, #0
 8006f94:	6123      	str	r3, [r4, #16]
 8006f96:	4615      	mov	r5, r2
 8006f98:	e7ba      	b.n	8006f10 <_printf_i+0x150>
 8006f9a:	682b      	ldr	r3, [r5, #0]
 8006f9c:	1d1a      	adds	r2, r3, #4
 8006f9e:	602a      	str	r2, [r5, #0]
 8006fa0:	681d      	ldr	r5, [r3, #0]
 8006fa2:	6862      	ldr	r2, [r4, #4]
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f7f9 f91a 	bl	80001e0 <memchr>
 8006fac:	b108      	cbz	r0, 8006fb2 <_printf_i+0x1f2>
 8006fae:	1b40      	subs	r0, r0, r5
 8006fb0:	6060      	str	r0, [r4, #4]
 8006fb2:	6863      	ldr	r3, [r4, #4]
 8006fb4:	6123      	str	r3, [r4, #16]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fbc:	e7a8      	b.n	8006f10 <_printf_i+0x150>
 8006fbe:	6923      	ldr	r3, [r4, #16]
 8006fc0:	462a      	mov	r2, r5
 8006fc2:	4649      	mov	r1, r9
 8006fc4:	4640      	mov	r0, r8
 8006fc6:	47d0      	blx	sl
 8006fc8:	3001      	adds	r0, #1
 8006fca:	d0ab      	beq.n	8006f24 <_printf_i+0x164>
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	079b      	lsls	r3, r3, #30
 8006fd0:	d413      	bmi.n	8006ffa <_printf_i+0x23a>
 8006fd2:	68e0      	ldr	r0, [r4, #12]
 8006fd4:	9b03      	ldr	r3, [sp, #12]
 8006fd6:	4298      	cmp	r0, r3
 8006fd8:	bfb8      	it	lt
 8006fda:	4618      	movlt	r0, r3
 8006fdc:	e7a4      	b.n	8006f28 <_printf_i+0x168>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	4632      	mov	r2, r6
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	4640      	mov	r0, r8
 8006fe6:	47d0      	blx	sl
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d09b      	beq.n	8006f24 <_printf_i+0x164>
 8006fec:	3501      	adds	r5, #1
 8006fee:	68e3      	ldr	r3, [r4, #12]
 8006ff0:	9903      	ldr	r1, [sp, #12]
 8006ff2:	1a5b      	subs	r3, r3, r1
 8006ff4:	42ab      	cmp	r3, r5
 8006ff6:	dcf2      	bgt.n	8006fde <_printf_i+0x21e>
 8006ff8:	e7eb      	b.n	8006fd2 <_printf_i+0x212>
 8006ffa:	2500      	movs	r5, #0
 8006ffc:	f104 0619 	add.w	r6, r4, #25
 8007000:	e7f5      	b.n	8006fee <_printf_i+0x22e>
 8007002:	bf00      	nop
 8007004:	08007b5d 	.word	0x08007b5d
 8007008:	08007b6e 	.word	0x08007b6e

0800700c <memmove>:
 800700c:	4288      	cmp	r0, r1
 800700e:	b510      	push	{r4, lr}
 8007010:	eb01 0402 	add.w	r4, r1, r2
 8007014:	d902      	bls.n	800701c <memmove+0x10>
 8007016:	4284      	cmp	r4, r0
 8007018:	4623      	mov	r3, r4
 800701a:	d807      	bhi.n	800702c <memmove+0x20>
 800701c:	1e43      	subs	r3, r0, #1
 800701e:	42a1      	cmp	r1, r4
 8007020:	d008      	beq.n	8007034 <memmove+0x28>
 8007022:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800702a:	e7f8      	b.n	800701e <memmove+0x12>
 800702c:	4402      	add	r2, r0
 800702e:	4601      	mov	r1, r0
 8007030:	428a      	cmp	r2, r1
 8007032:	d100      	bne.n	8007036 <memmove+0x2a>
 8007034:	bd10      	pop	{r4, pc}
 8007036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800703a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800703e:	e7f7      	b.n	8007030 <memmove+0x24>

08007040 <_free_r>:
 8007040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007042:	2900      	cmp	r1, #0
 8007044:	d044      	beq.n	80070d0 <_free_r+0x90>
 8007046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800704a:	9001      	str	r0, [sp, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	f1a1 0404 	sub.w	r4, r1, #4
 8007052:	bfb8      	it	lt
 8007054:	18e4      	addlt	r4, r4, r3
 8007056:	f000 f913 	bl	8007280 <__malloc_lock>
 800705a:	4a1e      	ldr	r2, [pc, #120]	; (80070d4 <_free_r+0x94>)
 800705c:	9801      	ldr	r0, [sp, #4]
 800705e:	6813      	ldr	r3, [r2, #0]
 8007060:	b933      	cbnz	r3, 8007070 <_free_r+0x30>
 8007062:	6063      	str	r3, [r4, #4]
 8007064:	6014      	str	r4, [r2, #0]
 8007066:	b003      	add	sp, #12
 8007068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800706c:	f000 b90e 	b.w	800728c <__malloc_unlock>
 8007070:	42a3      	cmp	r3, r4
 8007072:	d908      	bls.n	8007086 <_free_r+0x46>
 8007074:	6825      	ldr	r5, [r4, #0]
 8007076:	1961      	adds	r1, r4, r5
 8007078:	428b      	cmp	r3, r1
 800707a:	bf01      	itttt	eq
 800707c:	6819      	ldreq	r1, [r3, #0]
 800707e:	685b      	ldreq	r3, [r3, #4]
 8007080:	1949      	addeq	r1, r1, r5
 8007082:	6021      	streq	r1, [r4, #0]
 8007084:	e7ed      	b.n	8007062 <_free_r+0x22>
 8007086:	461a      	mov	r2, r3
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	b10b      	cbz	r3, 8007090 <_free_r+0x50>
 800708c:	42a3      	cmp	r3, r4
 800708e:	d9fa      	bls.n	8007086 <_free_r+0x46>
 8007090:	6811      	ldr	r1, [r2, #0]
 8007092:	1855      	adds	r5, r2, r1
 8007094:	42a5      	cmp	r5, r4
 8007096:	d10b      	bne.n	80070b0 <_free_r+0x70>
 8007098:	6824      	ldr	r4, [r4, #0]
 800709a:	4421      	add	r1, r4
 800709c:	1854      	adds	r4, r2, r1
 800709e:	42a3      	cmp	r3, r4
 80070a0:	6011      	str	r1, [r2, #0]
 80070a2:	d1e0      	bne.n	8007066 <_free_r+0x26>
 80070a4:	681c      	ldr	r4, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	6053      	str	r3, [r2, #4]
 80070aa:	4421      	add	r1, r4
 80070ac:	6011      	str	r1, [r2, #0]
 80070ae:	e7da      	b.n	8007066 <_free_r+0x26>
 80070b0:	d902      	bls.n	80070b8 <_free_r+0x78>
 80070b2:	230c      	movs	r3, #12
 80070b4:	6003      	str	r3, [r0, #0]
 80070b6:	e7d6      	b.n	8007066 <_free_r+0x26>
 80070b8:	6825      	ldr	r5, [r4, #0]
 80070ba:	1961      	adds	r1, r4, r5
 80070bc:	428b      	cmp	r3, r1
 80070be:	bf04      	itt	eq
 80070c0:	6819      	ldreq	r1, [r3, #0]
 80070c2:	685b      	ldreq	r3, [r3, #4]
 80070c4:	6063      	str	r3, [r4, #4]
 80070c6:	bf04      	itt	eq
 80070c8:	1949      	addeq	r1, r1, r5
 80070ca:	6021      	streq	r1, [r4, #0]
 80070cc:	6054      	str	r4, [r2, #4]
 80070ce:	e7ca      	b.n	8007066 <_free_r+0x26>
 80070d0:	b003      	add	sp, #12
 80070d2:	bd30      	pop	{r4, r5, pc}
 80070d4:	200006c4 	.word	0x200006c4

080070d8 <sbrk_aligned>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	4e0e      	ldr	r6, [pc, #56]	; (8007114 <sbrk_aligned+0x3c>)
 80070dc:	460c      	mov	r4, r1
 80070de:	6831      	ldr	r1, [r6, #0]
 80070e0:	4605      	mov	r5, r0
 80070e2:	b911      	cbnz	r1, 80070ea <sbrk_aligned+0x12>
 80070e4:	f000 f8bc 	bl	8007260 <_sbrk_r>
 80070e8:	6030      	str	r0, [r6, #0]
 80070ea:	4621      	mov	r1, r4
 80070ec:	4628      	mov	r0, r5
 80070ee:	f000 f8b7 	bl	8007260 <_sbrk_r>
 80070f2:	1c43      	adds	r3, r0, #1
 80070f4:	d00a      	beq.n	800710c <sbrk_aligned+0x34>
 80070f6:	1cc4      	adds	r4, r0, #3
 80070f8:	f024 0403 	bic.w	r4, r4, #3
 80070fc:	42a0      	cmp	r0, r4
 80070fe:	d007      	beq.n	8007110 <sbrk_aligned+0x38>
 8007100:	1a21      	subs	r1, r4, r0
 8007102:	4628      	mov	r0, r5
 8007104:	f000 f8ac 	bl	8007260 <_sbrk_r>
 8007108:	3001      	adds	r0, #1
 800710a:	d101      	bne.n	8007110 <sbrk_aligned+0x38>
 800710c:	f04f 34ff 	mov.w	r4, #4294967295
 8007110:	4620      	mov	r0, r4
 8007112:	bd70      	pop	{r4, r5, r6, pc}
 8007114:	200006c8 	.word	0x200006c8

08007118 <_malloc_r>:
 8007118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800711c:	1ccd      	adds	r5, r1, #3
 800711e:	f025 0503 	bic.w	r5, r5, #3
 8007122:	3508      	adds	r5, #8
 8007124:	2d0c      	cmp	r5, #12
 8007126:	bf38      	it	cc
 8007128:	250c      	movcc	r5, #12
 800712a:	2d00      	cmp	r5, #0
 800712c:	4607      	mov	r7, r0
 800712e:	db01      	blt.n	8007134 <_malloc_r+0x1c>
 8007130:	42a9      	cmp	r1, r5
 8007132:	d905      	bls.n	8007140 <_malloc_r+0x28>
 8007134:	230c      	movs	r3, #12
 8007136:	603b      	str	r3, [r7, #0]
 8007138:	2600      	movs	r6, #0
 800713a:	4630      	mov	r0, r6
 800713c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007140:	4e2e      	ldr	r6, [pc, #184]	; (80071fc <_malloc_r+0xe4>)
 8007142:	f000 f89d 	bl	8007280 <__malloc_lock>
 8007146:	6833      	ldr	r3, [r6, #0]
 8007148:	461c      	mov	r4, r3
 800714a:	bb34      	cbnz	r4, 800719a <_malloc_r+0x82>
 800714c:	4629      	mov	r1, r5
 800714e:	4638      	mov	r0, r7
 8007150:	f7ff ffc2 	bl	80070d8 <sbrk_aligned>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	4604      	mov	r4, r0
 8007158:	d14d      	bne.n	80071f6 <_malloc_r+0xde>
 800715a:	6834      	ldr	r4, [r6, #0]
 800715c:	4626      	mov	r6, r4
 800715e:	2e00      	cmp	r6, #0
 8007160:	d140      	bne.n	80071e4 <_malloc_r+0xcc>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	4631      	mov	r1, r6
 8007166:	4638      	mov	r0, r7
 8007168:	eb04 0803 	add.w	r8, r4, r3
 800716c:	f000 f878 	bl	8007260 <_sbrk_r>
 8007170:	4580      	cmp	r8, r0
 8007172:	d13a      	bne.n	80071ea <_malloc_r+0xd2>
 8007174:	6821      	ldr	r1, [r4, #0]
 8007176:	3503      	adds	r5, #3
 8007178:	1a6d      	subs	r5, r5, r1
 800717a:	f025 0503 	bic.w	r5, r5, #3
 800717e:	3508      	adds	r5, #8
 8007180:	2d0c      	cmp	r5, #12
 8007182:	bf38      	it	cc
 8007184:	250c      	movcc	r5, #12
 8007186:	4629      	mov	r1, r5
 8007188:	4638      	mov	r0, r7
 800718a:	f7ff ffa5 	bl	80070d8 <sbrk_aligned>
 800718e:	3001      	adds	r0, #1
 8007190:	d02b      	beq.n	80071ea <_malloc_r+0xd2>
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	442b      	add	r3, r5
 8007196:	6023      	str	r3, [r4, #0]
 8007198:	e00e      	b.n	80071b8 <_malloc_r+0xa0>
 800719a:	6822      	ldr	r2, [r4, #0]
 800719c:	1b52      	subs	r2, r2, r5
 800719e:	d41e      	bmi.n	80071de <_malloc_r+0xc6>
 80071a0:	2a0b      	cmp	r2, #11
 80071a2:	d916      	bls.n	80071d2 <_malloc_r+0xba>
 80071a4:	1961      	adds	r1, r4, r5
 80071a6:	42a3      	cmp	r3, r4
 80071a8:	6025      	str	r5, [r4, #0]
 80071aa:	bf18      	it	ne
 80071ac:	6059      	strne	r1, [r3, #4]
 80071ae:	6863      	ldr	r3, [r4, #4]
 80071b0:	bf08      	it	eq
 80071b2:	6031      	streq	r1, [r6, #0]
 80071b4:	5162      	str	r2, [r4, r5]
 80071b6:	604b      	str	r3, [r1, #4]
 80071b8:	4638      	mov	r0, r7
 80071ba:	f104 060b 	add.w	r6, r4, #11
 80071be:	f000 f865 	bl	800728c <__malloc_unlock>
 80071c2:	f026 0607 	bic.w	r6, r6, #7
 80071c6:	1d23      	adds	r3, r4, #4
 80071c8:	1af2      	subs	r2, r6, r3
 80071ca:	d0b6      	beq.n	800713a <_malloc_r+0x22>
 80071cc:	1b9b      	subs	r3, r3, r6
 80071ce:	50a3      	str	r3, [r4, r2]
 80071d0:	e7b3      	b.n	800713a <_malloc_r+0x22>
 80071d2:	6862      	ldr	r2, [r4, #4]
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	bf0c      	ite	eq
 80071d8:	6032      	streq	r2, [r6, #0]
 80071da:	605a      	strne	r2, [r3, #4]
 80071dc:	e7ec      	b.n	80071b8 <_malloc_r+0xa0>
 80071de:	4623      	mov	r3, r4
 80071e0:	6864      	ldr	r4, [r4, #4]
 80071e2:	e7b2      	b.n	800714a <_malloc_r+0x32>
 80071e4:	4634      	mov	r4, r6
 80071e6:	6876      	ldr	r6, [r6, #4]
 80071e8:	e7b9      	b.n	800715e <_malloc_r+0x46>
 80071ea:	230c      	movs	r3, #12
 80071ec:	603b      	str	r3, [r7, #0]
 80071ee:	4638      	mov	r0, r7
 80071f0:	f000 f84c 	bl	800728c <__malloc_unlock>
 80071f4:	e7a1      	b.n	800713a <_malloc_r+0x22>
 80071f6:	6025      	str	r5, [r4, #0]
 80071f8:	e7de      	b.n	80071b8 <_malloc_r+0xa0>
 80071fa:	bf00      	nop
 80071fc:	200006c4 	.word	0x200006c4

08007200 <_realloc_r>:
 8007200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007204:	4680      	mov	r8, r0
 8007206:	4614      	mov	r4, r2
 8007208:	460e      	mov	r6, r1
 800720a:	b921      	cbnz	r1, 8007216 <_realloc_r+0x16>
 800720c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007210:	4611      	mov	r1, r2
 8007212:	f7ff bf81 	b.w	8007118 <_malloc_r>
 8007216:	b92a      	cbnz	r2, 8007224 <_realloc_r+0x24>
 8007218:	f7ff ff12 	bl	8007040 <_free_r>
 800721c:	4625      	mov	r5, r4
 800721e:	4628      	mov	r0, r5
 8007220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007224:	f000 f838 	bl	8007298 <_malloc_usable_size_r>
 8007228:	4284      	cmp	r4, r0
 800722a:	4607      	mov	r7, r0
 800722c:	d802      	bhi.n	8007234 <_realloc_r+0x34>
 800722e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007232:	d812      	bhi.n	800725a <_realloc_r+0x5a>
 8007234:	4621      	mov	r1, r4
 8007236:	4640      	mov	r0, r8
 8007238:	f7ff ff6e 	bl	8007118 <_malloc_r>
 800723c:	4605      	mov	r5, r0
 800723e:	2800      	cmp	r0, #0
 8007240:	d0ed      	beq.n	800721e <_realloc_r+0x1e>
 8007242:	42bc      	cmp	r4, r7
 8007244:	4622      	mov	r2, r4
 8007246:	4631      	mov	r1, r6
 8007248:	bf28      	it	cs
 800724a:	463a      	movcs	r2, r7
 800724c:	f7ff fb84 	bl	8006958 <memcpy>
 8007250:	4631      	mov	r1, r6
 8007252:	4640      	mov	r0, r8
 8007254:	f7ff fef4 	bl	8007040 <_free_r>
 8007258:	e7e1      	b.n	800721e <_realloc_r+0x1e>
 800725a:	4635      	mov	r5, r6
 800725c:	e7df      	b.n	800721e <_realloc_r+0x1e>
	...

08007260 <_sbrk_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4d06      	ldr	r5, [pc, #24]	; (800727c <_sbrk_r+0x1c>)
 8007264:	2300      	movs	r3, #0
 8007266:	4604      	mov	r4, r0
 8007268:	4608      	mov	r0, r1
 800726a:	602b      	str	r3, [r5, #0]
 800726c:	f7fb ff70 	bl	8003150 <_sbrk>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_sbrk_r+0x1a>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_sbrk_r+0x1a>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	200006cc 	.word	0x200006cc

08007280 <__malloc_lock>:
 8007280:	4801      	ldr	r0, [pc, #4]	; (8007288 <__malloc_lock+0x8>)
 8007282:	f000 b811 	b.w	80072a8 <__retarget_lock_acquire_recursive>
 8007286:	bf00      	nop
 8007288:	200006d0 	.word	0x200006d0

0800728c <__malloc_unlock>:
 800728c:	4801      	ldr	r0, [pc, #4]	; (8007294 <__malloc_unlock+0x8>)
 800728e:	f000 b80c 	b.w	80072aa <__retarget_lock_release_recursive>
 8007292:	bf00      	nop
 8007294:	200006d0 	.word	0x200006d0

08007298 <_malloc_usable_size_r>:
 8007298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800729c:	1f18      	subs	r0, r3, #4
 800729e:	2b00      	cmp	r3, #0
 80072a0:	bfbc      	itt	lt
 80072a2:	580b      	ldrlt	r3, [r1, r0]
 80072a4:	18c0      	addlt	r0, r0, r3
 80072a6:	4770      	bx	lr

080072a8 <__retarget_lock_acquire_recursive>:
 80072a8:	4770      	bx	lr

080072aa <__retarget_lock_release_recursive>:
 80072aa:	4770      	bx	lr

080072ac <_init>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	bf00      	nop
 80072b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072b2:	bc08      	pop	{r3}
 80072b4:	469e      	mov	lr, r3
 80072b6:	4770      	bx	lr

080072b8 <_fini>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	bf00      	nop
 80072bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072be:	bc08      	pop	{r3}
 80072c0:	469e      	mov	lr, r3
 80072c2:	4770      	bx	lr
